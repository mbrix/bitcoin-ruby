var search_data = {"index":{"searchIndex":["array","bitcoin","binaryextensions","builder","blockbuilder","scriptbuilder","txbuilder","txinbuilder","txoutbuilder","config","connection","connectionhandler","gui","addrview","bitcoin","gui","bitcoin","network","commandclient","connview","connection","gui","helpers","treeview","txinview","txview","key","logger","logwrapper","logger","timelogger","namecoin","script","storage","backend","models","name","network","commandclient","commandhandler","connectionhandler","node","openssl_ec","p","protocol","addr","alert","auxpow","block","handler","parser","tx","txin","txout","version","script","scriptopcodeerror","storage","backends","dummystore","sequelstore","storebase","utxostore","models","block","tx","txin","txout","util","validation","block","tx","validationerror","wallet","deterministickeystore","keygenerator","simplecoinselector","simplekeystore","txdp","wallet","connection","digest","em","electrumclient","gtk","hash","json","log4r","logger","mnemonic","object","openssl","bn","pkey","ec","point","rawjson_connection","server","simplenode","connection","string","==()","==()","==()","==()","==()","add_in()","add_key()","add_key()","add_out()","add_sig()","add_signature_pubkey_script()","add_wallet_filters()","add_watched_address()","add_watched_address()","addr()","addr()","address_checksum?()","address_type()","address_version()","addrs()","alive?()","backend_name()","base58_checksum?()","base58_to_hex()","base58_to_int()","binary_from_hash()","binary_from_hash()","binary_from_json()","binary_from_json()","binary_from_string()","binary_hash()","binary_hash()","bip34_block_height()","bitcoin_byte_hash()","bitcoin_elliptic_curve()","bitcoin_hash()","bitcoin_mrkl()","bits()","blk()","blob()","block()","block_average_hashing_time()","block_average_mining_time()","block_creation_reward()","block_difficulty()","block_hash()","block_hashes_to_win()","block_next_retarget()","block_probability()","block_work()","blockchain_total_btc()","bn2mpi()","build()","build_block()","build_tx()","calculate_minimum_fee()","callback()","callback()","cast_to_bignum()","check_metadata()","check_nonce()","check_target()","check_tx()","checksum()","codehash_script()","coinbase()","coinbase()","coinbase?()","coinbase_scriptsig()","coinbase_value()","compressed()","confirmations()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect_dns()","connect_dns_nslookup()","connect_dns_resolver()","connect_known_nodes()","connect_known_peers()","connect_node()","connect_peer()","connect_random_from_dns()","connect_random_from_dns()","connected()","connected()","connected?()","connection_completed()","create()","decimaltarget()","decode()","decode_base58()","decode_compact_bits()","decode_target()","deep_merge()","delete()","delete_tx()","der_to_private_key()","dialog()","difficulty()","difficulty()","disconnected()","display_tx()","drop_signatures()","embed()","encode()","encode_base58()","encode_compact_bits()","expires_in()","export()","export()","external_ip()","find_hash()","find_key()","find_nonce()","flag()","flag_key()","flush_new_outs()","flush_spent_outs()","format_address()","format_address_col()","format_bool_col()","format_uptime()","format_uptime()","format_uptime_col()","format_value()","format_value_col()","format_version()","format_version_col()","from_base58()","from_file()","from_file()","from_hash()","from_hash()","from_hash()","from_hash()","from_hash()","from_hex()","from_hex()","from_hex_hash()","from_io()","from_io()","from_json()","from_json()","from_json_file()","from_json_file()","from_string()","generate()","generate()","generate_address()","generate_hash()","generate_key()","get_address()","get_address()","get_address()","get_addresses()","get_addresses()","get_addresses()","get_balance()","get_balance()","get_balance()","get_block()","get_block()","get_block()","get_block()","get_block()","get_block()","get_block_by_depth()","get_block_by_depth()","get_block_by_depth()","get_block_by_depth()","get_block_by_id()","get_block_by_id()","get_block_by_id()","get_block_by_id()","get_block_by_prev_hash()","get_block_by_prev_hash()","get_block_by_prev_hash()","get_block_by_prev_hash()","get_block_by_tx()","get_block_by_tx()","get_block_by_tx()","get_block_by_tx()","get_change_addr()","get_depth()","get_depth()","get_depth()","get_depth()","get_genesis_block()","get_hash()","get_hash160()","get_hash160()","get_hash160_address()","get_head()","get_head()","get_head()","get_head()","get_head_hash()","get_key()","get_locator()","get_multisig_addresses()","get_multisig_pubkeys()","get_name_by_txout_id()","get_namecoin_hash()","get_namecoin_name()","get_namecoin_name()","get_namecoin_value()","get_new_addr()","get_next_block()","get_next_in()","get_prev_block()","get_prev_out()","get_pubkey()","get_pubkey_address()","get_selector()","get_signatures_required()","get_tx()","get_tx()","get_tx()","get_tx()","get_tx()","get_tx()","get_tx()","get_tx()","get_tx_by_id()","get_tx_by_id()","get_tx_by_id()","get_tx_by_id()","get_txin_for_txout()","get_txin_for_txout()","get_txin_for_txout()","get_txout()","get_txout_by_id()","get_txout_by_id()","get_txout_for_txin()","get_txout_for_txin()","get_txouts()","get_txouts_for_address()","get_txouts_for_hash160()","get_txouts_for_hash160()","get_txouts_for_hash160()","get_txouts_for_name_hash()","get_txouts_for_pk_script()","get_txouts_for_pk_script()","get_txouts_for_pk_script()","get_txouts_for_pk_script()","get_unconfirmed_tx()","getblocks()","getblocks_pkt()","getdata_pkt()","getheaders_pkt()","gtk_main()","gui()","handle_addrs()","handle_assemble_tx()","handle_config()","handle_connect()","handle_connections()","handle_create_tx()","handle_disconnect()","handle_getaddr()","handle_getblocks()","handle_help()","handle_info()","handle_mempool_request()","handle_monitor()","handle_monitor_block()","handle_monitor_connection()","handle_monitor_output()","handle_monitor_tx()","handle_notfound_reply()","handle_relay_tx()","handle_rescan()","handle_stop()","handle_store_block()","handle_store_tx()","handle_stream_error()","handle_tslb()","has_block()","has_block()","has_block()","has_block()","has_tx()","has_tx()","has_tx()","has_tx()","hash()","hash()","hash160()","hash160()","hash160()","hash160_from_address()","hash160_to_address()","hash_from_payload()","hash_mrkl_branch()","hash_mrkl_tree()","header_info()","header_to_json()","hextarget()","htb()","htb()","htb_reverse()","hth()","hth()","import()","import()","import_key()","in_sync?()","included()","included()","incoming?()","info()","init_epoll()","init_ffi_ssl()","init_sequel_store()","inner_p2sh!()","inner_p2sh?()","input()","input_values()","inputs()","inspect_key()","int_to_base58()","inv_pkt()","invalid()","invalid?()","is_canonical_pubkey?()","is_hash160?()","is_multisig?()","is_name_firstupdate?()","is_name_new?()","is_name_update?()","is_namecoin?()","is_p2sh?()","is_pay_to_script_hash?()","is_pubkey?()","is_send_to_ip?()","is_standard?()","key()","key()","keys()","keys()","label()","label_key()","level=()","level=()","list()","lists()","little_endian_hex_of_n_bytes()","load()","load()","load_addrs()","load_file()","load_keys()","load_watched_addrs()","locator_payload()","lock_time()","lock_time()","log()","log()","log()","log()","log()","log()","log()","log()","main_iteration_with_queue()","max_size()","max_timestamp()","merge()","message()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","migrate()","min_size()","min_timestamp()","minimum_block_fee()","minimum_relay_fee()","mrkl_branch_root()","mrkl_root()","name_history()","name_show()","network()","network=()","network_name()","network_project()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_block()","new_key()","new_key()","new_tx()","new_tx()","next_bits_required()","on()","on_about()","on_addr()","on_addr()","on_addr()","on_addr()","on_alert()","on_block()","on_block()","on_block()","on_block()","on_block()","on_check_unconfirmed_toggled()","on_copy_addr()","on_exit()","on_get_block()","on_get_block()","on_get_block()","on_get_block()","on_get_transaction()","on_get_transaction()","on_get_transaction()","on_get_transaction()","on_getaddr()","on_getblocks()","on_handshake_begin()","on_handshake_begin()","on_handshake_begin()","on_handshake_complete()","on_handshake_complete()","on_handshake_complete()","on_headers()","on_inv_block()","on_inv_block()","on_inv_block()","on_inv_block()","on_inv_transaction()","on_inv_transaction()","on_inv_transaction()","on_inv_transaction()","on_new_addr()","on_new_tx()","on_new_wallet()","on_open_wallet()","on_paste_addr()","on_ping()","on_pong()","on_preferences()","on_request()","on_tx()","on_tx()","on_tx()","on_tx()","on_tx()","on_verack()","on_version()","on_version()","on_version()","op_0()","op_0notequal()","op_1()","op_1add()","op_1negate()","op_1sub()","op_2div()","op_2drop()","op_2dup()","op_2mul()","op_2over()","op_2swap()","op_3dup()","op_abs()","op_add()","op_booland()","op_boolor()","op_checkhashverify()","op_checkmultisig()","op_checksig()","op_checksigverify()","op_codeseparator()","op_depth()","op_drop()","op_dup()","op_else()","op_endif()","op_equal()","op_equalverify()","op_fromaltstack()","op_greaterthan()","op_greaterthanorequal()","op_hash160()","op_hash256()","op_if()","op_ifdup()","op_lessthan()","op_lessthanorequal()","op_max()","op_min()","op_negate()","op_nip()","op_nop()","op_nop1()","op_nop10()","op_nop2()","op_nop3()","op_nop4()","op_nop5()","op_nop6()","op_nop7()","op_nop8()","op_nop9()","op_not()","op_notif()","op_numequal()","op_numequalverify()","op_numnotequal()","op_over()","op_pick()","op_return()","op_ripemd160()","op_roll()","op_rot()","op_sha1()","op_sha256()","op_size()","op_sub()","op_swap()","op_toaltstack()","op_tuck()","op_ver()","op_verify()","op_within()","open_key()","open_wallet()","outgoing?()","output()","output_sum()","output_values()","p2sh_version()","pack_address_field()","pack_pushdata()","pack_pushdata_align()","pack_var_int()","pack_var_string()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_addr()","parse_alert()","parse_buffer()","parse_data()","parse_data()","parse_data()","parse_data()","parse_data()","parse_data_from_io()","parse_data_from_io()","parse_data_from_io()","parse_data_from_io()","parse_data_from_io()","parse_getblocks()","parse_headers()","parse_input()","parse_inv()","parse_payload()","parse_payload()","parse_script()","parse_script()","parse_script()","parse_sig()","parse_sigs()","parse_txdist()","parse_version()","pay_to_script_hash()","persist_addrs()","persist_block()","persist_block()","persist_block()","persist_block()","persist_transactions()","ping_pkt()","pk_script=()","pkt()","pkt()","pong_pkt()","pop_int()","post_init()","post_init()","post_init()","post_init()","post_init()","prev_block()","prev_block_hex()","prev_hash()","prev_out()","prev_out()","prev_out_index()","prev_txs()","previous_output()","priv()","priv=()","private_key_hex()","process_pkt()","pub()","pub=()","pub_compressed()","pub_uncompressed()","pubkey_to_address()","public_key_hex()","push_notification()","query_blocks()","queue()","queue_inv()","random()","read_binary_file()","recalc_block_hash()","receive_data()","receive_data()","receive_data()","receive_data()","receive_data()","receive_data()","receive_data()","recipient()","recover_compact_signature_to_key()","recover_public_key_from_signature()","regenerate_key()","regenerate_pubkey()","regenerate_public_key()","register_monitor_callbacks()","reorg()","reorg()","request()","request()","require_dependency()","rescan()","rescan()","rescan()","reset()","reset()","reset()","reset()","respond()","respond()","reverse_hth()","run()","run()","run()","save_keys()","script()","script()","script()","script=()","script=()","script_sig=()","select()","send_getaddr()","send_getblocks()","send_getdata_block()","send_getdata_tx()","send_getheaders()","send_inv()","send_ping()","sequence()","serialize()","serialize_transaction()","set_host()","set_priv()","set_pub()","set_store()","sha256()","sha256()","sign()","sign_data()","sign_inputs()","signature_hash_for_input()","signature_key()","signatures()","spent()","sqlite_pragmas()","standard()","start_timers()","stop()","stop_timers()","store_addr()","store_addrs()","store_block()","store_block()","store_name()","store_tx()","store_tx()","store_tx()","store_txin()","store_txout()","str_val()","string()","subscribe()","symbolize()","time()","time()","to_address_script()","to_base58()","to_binary()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash160_script()","to_hex()","to_hex()","to_json()","to_json()","to_json()","to_json_file()","to_json_file()","to_mpi()","to_multisig_script()","to_multisig_script_sig()","to_name_firstupdate_script()","to_name_new_script()","to_name_update_script()","to_null_payload()","to_p2sh_script()","to_payload()","to_payload()","to_payload()","to_payload()","to_payload()","to_payload()","to_payload()","to_payload()","to_pkt()","to_pubkey_script()","to_pubkey_script_sig()","to_s()","to_signature_pubkey_script()","to_string()","total_in()","total_out()","transactions_context()","transactions_syntax()","tree_view_col()","tx()","tx()","tx()","tx_data()","tx_list()","tx_validators()","txin()","txin_data()","txout_data()","type()","type()","type()","unbind()","unbind()","unbind()","unbind()","unbind()","unbind()","unbind()","unpack_address_field()","unpack_var_int()","unpack_var_int_array()","unpack_var_int_from_io()","unpack_var_string()","unpack_var_string_array()","unpack_var_string_from_io()","update()","update()","update()","update_block()","update_wallet_views()","uptime()","uptime()","uptime()","valid_address?()","valid_signature?()","validate()","validate()","validator()","validator()","value()","value_to_address()","verack_pkt()","verify()","verify_input_signature()","verify_mrkl_root()","verify_signature()","version()","version()","version_pkt()","wallet_preview()","weighted_sample()","work_addrs()","work_connect()","work_inv_queue()","work_queue()","work_relay()","wrap_block()","wrap_block()","wrap_block()","wrap_message_in_magic()","wrap_name()","wrap_tx()","wrap_tx()","wrap_tx()","wrap_txin()","wrap_txin()","wrap_txout()","wrap_txout()","wrap_txout()","copying","readme","config","examples","namecoin","node","storage","wallet","client.rb~","bitcoin-ruby.svg","gui.builder"],"longSearchIndex":["array","bitcoin","bitcoin::binaryextensions","bitcoin::builder","bitcoin::builder::blockbuilder","bitcoin::builder::scriptbuilder","bitcoin::builder::txbuilder","bitcoin::builder::txinbuilder","bitcoin::builder::txoutbuilder","bitcoin::config","bitcoin::connection","bitcoin::connectionhandler","bitcoin::gui","bitcoin::gui::addrview","bitcoin::gui::bitcoin","bitcoin::gui::bitcoin::gui","bitcoin::gui::bitcoin::gui::bitcoin","bitcoin::gui::bitcoin::gui::bitcoin::network","bitcoin::gui::bitcoin::gui::bitcoin::network::commandclient","bitcoin::gui::connview","bitcoin::gui::connection","bitcoin::gui::gui","bitcoin::gui::helpers","bitcoin::gui::treeview","bitcoin::gui::txinview","bitcoin::gui::txview","bitcoin::key","bitcoin::logger","bitcoin::logger::logwrapper","bitcoin::logger::logger","bitcoin::logger::timelogger","bitcoin::namecoin","bitcoin::namecoin::script","bitcoin::namecoin::storage","bitcoin::namecoin::storage::backend","bitcoin::namecoin::storage::models","bitcoin::namecoin::storage::models::name","bitcoin::network","bitcoin::network::commandclient","bitcoin::network::commandhandler","bitcoin::network::connectionhandler","bitcoin::network::node","bitcoin::openssl_ec","bitcoin::p","bitcoin::protocol","bitcoin::protocol::addr","bitcoin::protocol::alert","bitcoin::protocol::auxpow","bitcoin::protocol::block","bitcoin::protocol::handler","bitcoin::protocol::parser","bitcoin::protocol::tx","bitcoin::protocol::txin","bitcoin::protocol::txout","bitcoin::protocol::version","bitcoin::script","bitcoin::script::scriptopcodeerror","bitcoin::storage","bitcoin::storage::backends","bitcoin::storage::backends::dummystore","bitcoin::storage::backends::sequelstore","bitcoin::storage::backends::storebase","bitcoin::storage::backends::utxostore","bitcoin::storage::models","bitcoin::storage::models::block","bitcoin::storage::models::tx","bitcoin::storage::models::txin","bitcoin::storage::models::txout","bitcoin::util","bitcoin::validation","bitcoin::validation::block","bitcoin::validation::tx","bitcoin::validation::validationerror","bitcoin::wallet","bitcoin::wallet::deterministickeystore","bitcoin::wallet::keygenerator","bitcoin::wallet::simplecoinselector","bitcoin::wallet::simplekeystore","bitcoin::wallet::txdp","bitcoin::wallet::wallet","connection","digest","em","electrumclient","gtk","hash","json","log4r","log4r::logger","mnemonic","object","openssl","openssl::bn","openssl::pkey","openssl::pkey::ec","openssl::pkey::ec::point","rawjson_connection","server","simplenode","simplenode::connection","string","bitcoin::key#==()","bitcoin::protocol::block#==()","bitcoin::protocol::tx#==()","bitcoin::protocol::txin#==()","bitcoin::protocol::txout#==()","bitcoin::protocol::tx#add_in()","bitcoin::wallet::simplekeystore#add_key()","bitcoin::wallet::wallet#add_key()","bitcoin::protocol::tx#add_out()","bitcoin::wallet::txdp#add_sig()","bitcoin::protocol::txin#add_signature_pubkey_script()","bitcoin::gui::helpers#add_wallet_filters()","bitcoin::storage::backends::storebase#add_watched_address()","bitcoin::storage::backends::utxostore#add_watched_address()","bitcoin::key#addr()","bitcoin::network::connectionhandler#addr()","bitcoin::util#address_checksum?()","bitcoin::util#address_type()","bitcoin::util#address_version()","bitcoin::wallet::wallet#addrs()","bitcoin::protocol::addr#alive?()","bitcoin::storage::backends::storebase#backend_name()","bitcoin::util#base58_checksum?()","bitcoin::util#base58_to_hex()","bitcoin::util#base58_to_int()","bitcoin::protocol::block::binary_from_hash()","bitcoin::protocol::tx::binary_from_hash()","bitcoin::protocol::block::binary_from_json()","bitcoin::protocol::tx::binary_from_json()","bitcoin::script::binary_from_string()","bitcoin::protocol::block#binary_hash()","bitcoin::protocol::tx#binary_hash()","bitcoin::protocol::block#bip34_block_height()","bitcoin::util#bitcoin_byte_hash()","bitcoin::util#bitcoin_elliptic_curve()","bitcoin::util#bitcoin_hash()","bitcoin::util#bitcoin_mrkl()","bitcoin::validation::block#bits()","bitcoin::builder#blk()","string#blob()","bitcoin::builder::blockbuilder#block()","bitcoin::util#block_average_hashing_time()","bitcoin::util#block_average_mining_time()","bitcoin::util#block_creation_reward()","bitcoin::util#block_difficulty()","bitcoin::util#block_hash()","bitcoin::util#block_hashes_to_win()","bitcoin::util#block_next_retarget()","bitcoin::util#block_probability()","bitcoin::protocol::block#block_work()","bitcoin::util#blockchain_total_btc()","openssl::pkey::ec::point::bn2mpi()","bitcoin::gui::gui#build()","bitcoin::builder#build_block()","bitcoin::builder#build_tx()","bitcoin::protocol::tx#calculate_minimum_fee()","bitcoin::network::commandclient#callback()","bitcoin::wallet::wallet#callback()","bitcoin::script#cast_to_bignum()","bitcoin::storage::backends::storebase#check_metadata()","bitcoin::wallet::keygenerator#check_nonce()","bitcoin::wallet::keygenerator#check_target()","bitcoin::wallet::wallet#check_tx()","bitcoin::util#checksum()","bitcoin::script#codehash_script()","bitcoin::builder::txinbuilder#coinbase()","bitcoin::validation::block#coinbase()","bitcoin::protocol::txin#coinbase?()","bitcoin::validation::block#coinbase_scriptsig()","bitcoin::validation::block#coinbase_value()","bitcoin::key#compressed()","bitcoin::storage::models::tx#confirmations()","bitcoin::connection::connect()","bitcoin::network::commandclient::connect()","bitcoin::storage::backends::sequelstore#connect()","bitcoin::storage::backends::storebase#connect()","bitcoin::storage::backends::utxostore#connect()","electrumclient::connect()","simplenode::connection::connect()","bitcoin::network::node#connect_dns()","bitcoin::network::node#connect_dns_nslookup()","bitcoin::network::node#connect_dns_resolver()","simplenode::connection::connect_known_nodes()","bitcoin::network::node#connect_known_peers()","bitcoin::wallet::wallet#connect_node()","bitcoin::network::node#connect_peer()","bitcoin::connection::connect_random_from_dns()","simplenode::connection::connect_random_from_dns()","bitcoin::gui::connview#connected()","electrumclient#connected()","electrumclient#connected?()","electrumclient#connection_completed()","bitcoin::logger::create()","bitcoin::protocol::block#decimaltarget()","mnemonic::decode()","bitcoin::util#decode_base58()","bitcoin::util#decode_compact_bits()","bitcoin::util#decode_target()","hash#deep_merge()","bitcoin::wallet::simplekeystore#delete()","bitcoin::storage::backends::sequelstore#delete_tx()","bitcoin::openssl_ec::der_to_private_key()","bitcoin::gui::helpers#dialog()","bitcoin::protocol::block#difficulty()","bitcoin::validation::block#difficulty()","bitcoin::gui::connview#disconnected()","bitcoin::gui::helpers#display_tx()","bitcoin::script::drop_signatures()","bitcoin::gui::treeview#embed()","mnemonic::encode()","bitcoin::util#encode_base58()","bitcoin::util#encode_compact_bits()","bitcoin::namecoin::storage::models::name#expires_in()","bitcoin::wallet::deterministickeystore#export()","bitcoin::wallet::simplekeystore#export()","bitcoin::network::node#external_ip()","bitcoin::builder::blockbuilder#find_hash()","bitcoin::wallet::simplekeystore#find_key()","bitcoin::wallet::keygenerator#find_nonce()","bitcoin::wallet::wallet#flag()","bitcoin::wallet::simplekeystore#flag_key()","bitcoin::storage::backends::utxostore#flush_new_outs()","bitcoin::storage::backends::utxostore#flush_spent_outs()","bitcoin::gui::helpers#format_address()","bitcoin::gui::treeview#format_address_col()","bitcoin::gui::treeview#format_bool_col()","bitcoin::gui::helpers#format_uptime()","bitcoin::network::commandhandler#format_uptime()","bitcoin::gui::treeview#format_uptime_col()","bitcoin::gui::helpers#format_value()","bitcoin::gui::treeview#format_value_col()","bitcoin::gui::helpers#format_version()","bitcoin::gui::treeview#format_version_col()","bitcoin::key::from_base58()","bitcoin::protocol::block::from_file()","bitcoin::protocol::tx::from_file()","bitcoin::protocol::auxpow::from_hash()","bitcoin::protocol::block::from_hash()","bitcoin::protocol::tx::from_hash()","bitcoin::protocol::txin::from_hash()","bitcoin::protocol::txout::from_hash()","openssl::bn::from_hex()","openssl::pkey::ec::point::from_hex()","bitcoin::protocol::txin::from_hex_hash()","bitcoin::protocol::txin::from_io()","bitcoin::protocol::txout::from_io()","bitcoin::protocol::block::from_json()","bitcoin::protocol::tx::from_json()","bitcoin::protocol::block::from_json_file()","bitcoin::protocol::tx::from_json_file()","bitcoin::script::from_string()","bitcoin::key#generate()","bitcoin::key::generate()","bitcoin::util#generate_address()","bitcoin::protocol::tx#generate_hash()","bitcoin::util#generate_key()","bitcoin::namecoin::storage::models::name#get_address()","bitcoin::script#get_address()","bitcoin::storage::models::txout#get_address()","bitcoin::namecoin::script#get_addresses()","bitcoin::script#get_addresses()","bitcoin::storage::models::txout#get_addresses()","bitcoin::storage::backends::storebase#get_balance()","bitcoin::storage::backends::utxostore#get_balance()","bitcoin::wallet::wallet#get_balance()","bitcoin::namecoin::storage::models::name#get_block()","bitcoin::storage::backends::dummystore#get_block()","bitcoin::storage::backends::sequelstore#get_block()","bitcoin::storage::backends::storebase#get_block()","bitcoin::storage::backends::utxostore#get_block()","bitcoin::storage::models::tx#get_block()","bitcoin::storage::backends::dummystore#get_block_by_depth()","bitcoin::storage::backends::sequelstore#get_block_by_depth()","bitcoin::storage::backends::storebase#get_block_by_depth()","bitcoin::storage::backends::utxostore#get_block_by_depth()","bitcoin::storage::backends::dummystore#get_block_by_id()","bitcoin::storage::backends::sequelstore#get_block_by_id()","bitcoin::storage::backends::storebase#get_block_by_id()","bitcoin::storage::backends::utxostore#get_block_by_id()","bitcoin::storage::backends::dummystore#get_block_by_prev_hash()","bitcoin::storage::backends::sequelstore#get_block_by_prev_hash()","bitcoin::storage::backends::storebase#get_block_by_prev_hash()","bitcoin::storage::backends::utxostore#get_block_by_prev_hash()","bitcoin::storage::backends::dummystore#get_block_by_tx()","bitcoin::storage::backends::sequelstore#get_block_by_tx()","bitcoin::storage::backends::storebase#get_block_by_tx()","bitcoin::storage::backends::utxostore#get_block_by_tx()","bitcoin::wallet::wallet#get_change_addr()","bitcoin::storage::backends::dummystore#get_depth()","bitcoin::storage::backends::sequelstore#get_depth()","bitcoin::storage::backends::storebase#get_depth()","bitcoin::storage::backends::utxostore#get_depth()","bitcoin::network::connectionhandler#get_genesis_block()","bitcoin::wallet::keygenerator#get_hash()","bitcoin::namecoin::script#get_hash160()","bitcoin::script#get_hash160()","bitcoin::script#get_hash160_address()","bitcoin::storage::backends::dummystore#get_head()","bitcoin::storage::backends::sequelstore#get_head()","bitcoin::storage::backends::storebase#get_head()","bitcoin::storage::backends::utxostore#get_head()","bitcoin::storage::backends::sequelstore#get_head_hash()","bitcoin::wallet::keygenerator#get_key()","bitcoin::storage::backends::storebase#get_locator()","bitcoin::script#get_multisig_addresses()","bitcoin::script#get_multisig_pubkeys()","bitcoin::namecoin::storage::backend#get_name_by_txout_id()","bitcoin::namecoin::script#get_namecoin_hash()","bitcoin::namecoin::script#get_namecoin_name()","bitcoin::storage::models::txout#get_namecoin_name()","bitcoin::namecoin::script#get_namecoin_value()","bitcoin::wallet::wallet#get_new_addr()","bitcoin::storage::models::block#get_next_block()","bitcoin::storage::models::txout#get_next_in()","bitcoin::storage::models::block#get_prev_block()","bitcoin::storage::models::txin#get_prev_out()","bitcoin::script#get_pubkey()","bitcoin::script#get_pubkey_address()","bitcoin::wallet::wallet#get_selector()","bitcoin::script#get_signatures_required()","bitcoin::namecoin::storage::models::name#get_tx()","bitcoin::storage::backends::dummystore#get_tx()","bitcoin::storage::backends::sequelstore#get_tx()","bitcoin::storage::backends::storebase#get_tx()","bitcoin::storage::backends::utxostore#get_tx()","bitcoin::storage::models::txin#get_tx()","bitcoin::storage::models::txout#get_tx()","object#get_tx()","bitcoin::storage::backends::dummystore#get_tx_by_id()","bitcoin::storage::backends::sequelstore#get_tx_by_id()","bitcoin::storage::backends::storebase#get_tx_by_id()","bitcoin::storage::backends::utxostore#get_tx_by_id()","bitcoin::storage::backends::dummystore#get_txin_for_txout()","bitcoin::storage::backends::sequelstore#get_txin_for_txout()","bitcoin::storage::backends::storebase#get_txin_for_txout()","bitcoin::namecoin::storage::models::name#get_txout()","bitcoin::storage::backends::sequelstore#get_txout_by_id()","bitcoin::storage::backends::utxostore#get_txout_by_id()","bitcoin::storage::backends::sequelstore#get_txout_for_txin()","bitcoin::storage::backends::utxostore#get_txout_for_txin()","bitcoin::wallet::wallet#get_txouts()","bitcoin::storage::backends::storebase#get_txouts_for_address()","bitcoin::storage::backends::dummystore#get_txouts_for_hash160()","bitcoin::storage::backends::sequelstore#get_txouts_for_hash160()","bitcoin::storage::backends::utxostore#get_txouts_for_hash160()","bitcoin::storage::backends::sequelstore#get_txouts_for_name_hash()","bitcoin::storage::backends::dummystore#get_txouts_for_pk_script()","bitcoin::storage::backends::sequelstore#get_txouts_for_pk_script()","bitcoin::storage::backends::storebase#get_txouts_for_pk_script()","bitcoin::storage::backends::utxostore#get_txouts_for_pk_script()","bitcoin::storage::backends::sequelstore#get_unconfirmed_tx()","bitcoin::network::node#getblocks()","bitcoin::protocol::getblocks_pkt()","bitcoin::protocol::getdata_pkt()","bitcoin::protocol::getheaders_pkt()","em::gtk_main()","bitcoin::gui::bitcoin::gui::bitcoin::network::commandclient#gui()","bitcoin::network::commandhandler#handle_addrs()","bitcoin::network::commandhandler#handle_assemble_tx()","bitcoin::network::commandhandler#handle_config()","bitcoin::network::commandhandler#handle_connect()","bitcoin::network::commandhandler#handle_connections()","bitcoin::network::commandhandler#handle_create_tx()","bitcoin::network::commandhandler#handle_disconnect()","bitcoin::network::commandhandler#handle_getaddr()","bitcoin::network::commandhandler#handle_getblocks()","bitcoin::network::commandhandler#handle_help()","bitcoin::network::commandhandler#handle_info()","bitcoin::protocol::parser#handle_mempool_request()","bitcoin::network::commandhandler#handle_monitor()","bitcoin::network::commandhandler#handle_monitor_block()","bitcoin::network::commandhandler#handle_monitor_connection()","bitcoin::network::commandhandler#handle_monitor_output()","bitcoin::network::commandhandler#handle_monitor_tx()","bitcoin::protocol::parser#handle_notfound_reply()","bitcoin::network::commandhandler#handle_relay_tx()","bitcoin::network::commandhandler#handle_rescan()","bitcoin::network::commandhandler#handle_stop()","bitcoin::network::commandhandler#handle_store_block()","bitcoin::network::commandhandler#handle_store_tx()","bitcoin::protocol::parser#handle_stream_error()","bitcoin::network::commandhandler#handle_tslb()","bitcoin::storage::backends::dummystore#has_block()","bitcoin::storage::backends::sequelstore#has_block()","bitcoin::storage::backends::storebase#has_block()","bitcoin::storage::backends::utxostore#has_block()","bitcoin::storage::backends::dummystore#has_tx()","bitcoin::storage::backends::sequelstore#has_tx()","bitcoin::storage::backends::storebase#has_tx()","bitcoin::storage::backends::utxostore#has_tx()","bitcoin::validation::block#hash()","bitcoin::validation::tx#hash()","bitcoin::key#hash160()","bitcoin::storage::models::txout#hash160()","bitcoin::util#hash160()","bitcoin::util#hash160_from_address()","bitcoin::util#hash160_to_address()","bitcoin::protocol::tx#hash_from_payload()","bitcoin::util#hash_mrkl_branch()","bitcoin::util#hash_mrkl_tree()","bitcoin::protocol::block#header_info()","bitcoin::protocol::block#header_to_json()","bitcoin::protocol::block#hextarget()","bitcoin::binaryextensions#htb()","simplenode::connection#htb()","bitcoin::binaryextensions#htb_reverse()","bitcoin::binaryextensions#hth()","simplenode::connection#hth()","bitcoin::storage::backends::storebase#import()","bitcoin::wallet::simplekeystore#import()","bitcoin::wallet::wallet#import_key()","bitcoin::storage::backends::storebase#in_sync?()","bitcoin::namecoin::script::included()","bitcoin::namecoin::storage::backend::included()","bitcoin::network::connectionhandler#incoming?()","bitcoin::network::connectionhandler#info()","bitcoin::network::node#init_epoll()","bitcoin::openssl_ec::init_ffi_ssl()","bitcoin::storage::backends::storebase#init_sequel_store()","bitcoin::script#inner_p2sh!()","bitcoin::script#inner_p2sh?()","bitcoin::builder::txbuilder#input()","bitcoin::validation::tx#input_values()","bitcoin::validation::tx#inputs()","bitcoin::util#inspect_key()","bitcoin::util#int_to_base58()","bitcoin::protocol::inv_pkt()","bitcoin::script#invalid()","bitcoin::script#invalid?()","bitcoin::script::is_canonical_pubkey?()","bitcoin::script#is_hash160?()","bitcoin::script#is_multisig?()","bitcoin::namecoin::script#is_name_firstupdate?()","bitcoin::namecoin::script#is_name_new?()","bitcoin::namecoin::script#is_name_update?()","bitcoin::namecoin::script#is_namecoin?()","bitcoin::script#is_p2sh?()","bitcoin::script#is_pay_to_script_hash?()","bitcoin::script#is_pubkey?()","bitcoin::script#is_send_to_ip?()","bitcoin::script#is_standard?()","bitcoin::wallet::deterministickeystore#key()","bitcoin::wallet::simplekeystore#key()","bitcoin::wallet::deterministickeystore#keys()","bitcoin::wallet::simplekeystore#keys()","bitcoin::wallet::wallet#label()","bitcoin::wallet::simplekeystore#label_key()","bitcoin::logger::logger#level=()","log4r::logger#level=()","bitcoin::wallet::wallet#list()","bitcoin::validation::tx#lists()","object#little_endian_hex_of_n_bytes()","bitcoin::config::load()","bitcoin::namecoin::load()","bitcoin::network::node#load_addrs()","bitcoin::config::load_file()","bitcoin::wallet::simplekeystore#load_keys()","bitcoin::storage::backends::utxostore#load_watched_addrs()","bitcoin::protocol::locator_payload()","bitcoin::builder::txbuilder#lock_time()","bitcoin::validation::tx#lock_time()","bitcoin::gui::gui#log()","bitcoin::network::commandclient#log()","bitcoin::network::commandhandler#log()","bitcoin::network::connectionhandler#log()","bitcoin::protocol::parser#log()","bitcoin::storage::log()","bitcoin::wallet::wallet#log()","simplenode::connection#log()","gtk::main_iteration_with_queue()","bitcoin::validation::tx#max_size()","bitcoin::validation::block#max_timestamp()","bitcoin::config::merge()","bitcoin::gui::helpers#message()","bitcoin::gui::helpers#method_missing()","bitcoin::logger::logwrapper#method_missing()","bitcoin::network::commandclient#method_missing()","bitcoin::protocol::version#method_missing()","bitcoin::wallet::wallet#method_missing()","bitcoin::storage::backends::storebase#migrate()","bitcoin::validation::tx#min_size()","bitcoin::validation::block#min_timestamp()","bitcoin::protocol::tx#minimum_block_fee()","bitcoin::protocol::tx#minimum_relay_fee()","bitcoin::util#mrkl_branch_root()","bitcoin::validation::block#mrkl_root()","bitcoin::namecoin::storage::backend#name_history()","bitcoin::namecoin::storage::backend#name_show()","bitcoin::network()","bitcoin::network=()","bitcoin::network_name()","bitcoin::network_project()","bitcoin::builder::blockbuilder::new()","bitcoin::builder::scriptbuilder::new()","bitcoin::builder::txbuilder::new()","bitcoin::builder::txinbuilder::new()","bitcoin::builder::txoutbuilder::new()","bitcoin::connection::new()","bitcoin::gui::addrview::new()","bitcoin::gui::connview::new()","bitcoin::gui::connection::new()","bitcoin::gui::gui::new()","bitcoin::gui::treeview::new()","bitcoin::gui::txinview::new()","bitcoin::gui::txview::new()","bitcoin::key::new()","bitcoin::logger::logwrapper::new()","bitcoin::logger::logger::new()","bitcoin::namecoin::storage::models::name::new()","bitcoin::network::commandclient::new()","bitcoin::network::commandhandler::new()","bitcoin::network::connectionhandler::new()","bitcoin::network::node::new()","bitcoin::protocol::addr::new()","bitcoin::protocol::alert::new()","bitcoin::protocol::auxpow::new()","bitcoin::protocol::block::new()","bitcoin::protocol::parser::new()","bitcoin::protocol::tx::new()","bitcoin::protocol::txin::new()","bitcoin::protocol::txout::new()","bitcoin::protocol::version::new()","bitcoin::script::new()","bitcoin::storage::backends::dummystore::new()","bitcoin::storage::backends::sequelstore::new()","bitcoin::storage::backends::storebase::new()","bitcoin::storage::backends::utxostore::new()","bitcoin::storage::models::block::new()","bitcoin::storage::models::tx::new()","bitcoin::storage::models::txin::new()","bitcoin::storage::models::txout::new()","bitcoin::validation::block::new()","bitcoin::validation::tx::new()","bitcoin::wallet::deterministickeystore::new()","bitcoin::wallet::keygenerator::new()","bitcoin::wallet::simplecoinselector::new()","bitcoin::wallet::simplekeystore::new()","bitcoin::wallet::txdp::new()","bitcoin::wallet::wallet::new()","connection::new()","electrumclient::new()","server::new()","simplenode::connection::new()","bitcoin::storage::backends::storebase#new_block()","bitcoin::wallet::deterministickeystore#new_key()","bitcoin::wallet::simplekeystore#new_key()","bitcoin::storage::backends::storebase#new_tx()","bitcoin::wallet::wallet#new_tx()","bitcoin::validation::block#next_bits_required()","electrumclient#on()","bitcoin::gui::gui#on_about()","bitcoin::connectionhandler#on_addr()","bitcoin::network::connectionhandler#on_addr()","bitcoin::protocol::handler#on_addr()","simplenode::connection#on_addr()","bitcoin::network::connectionhandler#on_alert()","bitcoin::connectionhandler#on_block()","bitcoin::network::connectionhandler#on_block()","bitcoin::protocol::handler#on_block()","rawjson_connection#on_block()","simplenode::connection#on_block()","bitcoin::gui::gui#on_check_unconfirmed_toggled()","bitcoin::gui::gui#on_copy_addr()","bitcoin::gui::gui#on_exit()","bitcoin::connectionhandler#on_get_block()","bitcoin::network::connectionhandler#on_get_block()","bitcoin::protocol::handler#on_get_block()","simplenode::connection#on_get_block()","bitcoin::connectionhandler#on_get_transaction()","bitcoin::network::connectionhandler#on_get_transaction()","bitcoin::protocol::handler#on_get_transaction()","simplenode::connection#on_get_transaction()","bitcoin::network::connectionhandler#on_getaddr()","bitcoin::network::connectionhandler#on_getblocks()","bitcoin::connectionhandler#on_handshake_begin()","bitcoin::network::connectionhandler#on_handshake_begin()","simplenode::connection#on_handshake_begin()","bitcoin::connectionhandler#on_handshake_complete()","bitcoin::network::connectionhandler#on_handshake_complete()","simplenode::connection#on_handshake_complete()","bitcoin::network::connectionhandler#on_headers()","bitcoin::connectionhandler#on_inv_block()","bitcoin::network::connectionhandler#on_inv_block()","bitcoin::protocol::handler#on_inv_block()","simplenode::connection#on_inv_block()","bitcoin::connectionhandler#on_inv_transaction()","bitcoin::network::connectionhandler#on_inv_transaction()","bitcoin::protocol::handler#on_inv_transaction()","simplenode::connection#on_inv_transaction()","bitcoin::gui::gui#on_new_addr()","bitcoin::gui::gui#on_new_tx()","bitcoin::gui::gui#on_new_wallet()","bitcoin::gui::gui#on_open_wallet()","bitcoin::gui::gui#on_paste_addr()","bitcoin::network::connectionhandler#on_ping()","bitcoin::network::connectionhandler#on_pong()","bitcoin::gui::gui#on_preferences()","connection#on_request()","bitcoin::connectionhandler#on_tx()","bitcoin::network::connectionhandler#on_tx()","bitcoin::protocol::handler#on_tx()","rawjson_connection#on_tx()","simplenode::connection#on_tx()","bitcoin::network::connectionhandler#on_verack()","bitcoin::connectionhandler#on_version()","bitcoin::network::connectionhandler#on_version()","simplenode::connection#on_version()","bitcoin::script#op_0()","bitcoin::script#op_0notequal()","bitcoin::script#op_1()","bitcoin::script#op_1add()","bitcoin::script#op_1negate()","bitcoin::script#op_1sub()","bitcoin::script#op_2div()","bitcoin::script#op_2drop()","bitcoin::script#op_2dup()","bitcoin::script#op_2mul()","bitcoin::script#op_2over()","bitcoin::script#op_2swap()","bitcoin::script#op_3dup()","bitcoin::script#op_abs()","bitcoin::script#op_add()","bitcoin::script#op_booland()","bitcoin::script#op_boolor()","bitcoin::script#op_checkhashverify()","bitcoin::script#op_checkmultisig()","bitcoin::script#op_checksig()","bitcoin::script#op_checksigverify()","bitcoin::script#op_codeseparator()","bitcoin::script#op_depth()","bitcoin::script#op_drop()","bitcoin::script#op_dup()","bitcoin::script#op_else()","bitcoin::script#op_endif()","bitcoin::script#op_equal()","bitcoin::script#op_equalverify()","bitcoin::script#op_fromaltstack()","bitcoin::script#op_greaterthan()","bitcoin::script#op_greaterthanorequal()","bitcoin::script#op_hash160()","bitcoin::script#op_hash256()","bitcoin::script#op_if()","bitcoin::script#op_ifdup()","bitcoin::script#op_lessthan()","bitcoin::script#op_lessthanorequal()","bitcoin::script#op_max()","bitcoin::script#op_min()","bitcoin::script#op_negate()","bitcoin::script#op_nip()","bitcoin::script#op_nop()","bitcoin::script#op_nop1()","bitcoin::script#op_nop10()","bitcoin::script#op_nop2()","bitcoin::script#op_nop3()","bitcoin::script#op_nop4()","bitcoin::script#op_nop5()","bitcoin::script#op_nop6()","bitcoin::script#op_nop7()","bitcoin::script#op_nop8()","bitcoin::script#op_nop9()","bitcoin::script#op_not()","bitcoin::script#op_notif()","bitcoin::script#op_numequal()","bitcoin::script#op_numequalverify()","bitcoin::script#op_numnotequal()","bitcoin::script#op_over()","bitcoin::script#op_pick()","bitcoin::script#op_return()","bitcoin::script#op_ripemd160()","bitcoin::script#op_roll()","bitcoin::script#op_rot()","bitcoin::script#op_sha1()","bitcoin::script#op_sha256()","bitcoin::script#op_size()","bitcoin::script#op_sub()","bitcoin::script#op_swap()","bitcoin::script#op_toaltstack()","bitcoin::script#op_tuck()","bitcoin::script#op_ver()","bitcoin::script#op_verify()","bitcoin::script#op_within()","bitcoin::util#open_key()","bitcoin::gui::gui#open_wallet()","bitcoin::network::connectionhandler#outgoing?()","bitcoin::builder::txbuilder#output()","bitcoin::validation::tx#output_sum()","bitcoin::validation::tx#output_values()","bitcoin::util#p2sh_version()","bitcoin::protocol::version#pack_address_field()","bitcoin::script::pack_pushdata()","bitcoin::script::pack_pushdata_align()","bitcoin::protocol::pack_var_int()","bitcoin::protocol::pack_var_string()","bitcoin::protocol::alert::parse()","bitcoin::protocol::parser#parse()","bitcoin::protocol::version#parse()","bitcoin::protocol::version::parse()","bitcoin::script#parse()","bitcoin::wallet::txdp::parse()","bitcoin::wallet::txdp#parse()","bitcoin::protocol::parser#parse_addr()","bitcoin::protocol::parser#parse_alert()","bitcoin::protocol::parser#parse_buffer()","bitcoin::protocol::auxpow#parse_data()","bitcoin::protocol::block#parse_data()","bitcoin::protocol::tx#parse_data()","bitcoin::protocol::txin#parse_data()","bitcoin::protocol::txout#parse_data()","bitcoin::protocol::auxpow#parse_data_from_io()","bitcoin::protocol::block#parse_data_from_io()","bitcoin::protocol::tx#parse_data_from_io()","bitcoin::protocol::txin#parse_data_from_io()","bitcoin::protocol::txout#parse_data_from_io()","bitcoin::protocol::parser#parse_getblocks()","bitcoin::protocol::parser#parse_headers()","bitcoin::wallet::txdp#parse_input()","bitcoin::protocol::parser#parse_inv()","bitcoin::protocol::txin#parse_payload()","bitcoin::protocol::txout#parse_payload()","bitcoin::storage::backends::sequelstore#parse_script()","bitcoin::storage::backends::storebase#parse_script()","object#parse_script()","bitcoin::script#parse_sig()","bitcoin::wallet::txdp#parse_sigs()","bitcoin::wallet::txdp#parse_txdist()","bitcoin::protocol::parser#parse_version()","bitcoin::script#pay_to_script_hash()","bitcoin::storage::backends::sequelstore#persist_addrs()","bitcoin::storage::backends::dummystore#persist_block()","bitcoin::storage::backends::sequelstore#persist_block()","bitcoin::storage::backends::storebase#persist_block()","bitcoin::storage::backends::utxostore#persist_block()","bitcoin::storage::backends::utxostore#persist_transactions()","bitcoin::protocol::ping_pkt()","bitcoin::protocol::txout#pk_script=()","bitcoin::protocol::pkt()","bitcoin::protocol::addr::pkt()","bitcoin::protocol::pong_pkt()","bitcoin::script#pop_int()","bitcoin::connection#post_init()","bitcoin::network::commandclient#post_init()","bitcoin::network::connectionhandler#post_init()","connection#post_init()","simplenode::connection#post_init()","bitcoin::builder::blockbuilder#prev_block()","bitcoin::protocol::block#prev_block_hex()","bitcoin::validation::block#prev_hash()","bitcoin::builder::txinbuilder#prev_out()","bitcoin::validation::tx#prev_out()","bitcoin::builder::txinbuilder#prev_out_index()","bitcoin::validation::tx#prev_txs()","bitcoin::protocol::txin#previous_output()","bitcoin::key#priv()","bitcoin::key#priv=()","openssl::pkey::ec#private_key_hex()","bitcoin::protocol::parser#process_pkt()","bitcoin::key#pub()","bitcoin::key#pub=()","bitcoin::key#pub_compressed()","bitcoin::key#pub_uncompressed()","bitcoin::util#pubkey_to_address()","openssl::pkey::ec#public_key_hex()","bitcoin::network::node#push_notification()","bitcoin::connectionhandler#query_blocks()","gtk::queue()","bitcoin::network::node#queue_inv()","array#random()","bitcoin::protocol::read_binary_file()","bitcoin::protocol::block#recalc_block_hash()","bitcoin::connection#receive_data()","bitcoin::network::commandclient#receive_data()","bitcoin::network::commandhandler#receive_data()","bitcoin::network::connectionhandler#receive_data()","connection#receive_data()","electrumclient#receive_data()","simplenode::connection#receive_data()","bitcoin::builder::scriptbuilder#recipient()","bitcoin::key::recover_compact_signature_to_key()","bitcoin::openssl_ec::recover_public_key_from_signature()","bitcoin::openssl_ec::regenerate_key()","bitcoin::key#regenerate_pubkey()","bitcoin::util#regenerate_public_key()","bitcoin::network::commandclient#register_monitor_callbacks()","bitcoin::storage::backends::sequelstore#reorg()","bitcoin::storage::backends::utxostore#reorg()","bitcoin::network::commandclient#request()","electrumclient#request()","bitcoin::require_dependency()","bitcoin::storage::backends::storebase#rescan()","bitcoin::storage::backends::utxostore#rescan()","bitcoin::wallet::wallet#rescan()","bitcoin::storage::backends::dummystore#reset()","bitcoin::storage::backends::sequelstore#reset()","bitcoin::storage::backends::storebase#reset()","bitcoin::storage::backends::utxostore#reset()","bitcoin::network::commandhandler#respond()","connection#respond()","bitcoin::binaryextensions#reverse_hth()","bitcoin::network::node#run()","bitcoin::script#run()","object#run()","bitcoin::wallet::simplekeystore#save_keys()","bitcoin::builder#script()","bitcoin::builder::txoutbuilder#script()","bitcoin::storage::models::txout#script()","bitcoin::protocol::txin#script=()","bitcoin::protocol::txout#script=()","bitcoin::protocol::txin#script_sig=()","bitcoin::wallet::simplecoinselector#select()","bitcoin::network::connectionhandler#send_getaddr()","bitcoin::network::connectionhandler#send_getblocks()","bitcoin::network::connectionhandler#send_getdata_block()","bitcoin::network::connectionhandler#send_getdata_tx()","bitcoin::network::connectionhandler#send_getheaders()","bitcoin::network::connectionhandler#send_inv()","bitcoin::network::connectionhandler#send_ping()","bitcoin::builder::txinbuilder#sequence()","bitcoin::wallet::txdp#serialize()","object#serialize_transaction()","simplenode::connection#set_host()","bitcoin::key#set_priv()","bitcoin::key#set_pub()","bitcoin::network::node#set_store()","bitcoin::util#sha256()","bitcoin::wallet::keygenerator#sha256()","bitcoin::key#sign()","bitcoin::util#sign_data()","bitcoin::wallet::txdp#sign_inputs()","bitcoin::protocol::tx#signature_hash_for_input()","bitcoin::builder::txinbuilder#signature_key()","bitcoin::validation::tx#signatures()","bitcoin::validation::tx#spent()","bitcoin::storage::backends::storebase#sqlite_pragmas()","bitcoin::validation::tx#standard()","bitcoin::network::node#start_timers()","bitcoin::network::node#stop()","bitcoin::network::node#stop_timers()","bitcoin::storage::backends::storebase#store_addr()","bitcoin::network::node#store_addrs()","bitcoin::storage::backends::storebase#store_block()","connection#store_block()","bitcoin::namecoin::storage::backend#store_name()","bitcoin::storage::backends::dummystore#store_tx()","bitcoin::storage::backends::sequelstore#store_tx()","bitcoin::storage::backends::storebase#store_tx()","bitcoin::storage::backends::sequelstore#store_txin()","bitcoin::storage::backends::sequelstore#store_txout()","object#str_val()","bitcoin::protocol::addr#string()","bitcoin::network::node#subscribe()","bitcoin::config::symbolize()","bitcoin::builder::blockbuilder#time()","bitcoin::logger::timelogger#time()","bitcoin::script::to_address_script()","bitcoin::key#to_base58()","bitcoin::script#to_binary()","bitcoin::protocol::auxpow#to_hash()","bitcoin::protocol::block#to_hash()","bitcoin::protocol::tx#to_hash()","bitcoin::protocol::txin#to_hash()","bitcoin::protocol::txout#to_hash()","bitcoin::script::to_hash160_script()","openssl::bn#to_hex()","openssl::pkey::ec::point#to_hex()","bitcoin::namecoin::storage::models::name#to_json()","bitcoin::protocol::block#to_json()","bitcoin::protocol::tx#to_json()","bitcoin::protocol::block#to_json_file()","bitcoin::protocol::tx#to_json_file()","openssl::bn#to_mpi()","bitcoin::script::to_multisig_script()","bitcoin::script::to_multisig_script_sig()","bitcoin::namecoin::script::to_name_firstupdate_script()","bitcoin::namecoin::script::to_name_new_script()","bitcoin::namecoin::script::to_name_update_script()","bitcoin::protocol::txout#to_null_payload()","bitcoin::script::to_p2sh_script()","bitcoin::protocol::addr#to_payload()","bitcoin::protocol::auxpow#to_payload()","bitcoin::protocol::block#to_payload()","bitcoin::protocol::tx#to_payload()","bitcoin::protocol::txin#to_payload()","bitcoin::protocol::txout#to_payload()","bitcoin::protocol::version#to_payload()","bitcoin::script#to_payload()","bitcoin::protocol::version#to_pkt()","bitcoin::script::to_pubkey_script()","bitcoin::script::to_pubkey_script_sig()","bitcoin::storage::backends::dummystore#to_s()","bitcoin::script::to_signature_pubkey_script()","bitcoin::script#to_string()","bitcoin::validation::tx#total_in()","bitcoin::validation::tx#total_out()","bitcoin::validation::block#transactions_context()","bitcoin::validation::block#transactions_syntax()","bitcoin::gui::treeview#tree_view_col()","bitcoin::builder#tx()","bitcoin::builder::blockbuilder#tx()","bitcoin::builder::txbuilder#tx()","bitcoin::storage::backends::sequelstore#tx_data()","bitcoin::validation::block#tx_list()","bitcoin::validation::block#tx_validators()","bitcoin::builder::txinbuilder#txin()","bitcoin::storage::backends::sequelstore#txin_data()","bitcoin::storage::backends::sequelstore#txout_data()","bitcoin::builder::scriptbuilder#type()","bitcoin::namecoin::script#type()","bitcoin::script#type()","bitcoin::connection#unbind()","bitcoin::network::commandclient#unbind()","bitcoin::network::commandhandler#unbind()","bitcoin::network::connectionhandler#unbind()","connection#unbind()","electrumclient#unbind()","simplenode::connection#unbind()","bitcoin::protocol::version#unpack_address_field()","bitcoin::protocol::unpack_var_int()","bitcoin::protocol::unpack_var_int_array()","bitcoin::protocol::unpack_var_int_from_io()","bitcoin::protocol::unpack_var_string()","bitcoin::protocol::unpack_var_string_array()","bitcoin::protocol::unpack_var_string_from_io()","bitcoin::gui::addrview#update()","bitcoin::gui::txinview#update()","bitcoin::gui::txview#update()","bitcoin::storage::backends::storebase#update_block()","bitcoin::gui::gui#update_wallet_views()","bitcoin::network::connectionhandler#uptime()","bitcoin::network::node#uptime()","bitcoin::protocol::version#uptime()","bitcoin::util#valid_address?()","bitcoin::protocol::alert#valid_signature?()","bitcoin::validation::block#validate()","bitcoin::validation::tx#validate()","bitcoin::protocol::block#validator()","bitcoin::protocol::tx#validator()","bitcoin::builder::txoutbuilder#value()","bitcoin::protocol::txout::value_to_address()","bitcoin::protocol::verack_pkt()","bitcoin::key#verify()","bitcoin::protocol::tx#verify_input_signature()","bitcoin::protocol::block#verify_mrkl_root()","bitcoin::util#verify_signature()","bitcoin::builder::blockbuilder#version()","bitcoin::builder::txbuilder#version()","bitcoin::protocol::version_pkt()","bitcoin::gui::helpers#wallet_preview()","array#weighted_sample()","bitcoin::network::node#work_addrs()","bitcoin::network::node#work_connect()","bitcoin::network::node#work_inv_queue()","bitcoin::network::node#work_queue()","bitcoin::network::node#work_relay()","bitcoin::storage::backends::dummystore#wrap_block()","bitcoin::storage::backends::sequelstore#wrap_block()","bitcoin::storage::backends::utxostore#wrap_block()","bitcoin::key::wrap_message_in_magic()","bitcoin::namecoin::storage::backend#wrap_name()","bitcoin::storage::backends::dummystore#wrap_tx()","bitcoin::storage::backends::sequelstore#wrap_tx()","bitcoin::storage::backends::utxostore#wrap_tx()","bitcoin::storage::backends::dummystore#wrap_txin()","bitcoin::storage::backends::sequelstore#wrap_txin()","bitcoin::storage::backends::dummystore#wrap_txout()","bitcoin::storage::backends::sequelstore#wrap_txout()","bitcoin::storage::backends::utxostore#wrap_txout()","","","","","","","","","","",""],"info":[["Array","","Array.html","",""],["Bitcoin","","Bitcoin.html","",""],["Bitcoin::BinaryExtensions","","Bitcoin/BinaryExtensions.html","",""],["Bitcoin::Builder","","Bitcoin/Builder.html","","<p>Optional DSL to help create blocks and transactions.\n<p>see also BlockBuilder, TxBuilder, TxInBuilder, TxOutBuilder …\n"],["Bitcoin::Builder::BlockBuilder","","Bitcoin/Builder/BlockBuilder.html","","<p>DSL to create a Bitcoin::Protocol::Block used by Builder#create_block.\n\n<pre>block = blk(&quot;00&quot;.ljust(32, &#39;f&#39;)) ...</pre>\n"],["Bitcoin::Builder::ScriptBuilder","","Bitcoin/Builder/ScriptBuilder.html","","<p>create a Bitcoin::Script used by TxOutBuilder#script.\n"],["Bitcoin::Builder::TxBuilder","","Bitcoin/Builder/TxBuilder.html","","<p>DSL to create Bitcoin::Protocol::Tx used by Builder#build_tx.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tx</span> = <span class=\"ruby-identifier\">tx</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">t</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">input</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">i</span><span class=\"ruby-operator\">|</span>\n    <span class=\"ruby-identifier\">i</span>.<span class=\"ruby-identifier\">prev_out</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Bitcoin::Builder::TxInBuilder","","Bitcoin/Builder/TxInBuilder.html","","<p>create a Bitcoin::Protocol::TxIn used by TxBuilder#input.\n<p>inputs need a #prev_out tx and #prev_out_index …\n"],["Bitcoin::Builder::TxOutBuilder","","Bitcoin/Builder/TxOutBuilder.html","","<p>create a Bitcoin::Protocol::TxOut used by TxBuilder#output.\n"],["Bitcoin::Config","","Bitcoin/Config.html","","<p>Load config files, merge options, etc.\n<p>Multiple config files are loaded in order, and their settings merged …\n"],["Bitcoin::Connection","","Bitcoin/Connection.html","",""],["Bitcoin::ConnectionHandler","","Bitcoin/ConnectionHandler.html","",""],["Bitcoin::Gui","","Bitcoin/Gui.html","",""],["Bitcoin::Gui::AddrView","","Bitcoin/Gui/AddrView.html","",""],["Bitcoin::Gui::Bitcoin","","Bitcoin/Gui/Bitcoin.html","",""],["Bitcoin::Gui::Bitcoin::Gui","","Bitcoin/Gui/Bitcoin/Gui.html","",""],["Bitcoin::Gui::Bitcoin::Gui::Bitcoin","","Bitcoin/Gui/Bitcoin/Gui/Bitcoin.html","",""],["Bitcoin::Gui::Bitcoin::Gui::Bitcoin::Network","","Bitcoin/Gui/Bitcoin/Gui/Bitcoin/Network.html","",""],["Bitcoin::Gui::Bitcoin::Gui::Bitcoin::Network::CommandClient","","Bitcoin/Gui/Bitcoin/Gui/Bitcoin/Network/CommandClient.html","",""],["Bitcoin::Gui::ConnView","","Bitcoin/Gui/ConnView.html","",""],["Bitcoin::Gui::Connection","","Bitcoin/Gui/Connection.html","",""],["Bitcoin::Gui::Gui","","Bitcoin/Gui/Gui.html","",""],["Bitcoin::Gui::Helpers","","Bitcoin/Gui/Helpers.html","",""],["Bitcoin::Gui::TreeView","","Bitcoin/Gui/TreeView.html","",""],["Bitcoin::Gui::TxInView","","Bitcoin/Gui/TxInView.html","",""],["Bitcoin::Gui::TxView","","Bitcoin/Gui/TxView.html","",""],["Bitcoin::Key","","Bitcoin/Key.html","","<p>Elliptic Curve key as used in bitcoin.\n"],["Bitcoin::Logger","","Bitcoin/Logger.html","","<p>this is a very simple logger that is used if log4r is not available\n"],["Bitcoin::Logger::LogWrapper","","Bitcoin/Logger/LogWrapper.html","","<p>wrap a logger and prepend a special name in front of the messages\n"],["Bitcoin::Logger::Logger","","Bitcoin/Logger/Logger.html","",""],["Bitcoin::Logger::TimeLogger","","Bitcoin/Logger/TimeLogger.html","",""],["Bitcoin::Namecoin","","Bitcoin/Namecoin.html","","<p>This module includes (almost) everything necessary to add namecoin support\nto bitcoin-ruby. When switching …\n"],["Bitcoin::Namecoin::Script","","Bitcoin/Namecoin/Script.html","","<p>Namecoin-specific Script methods for parsing and creating of namecoin\nscripts, as well as methods to …\n"],["Bitcoin::Namecoin::Storage","","Bitcoin/Namecoin/Storage.html","","<p>Namecoin-specific storage methods. The storage backend only needs to check\ntxout scripts with #is_namecoin? …\n"],["Bitcoin::Namecoin::Storage::Backend","","Bitcoin/Namecoin/Storage/Backend.html","",""],["Bitcoin::Namecoin::Storage::Models","","Bitcoin/Namecoin/Storage/Models.html","",""],["Bitcoin::Namecoin::Storage::Models::Name","","Bitcoin/Namecoin/Storage/Models/Name.html","",""],["Bitcoin::Network","","Bitcoin/Network.html","",""],["Bitcoin::Network::CommandClient","","Bitcoin/Network/CommandClient.html","","<p>Client to connect to CommandHandler and issue requests or register for\nevents\n"],["Bitcoin::Network::CommandHandler","","Bitcoin/Network/CommandHandler.html","","<p>Started by the Node, accepts connections from CommandClient and answers\nrequests or registers for events …\n"],["Bitcoin::Network::ConnectionHandler","","Bitcoin/Network/ConnectionHandler.html","","<p>Node network connection to a peer. Handles all the communication with a\nspecific peer. TODO: incoming/outgoing …\n"],["Bitcoin::Network::Node","","Bitcoin/Network/Node.html","",""],["Bitcoin::OpenSSL_EC","","Bitcoin/OpenSSL_EC.html","",""],["Bitcoin::P","","Bitcoin/P.html","",""],["Bitcoin::Protocol","","Bitcoin/Protocol.html","",""],["Bitcoin::Protocol::Addr","","Bitcoin/Protocol/Addr.html","",""],["Bitcoin::Protocol::Alert","","Bitcoin/Protocol/Alert.html","",""],["Bitcoin::Protocol::AuxPow","","Bitcoin/Protocol/AuxPow.html","","<p>Auxiliary Proof-of-Work for merge-mined blockchains\n"],["Bitcoin::Protocol::Block","","Bitcoin/Protocol/Block.html","",""],["Bitcoin::Protocol::Handler","","Bitcoin/Protocol/Handler.html","",""],["Bitcoin::Protocol::Parser","","Bitcoin/Protocol/Parser.html","",""],["Bitcoin::Protocol::Tx","","Bitcoin/Protocol/Tx.html","",""],["Bitcoin::Protocol::TxIn","","Bitcoin/Protocol/TxIn.html","",""],["Bitcoin::Protocol::TxOut","","Bitcoin/Protocol/TxOut.html","",""],["Bitcoin::Protocol::Version","","Bitcoin/Protocol/Version.html","",""],["Bitcoin::Script","","Bitcoin/Script.html","",""],["Bitcoin::Script::ScriptOpcodeError","","Bitcoin/Script/ScriptOpcodeError.html","",""],["Bitcoin::Storage","","Bitcoin/Storage.html","","<p>The storage implementation supports different backends, which inherit from\nStorage::StoreBase and implement …\n"],["Bitcoin::Storage::Backends","","Bitcoin/Storage/Backends.html","",""],["Bitcoin::Storage::Backends::DummyStore","","Bitcoin/Storage/Backends/DummyStore.html","",""],["Bitcoin::Storage::Backends::SequelStore","","Bitcoin/Storage/Backends/SequelStore.html","","<p>Storage backend using Sequel to connect to arbitrary SQL databases.\nInherits from StoreBase and implements …\n"],["Bitcoin::Storage::Backends::StoreBase","","Bitcoin/Storage/Backends/StoreBase.html","","<p>Base class for storage backends. Every backend must overwrite the “Not\nimplemented” methods …\n"],["Bitcoin::Storage::Backends::UtxoStore","","Bitcoin/Storage/Backends/UtxoStore.html","","<p>Storage backend using Sequel to connect to arbitrary SQL databases.\nInherits from StoreBase and implements …\n"],["Bitcoin::Storage::Models","","Bitcoin/Storage/Models.html","","<p>StorageModels defines objects that are returned from storage. These objects\ninherit from their Bitcoin::Protocol …\n"],["Bitcoin::Storage::Models::Block","","Bitcoin/Storage/Models/Block.html","","<p>Block retrieved from storage. (see Bitcoin::Protocol::Block)\n"],["Bitcoin::Storage::Models::Tx","","Bitcoin/Storage/Models/Tx.html","","<p>Transaction retrieved from storage. (see Bitcoin::Protocol::Tx)\n"],["Bitcoin::Storage::Models::TxIn","","Bitcoin/Storage/Models/TxIn.html","","<p>Transaction input retrieved from storage. (see Bitcoin::Protocol::TxIn\n"],["Bitcoin::Storage::Models::TxOut","","Bitcoin/Storage/Models/TxOut.html","","<p>Transaction output retrieved from storage. (see Bitcoin::Protocol::TxOut)\n"],["Bitcoin::Util","","Bitcoin/Util.html","",""],["Bitcoin::Validation","","Bitcoin/Validation.html","",""],["Bitcoin::Validation::Block","","Bitcoin/Validation/Block.html","",""],["Bitcoin::Validation::Tx","","Bitcoin/Validation/Tx.html","",""],["Bitcoin::Validation::ValidationError","","Bitcoin/Validation/ValidationError.html","",""],["Bitcoin::Wallet","","Bitcoin/Wallet.html","","<p>The wallet implementation consists of several concepts:\n<p>Wallet &mdash; the high-level API used to manage a wallet …\n"],["Bitcoin::Wallet::DeterministicKeyStore","","Bitcoin/Wallet/DeterministicKeyStore.html","","<p>Deterministic keystore.\n"],["Bitcoin::Wallet::KeyGenerator","","Bitcoin/Wallet/KeyGenerator.html","","<p>Deterministic key generator as described in\nbitcointalk.org/index.php?topic=11665.0.\n<p>Takes a seed and …\n"],["Bitcoin::Wallet::SimpleCoinSelector","","Bitcoin/Wallet/SimpleCoinSelector.html","","<p>select unspent txouts to be used by the Wallet when creating a new\ntransaction\n"],["Bitcoin::Wallet::SimpleKeyStore","","Bitcoin/Wallet/SimpleKeyStore.html","","<p>JSON-file-based keystore used by the Wallet.\n"],["Bitcoin::Wallet::TxDP","","Bitcoin/Wallet/TxDP.html","",""],["Bitcoin::Wallet::Wallet","","Bitcoin/Wallet/Wallet.html","","<p>A wallet manages a set of keys (through a <code>keystore</code>), can list\ntransactions/balances for those keys (using …\n"],["Connection","","Connection.html","",""],["Digest","","Digest.html","",""],["EM","","EM.html","",""],["ElectrumClient","","ElectrumClient.html","",""],["Gtk","","Gtk.html","",""],["Hash","","Hash.html","",""],["JSON","","JSON.html","",""],["Log4r","","Log4r.html","",""],["Log4r::Logger","","Log4r/Logger.html","","<p>monkey-patch Log4r to accept level names as symbols\n"],["Mnemonic","","Mnemonic.html","",""],["Object","","Object.html","",""],["OpenSSL","","OpenSSL.html","",""],["OpenSSL::BN","","OpenSSL/BN.html","",""],["OpenSSL::PKey","","OpenSSL/PKey.html","",""],["OpenSSL::PKey::EC","","OpenSSL/PKey/EC.html","",""],["OpenSSL::PKey::EC::Point","","OpenSSL/PKey/EC/Point.html","",""],["RawJSON_Connection","","RawJSON_Connection.html","",""],["Server","","Server.html","",""],["SimpleNode","","SimpleNode.html","",""],["SimpleNode::Connection","","SimpleNode/Connection.html","",""],["String","","String.html","","<p>TODO: someday sequel will support #blob directly and #to_sequel_blob will\nbe gone\n"],["==","Bitcoin::Key","Bitcoin/Key.html#method-i-3D-3D","(other)",""],["==","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-3D-3D","(other)","<p>compare to another block\n"],["==","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-3D-3D","(other)","<p>compare to another tx\n"],["==","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-3D-3D","(other)","<p>compare to another txout\n"],["==","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-3D-3D","(other)",""],["add_in","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-add_in","(input)","<p>add an input\n"],["add_key","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-add_key","(key)","<p>Add a key which can consist only of <code>addr</code> and\n<code>label</code>.\n"],["add_key","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-add_key","(key)","<p>add <code>key</code> to wallet\n"],["add_out","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-add_out","(output)","<p>add an output\n"],["add_sig","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-i-add_sig","(in_idx, value, addr, sig)",""],["add_signature_pubkey_script","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-add_signature_pubkey_script","(sig, pubkey_hex)",""],["add_wallet_filters","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-add_wallet_filters","(dialog)",""],["add_watched_address","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-add_watched_address","(address)",""],["add_watched_address","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-add_watched_address","(address)",""],["addr","Bitcoin::Key","Bitcoin/Key.html#method-i-addr","()","<p>Get the address corresponding to the public key.\n"],["addr","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-addr","()","<p>get Addr object for this connection\n"],["address_checksum?","Bitcoin::Util","Bitcoin/Util.html#method-i-address_checksum-3F","(base58)",""],["address_type","Bitcoin::Util","Bitcoin/Util.html#method-i-address_type","(address)","<p>get type of given <code>address</code>.\n"],["address_version","Bitcoin::Util","Bitcoin/Util.html#method-i-address_version","()",""],["addrs","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-addrs","()","<p>list all addresses in this wallet\n"],["alive?","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-i-alive-3F","()","<p>is this address alive?\n"],["backend_name","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-backend_name","()","<p>name of the storage backend currently in use (“sequel” or “utxo”)\n"],["base58_checksum?","Bitcoin::Util","Bitcoin/Util.html#method-i-base58_checksum-3F","(base58)","<p>verify base58 checksum for given <code>base58</code> data.\n"],["base58_to_hex","Bitcoin::Util","Bitcoin/Util.html#method-i-base58_to_hex","(base58_val)",""],["base58_to_int","Bitcoin::Util","Bitcoin/Util.html#method-i-base58_to_int","(base58_val)",""],["binary_from_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-binary_from_hash","(h)","<p>convert ruby hash to raw binary\n"],["binary_from_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-binary_from_hash","(h)","<p>convert ruby hash to raw binary\n"],["binary_from_json","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-binary_from_json","(json_string)","<p>convert json representation to raw binary\n"],["binary_from_json","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-binary_from_json","(json_string)","<p>convert json representation to raw binary\n"],["binary_from_string","Bitcoin::Script","Bitcoin/Script.html#method-c-binary_from_string","(script_string)","<p>raw script binary of a string representation\n"],["binary_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-binary_hash","()",""],["binary_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-binary_hash","()","<p>return the tx hash in binary format\n"],["bip34_block_height","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-bip34_block_height","()","<p>introduced in block version 2 by BIP_0034 blockchain height as seen by the\nblock itself. do not trust …\n"],["bitcoin_byte_hash","Bitcoin::Util","Bitcoin/Util.html#method-i-bitcoin_byte_hash","(bytes)",""],["bitcoin_elliptic_curve","Bitcoin::Util","Bitcoin/Util.html#method-i-bitcoin_elliptic_curve","()",""],["bitcoin_hash","Bitcoin::Util","Bitcoin/Util.html#method-i-bitcoin_hash","(hex)",""],["bitcoin_mrkl","Bitcoin::Util","Bitcoin/Util.html#method-i-bitcoin_mrkl","(a, b)",""],["bits","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-bits","()","<p>check that block hash matches claimed bits\n"],["blk","Bitcoin::Builder","Bitcoin/Builder.html#method-i-blk","(target = \"00\".ljust(64, 'f'))",""],["blob","String","String.html#method-i-blob","()",""],["block","Bitcoin::Builder::BlockBuilder","Bitcoin/Builder/BlockBuilder.html#method-i-block","(target)","<p>create the block according to values specified via DSL.\n"],["block_average_hashing_time","Bitcoin::Util","Bitcoin/Util.html#method-i-block_average_hashing_time","(target_nbits, hashes_per_second)","<p>average time to find a block in seconds with the current target. (nbits)\n"],["block_average_mining_time","Bitcoin::Util","Bitcoin/Util.html#method-i-block_average_mining_time","(block_nbits, block_height, mega_hashes_per_second, target_btc=1.0)","<p>average mining time (in days) using Mh/s to get btc\n"],["block_creation_reward","Bitcoin::Util","Bitcoin/Util.html#method-i-block_creation_reward","(block_height)",""],["block_difficulty","Bitcoin::Util","Bitcoin/Util.html#method-i-block_difficulty","(target_nbits)","<p>current difficulty as a multiple of the minimum difficulty (highest\ntarget).\n"],["block_hash","Bitcoin::Util","Bitcoin/Util.html#method-i-block_hash","(prev_block, mrkl_root, time, bits, nonce, ver)",""],["block_hashes_to_win","Bitcoin::Util","Bitcoin/Util.html#method-i-block_hashes_to_win","(target_nbits)","<p>average number of hashes required to win a block with the current target.\n(nbits)\n"],["block_next_retarget","Bitcoin::Util","Bitcoin/Util.html#method-i-block_next_retarget","(block_height)","<p>block count when the next retarget will take place.\n"],["block_probability","Bitcoin::Util","Bitcoin/Util.html#method-i-block_probability","(target_nbits)","<p>probability of a single hash solving a block with the current difficulty.\n"],["block_work","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-block_work","()","<p>get the (statistical) amount of work that was needed to generate this\nblock.\n"],["blockchain_total_btc","Bitcoin::Util","Bitcoin/Util.html#method-i-blockchain_total_btc","(height)","<p>shows the total number of Bitcoins in circulation, reward era and reward in\nthat era.\n"],["bn2mpi","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-c-bn2mpi","(hex)",""],["build","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-build","()",""],["build_block","Bitcoin::Builder","Bitcoin/Builder.html#method-i-build_block","(target = \"00\".ljust(64, 'f'))","<p>build a Bitcoin::Protocol::Block matching the given <code>target</code>.\nsee BlockBuilder for details.\n"],["build_tx","Bitcoin::Builder","Bitcoin/Builder.html#method-i-build_tx","()","<p>build a Bitcoin::Protocol::Tx. see TxBuilder for details.\n"],["calculate_minimum_fee","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-calculate_minimum_fee","(block_size=1, allow_free=true, mode=:block)",""],["callback","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-i-callback","(name, *args)","<p>call the callback specified by <code>name</code> passing in\n<code>args</code>\n"],["callback","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-callback","(name, *args)","<p>call the callback specified by <code>name</code> passing in\n<code>args</code>\n"],["cast_to_bignum","Bitcoin::Script","Bitcoin/Script.html#method-i-cast_to_bignum","(buf)",""],["check_metadata","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-check_metadata","()","<p>check that database network magic and backend match the ones we are using\n"],["check_nonce","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-check_nonce","(nonce)","<p>check the nonce; compute if missing, raise if invalid.\n"],["check_target","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-check_target","(hash)","<p>check if given <code>hash</code> satisfies the difficulty target\n"],["check_tx","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-check_tx","(tx_hash)",""],["checksum","Bitcoin::Util","Bitcoin/Util.html#method-i-checksum","(hex)","<p>checksum is a 4 bytes sha256-sha256 hexdigest.\n"],["codehash_script","Bitcoin::Script","Bitcoin/Script.html#method-i-codehash_script","(opcode)",""],["coinbase","Bitcoin::Builder::TxInBuilder","Bitcoin/Builder/TxInBuilder.html#method-i-coinbase","(data = nil)","<p>specify that this is a coinbase input. optionally set <code>data</code>.\n"],["coinbase","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-coinbase","()","<p>check that coinbase is present\n"],["coinbase?","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-coinbase-3F","()","<p>check if input is coinbase\n"],["coinbase_scriptsig","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-coinbase_scriptsig","()","<p>check that coinbase scriptsig is valid\n"],["coinbase_value","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-coinbase_value","()","<p>check that coinbase value is valid; no more than reward + fees\n"],["compressed","Bitcoin::Key","Bitcoin/Key.html#method-i-compressed","()",""],["confirmations","Bitcoin::Storage::Models::Tx","Bitcoin/Storage/Models/Tx.html#method-i-confirmations","()","<p>get the number of blocks that confirm this tx in the main chain\n"],["connect","Bitcoin::Connection","Bitcoin/Connection.html#method-c-connect","(host, port, connections)",""],["connect","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-c-connect","(host, port, *args, &block)",""],["connect","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-connect","()","<p>connect to database\n"],["connect","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-connect","()","<p>connect to database\n"],["connect","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-connect","()","<p>connect to database\n"],["connect","ElectrumClient","ElectrumClient.html#method-c-connect","()",""],["connect","SimpleNode::Connection","SimpleNode/Connection.html#method-c-connect","(host, port, *args)",""],["connect_dns","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_dns","()","<p>query addrs from dns seed and connect\n"],["connect_dns_nslookup","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_dns_nslookup","(seed)","<p>get peers from dns via nslookup\n"],["connect_dns_resolver","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_dns_resolver","(seed)","<p>get peer addrs from given dns <code>seed</code> using em/dns_resolver.\nfallback to using `nslookup` if it is not installed …\n"],["connect_known_nodes","SimpleNode::Connection","SimpleNode/Connection.html#method-c-connect_known_nodes","(count=1)",""],["connect_known_peers","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_known_peers","()",""],["connect_node","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-connect_node","()",""],["connect_peer","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_peer","(host, port)","<p>connect to peer at given <code>host</code> / <code>port</code>\n"],["connect_random_from_dns","Bitcoin::Connection","Bitcoin/Connection.html#method-c-connect_random_from_dns","(connections)",""],["connect_random_from_dns","SimpleNode::Connection","SimpleNode/Connection.html#method-c-connect_random_from_dns","(seeds=[], count=1, *args)",""],["connected","Bitcoin::Gui::ConnView","Bitcoin/Gui/ConnView.html#method-i-connected","(data)",""],["connected","ElectrumClient","ElectrumClient.html#method-i-connected","(&block)",""],["connected?","ElectrumClient","ElectrumClient.html#method-i-connected-3F","()",""],["connection_completed","ElectrumClient","ElectrumClient.html#method-i-connection_completed","()",""],["create","Bitcoin::Logger","Bitcoin/Logger.html#method-c-create","(name, level = :info)","<p>create a logger with given <code>name</code>. if log4r is installed, the\nlogger will have a stdout and a fileout outputter …\n"],["decimaltarget","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-decimaltarget","()",""],["decode","Mnemonic","Mnemonic.html#method-c-decode","(word_list, words=Words)",""],["decode_base58","Bitcoin::Util","Bitcoin/Util.html#method-i-decode_base58","(base58_val)",""],["decode_compact_bits","Bitcoin::Util","Bitcoin/Util.html#method-i-decode_compact_bits","(bits)","<p>target compact bits (int) to bignum hex\n"],["decode_target","Bitcoin::Util","Bitcoin/Util.html#method-i-decode_target","(target_bits)",""],["deep_merge","Hash","Hash.html#method-i-deep_merge","(hash)",""],["delete","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-delete","(name)","<p>Delete key for given <code>label</code>, <code>addr</code> or\n<code>pubkey</code>.\n"],["delete_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-delete_tx","(hash)","<p>delete transaction TODO: also delete blk_tx mapping\n"],["der_to_private_key","Bitcoin::OpenSSL_EC","Bitcoin/OpenSSL_EC.html#method-c-der_to_private_key","(der_hex)","<p>extract private key from uncompressed DER format\n"],["dialog","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-dialog","(name, opts = {})",""],["difficulty","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-difficulty","()",""],["difficulty","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-difficulty","()","<p>check that bits satisfy required difficulty\n"],["disconnected","Bitcoin::Gui::ConnView","Bitcoin/Gui/ConnView.html#method-i-disconnected","(data)",""],["display_tx","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-display_tx","(tx_hash)",""],["drop_signatures","Bitcoin::Script","Bitcoin/Script.html#method-c-drop_signatures","(script_pubkey, drop_signatures)",""],["embed","Bitcoin::Gui::TreeView","Bitcoin/Gui/TreeView.html#method-i-embed","(name)",""],["encode","Mnemonic","Mnemonic.html#method-c-encode","(hex, words=Words)",""],["encode_base58","Bitcoin::Util","Bitcoin/Util.html#method-i-encode_base58","(hex)",""],["encode_compact_bits","Bitcoin::Util","Bitcoin/Util.html#method-i-encode_compact_bits","(target)","<p>target bignum hex to compact bits (int)\n"],["expires_in","Bitcoin::Namecoin::Storage::Models::Name","Bitcoin/Namecoin/Storage/Models/Name.html#method-i-expires_in","()",""],["export","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-i-export","(addr)","<p>Export key for given <code>addr</code> to base58. (See\nBitcoin::Key.to_base58)\n"],["export","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-export","(name)","<p>Export key for given <code>name</code> to base58 format. (See\nBitcoin::Key#to_base58)\n"],["external_ip","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-external_ip","()","<p>get the external ip that was suggested in version messages from other peers\nmost often.\n"],["find_hash","Bitcoin::Builder::BlockBuilder","Bitcoin/Builder/BlockBuilder.html#method-i-find_hash","(target)","<p>increment nonce/time to find a block hash matching the <code>target</code>.\n"],["find_key","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-find_key","(name, hidden = false)",""],["find_nonce","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-find_nonce","()","<p>find a nonce that leads to the privkey satisfying the target\n"],["flag","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-flag","(name, flag, value)","<p>set <code>flag</code> for key <code>name</code> to <code>value</code>\n"],["flag_key","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-flag_key","(name, flag, value)",""],["flush_new_outs","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-flush_new_outs","(depth)",""],["flush_spent_outs","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-flush_spent_outs","(depth)",""],["format_address","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-format_address","(address, label = nil)",""],["format_address_col","Bitcoin::Gui::TreeView","Bitcoin/Gui/TreeView.html#method-i-format_address_col","(model, i, renderer, iter)",""],["format_bool_col","Bitcoin::Gui::TreeView","Bitcoin/Gui/TreeView.html#method-i-format_bool_col","(model, i, renderer, iter)",""],["format_uptime","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-format_uptime","(started)",""],["format_uptime","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-format_uptime","(t)","<p>format node uptime\n"],["format_uptime_col","Bitcoin::Gui::TreeView","Bitcoin/Gui/TreeView.html#method-i-format_uptime_col","(model, i, renderer, iter)",""],["format_value","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-format_value","(val)",""],["format_value_col","Bitcoin::Gui::TreeView","Bitcoin/Gui/TreeView.html#method-i-format_value_col","(model, i, renderer, iter)",""],["format_version","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-format_version","(ver)",""],["format_version_col","Bitcoin::Gui::TreeView","Bitcoin/Gui/TreeView.html#method-i-format_version_col","(model, i, renderer, iter)",""],["from_base58","Bitcoin::Key","Bitcoin/Key.html#method-c-from_base58","(str)","<p>Import private key from base58 fromat as described in\nen.bitcoin.it/wiki/Private_key#Base_58_Wallet_Import_format …\n"],["from_file","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-from_file","(path)","<p>read binary block from a file\n"],["from_file","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-from_file","(path)","<p>read binary block from a file\n"],["from_hash","Bitcoin::Protocol::AuxPow","Bitcoin/Protocol/AuxPow.html#method-c-from_hash","(h)",""],["from_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-from_hash","(h)","<p>parse ruby hash (see also #to_hash)\n"],["from_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-from_hash","(h)","<p>parse ruby hash (see also #to_hash)\n"],["from_hash","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-c-from_hash","(input)",""],["from_hash","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-c-from_hash","(output)",""],["from_hex","OpenSSL::BN","OpenSSL/BN.html#method-c-from_hex","(hex)",""],["from_hex","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-c-from_hex","(group, hex)",""],["from_hex_hash","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-c-from_hex_hash","(hash, index)",""],["from_io","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-c-from_io","(buf)",""],["from_io","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-c-from_io","(buf)",""],["from_json","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-from_json","(json_string)","<p>parse json representation (see also #to_json)\n"],["from_json","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-from_json","(json_string)","<p>parse json representation\n"],["from_json_file","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-from_json_file","(path)","<p>read json block from a file\n"],["from_json_file","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-from_json_file","(path)","<p>read json block from a file\n"],["from_string","Bitcoin::Script","Bitcoin/Script.html#method-c-from_string","(script_string)","<p>script object of a string representation\n"],["generate","Bitcoin::Key","Bitcoin/Key.html#method-i-generate","()","<p>Generate new priv/pub key.\n"],["generate","Bitcoin::Key","Bitcoin/Key.html#method-c-generate","()","<p>Generate a new keypair.\n\n<pre>Bitcoin::Key.generate</pre>\n"],["generate_address","Bitcoin::Util","Bitcoin/Util.html#method-i-generate_address","()",""],["generate_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-generate_hash","(payload)",""],["generate_key","Bitcoin::Util","Bitcoin/Util.html#method-i-generate_key","()",""],["get_address","Bitcoin::Namecoin::Storage::Models::Name","Bitcoin/Namecoin/Storage/Models/Name.html#method-i-get_address","()",""],["get_address","Bitcoin::Script","Bitcoin/Script.html#method-i-get_address","()","<p>get single address, or first for multisig script\n"],["get_address","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-get_address","()","<p>get all addresses this txout corresponds to (if possible)\n"],["get_addresses","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-get_addresses","()","<p>get all addresses this script corresponds to (if possible)\n"],["get_addresses","Bitcoin::Script","Bitcoin/Script.html#method-i-get_addresses","()","<p>get all addresses this script corresponds to (if possible)\n"],["get_addresses","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-get_addresses","()","<p>get the single address this txout corresponds to (first for multisig tx)\n"],["get_balance","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_balance","(hash160, unconfirmed = false)","<p>get balance for given <code>hash160</code>\n"],["get_balance","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_balance","(hash160)",""],["get_balance","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_balance","(unconfirmed = false)","<p>get total balance for all addresses in this wallet\n"],["get_block","Bitcoin::Namecoin::Storage::Models::Name","Bitcoin/Namecoin/Storage/Models/Name.html#method-i-get_block","()",""],["get_block","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block","(blk_hash)",""],["get_block","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block","(blk_hash)","<p>get block for given <code>blk_hash</code>\n"],["get_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block","(blk_hash)","<p>get block with given <code>blk_hash</code>\n"],["get_block","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_block","(blk_hash)","<p>get block for given <code>blk_hash</code>\n"],["get_block","Bitcoin::Storage::Models::Tx","Bitcoin/Storage/Models/Tx.html#method-i-get_block","()","<p>get the block this transaction is in\n"],["get_block_by_depth","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block_by_depth","(depth)",""],["get_block_by_depth","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block_by_depth","(depth)","<p>get block by given <code>depth</code>\n"],["get_block_by_depth","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block_by_depth","(depth)","<p>get block with given <code>depth</code> from main chain\n"],["get_block_by_depth","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_block_by_depth","(depth)","<p>get block by given <code>depth</code>\n"],["get_block_by_id","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block_by_id","(blk_id)",""],["get_block_by_id","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block_by_id","(block_id)","<p>get block by given <code>id</code>\n"],["get_block_by_id","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block_by_id","(block_id)","<p>get block by given <code>block_id</code>\n"],["get_block_by_id","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_block_by_id","(block_id)","<p>get block by given <code>id</code>\n"],["get_block_by_prev_hash","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block_by_prev_hash","(hash)",""],["get_block_by_prev_hash","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block_by_prev_hash","(prev_hash)","<p>get block by given <code>prev_hash</code>\n"],["get_block_by_prev_hash","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block_by_prev_hash","(prev_hash)","<p>get block with given <code>prev_hash</code>\n"],["get_block_by_prev_hash","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_block_by_prev_hash","(prev_hash)","<p>get block by given <code>prev_hash</code>\n"],["get_block_by_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block_by_tx","(tx_hash)",""],["get_block_by_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block_by_tx","(tx_hash)","<p>get block by given <code>tx_hash</code>\n"],["get_block_by_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block_by_tx","(tx_hash)","<p>get block that includes tx with given <code>tx_hash</code>\n"],["get_block_by_tx","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_block_by_tx","(tx_hash)","<p>get block by given <code>tx_hash</code>\n"],["get_change_addr","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_change_addr","(policy, in_addr)","<p>get address to send change output to. <code>policy</code> controls which\naddress is chosen:\n<p>first &mdash; send to the first …\n"],["get_depth","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_depth","()",""],["get_depth","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_depth","()","<p>get depth of MAIN chain\n"],["get_depth","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_depth","()","<p>return depth of the head block\n"],["get_depth","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_depth","()","<p>get depth of MAIN chain\n"],["get_genesis_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-get_genesis_block","()","<p>ask for the genesis block\n"],["get_hash","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-get_hash","(seed, n)","<p>get the hash corresponding to <code>seed</code> and <code>n</code>.\n"],["get_hash160","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-get_hash160","()","<p>get the hash160 for this hash160, namecoin or pubkey script\n"],["get_hash160","Bitcoin::Script","Bitcoin/Script.html#method-i-get_hash160","()","<p>get the hash160 for this hash160 or pubkey script\n"],["get_hash160_address","Bitcoin::Script","Bitcoin/Script.html#method-i-get_hash160_address","()","<p>get the hash160 address for this hash160 script\n"],["get_head","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_head","()",""],["get_head","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_head","()","<p>get head block (highest block from the MAIN chain)\n"],["get_head","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_head","()","<p>get the hash of the leading block\n"],["get_head","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_head","()","<p>get head block (highest block from the MAIN chain)\n"],["get_head_hash","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_head_hash","()",""],["get_key","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-get_key","(n = 0)","<p>get key number <code>n</code> from chain\n"],["get_locator","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_locator","(pointer = get_head)","<p>compute blockchain locator\n"],["get_multisig_addresses","Bitcoin::Script","Bitcoin/Script.html#method-i-get_multisig_addresses","()","<p>get the pubkey addresses for this multisig script\n"],["get_multisig_pubkeys","Bitcoin::Script","Bitcoin/Script.html#method-i-get_multisig_pubkeys","()","<p>get the public keys for this multisig script\n"],["get_name_by_txout_id","Bitcoin::Namecoin::Storage::Backend","Bitcoin/Namecoin/Storage/Backend.html#method-i-get_name_by_txout_id","(txout_id)",""],["get_namecoin_hash","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-get_namecoin_hash","()","<p>get the name_hash of a namecoin name_new script\n"],["get_namecoin_name","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-get_namecoin_name","()","<p>get the name of a namecoin name_firstupdate or name_update script\n"],["get_namecoin_name","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-get_namecoin_name","()",""],["get_namecoin_value","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-get_namecoin_value","()","<p>get the value of a namecoin name_firstupdate or name_update script\n"],["get_new_addr","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_new_addr","()","<p>create new key and return its address\n"],["get_next_block","Bitcoin::Storage::Models::Block","Bitcoin/Storage/Models/Block.html#method-i-get_next_block","()","<p>get the block that builds upon this one\n"],["get_next_in","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-get_next_in","()","<p>get the next input that references this output\n"],["get_prev_block","Bitcoin::Storage::Models::Block","Bitcoin/Storage/Models/Block.html#method-i-get_prev_block","()","<p>get the block this one builds upon\n"],["get_prev_out","Bitcoin::Storage::Models::TxIn","Bitcoin/Storage/Models/TxIn.html#method-i-get_prev_out","()","<p>get the previous output referenced by this input\n"],["get_pubkey","Bitcoin::Script","Bitcoin/Script.html#method-i-get_pubkey","()","<p>get the public key for this pubkey script\n"],["get_pubkey_address","Bitcoin::Script","Bitcoin/Script.html#method-i-get_pubkey_address","()","<p>get the pubkey address for this pubkey script\n"],["get_selector","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_selector","()","<p>get SimpleCoinSelector with txouts for this wallet\n"],["get_signatures_required","Bitcoin::Script","Bitcoin/Script.html#method-i-get_signatures_required","()",""],["get_tx","Bitcoin::Namecoin::Storage::Models::Name","Bitcoin/Namecoin/Storage/Models/Name.html#method-i-get_tx","()",""],["get_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_tx","(tx_hash)",""],["get_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_tx","(tx_hash)","<p>get transaction for given <code>tx_hash</code>\n"],["get_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_tx","(tx_hash)","<p>get tx with given <code>tx_hash</code>\n"],["get_tx","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_tx","(tx_hash)","<p>get transaction for given <code>tx_hash</code>\n"],["get_tx","Bitcoin::Storage::Models::TxIn","Bitcoin/Storage/Models/TxIn.html#method-i-get_tx","()","<p>get the transaction this input is in\n"],["get_tx","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-get_tx","()","<p>get the transaction this output is in\n"],["get_tx","Object","Object.html#method-i-get_tx","(hash)","<p>fetch transaction from bbe as json and deserialize into\nBitcoin::Protocol::Tx object\n"],["get_tx_by_id","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_tx_by_id","(tx_id)",""],["get_tx_by_id","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_tx_by_id","(tx_id)","<p>get transaction by given <code>tx_id</code>\n"],["get_tx_by_id","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_tx_by_id","(tx_id)","<p>get tx with given <code>tx_id</code>\n"],["get_tx_by_id","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_tx_by_id","(tx_id)","<p>get transaction by given <code>tx_id</code>\n"],["get_txin_for_txout","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_txin_for_txout","(tx_hash, txout_idx)",""],["get_txin_for_txout","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txin_for_txout","(tx_hash, txout_idx)","<p>get corresponding Models::TxIn for the txout in transaction\n<code>tx_hash</code> with index <code>txout_idx</code>\n"],["get_txin_for_txout","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_txin_for_txout","(tx_hash, txout_idx)","<p>get corresponding txin for the txout in transaction <code>tx_hash</code>\nwith index <code>txout_idx</code>\n"],["get_txout","Bitcoin::Namecoin::Storage::Models::Name","Bitcoin/Namecoin/Storage/Models/Name.html#method-i-get_txout","()",""],["get_txout_by_id","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txout_by_id","(txout_id)",""],["get_txout_by_id","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_txout_by_id","(id)",""],["get_txout_for_txin","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txout_for_txin","(txin)","<p>get corresponding Models::TxOut for <code>txin</code>\n"],["get_txout_for_txin","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_txout_for_txin","(txin)","<p>get corresponding Models::TxOut for <code>txin</code>\n"],["get_txouts","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_txouts","(unconfirmed = false)","<p>get all Storage::Models::TxOut concerning any address from this wallet\n"],["get_txouts_for_address","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_txouts_for_address","(address, unconfirmed = false)","<p>collect all txouts containing a standard tx to given <code>address</code>\n"],["get_txouts_for_hash160","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_txouts_for_hash160","(hash160, unconfirmed = false)",""],["get_txouts_for_hash160","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txouts_for_hash160","(hash160, unconfirmed = false)","<p>get all Models::TxOut matching given <code>hash160</code>\n"],["get_txouts_for_hash160","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_txouts_for_hash160","(hash160, unconfirmed = false)","<p>get all Models::TxOut matching given <code>hash160</code>\n"],["get_txouts_for_name_hash","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txouts_for_name_hash","(hash)",""],["get_txouts_for_pk_script","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_txouts_for_pk_script","(script)",""],["get_txouts_for_pk_script","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txouts_for_pk_script","(script)","<p>get all Models::TxOut matching given <code>script</code>\n"],["get_txouts_for_pk_script","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_txouts_for_pk_script","(script)","<p>collect all txouts containing the given <code>script</code>\n"],["get_txouts_for_pk_script","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-get_txouts_for_pk_script","(script)","<p>get all Models::TxOut matching given <code>script</code>\n"],["get_unconfirmed_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_unconfirmed_tx","()","<p>get all unconfirmed Models::TxOut\n"],["getblocks","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-getblocks","(locator = store.get_locator)","<p>query blocks from random peer\n"],["getblocks_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-getblocks_pkt","(version, locator_hashes, stop_hash=DEFAULT_STOP_HASH)",""],["getdata_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-getdata_pkt","(type, hashes)",""],["getheaders_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-getheaders_pkt","(version, locator_hashes, stop_hash=DEFAULT_STOP_HASH)",""],["gtk_main","EM","EM.html#method-c-gtk_main","()",""],["gui","Bitcoin::Gui::Bitcoin::Gui::Bitcoin::Network::CommandClient","Bitcoin/Gui/Bitcoin/Gui/Bitcoin/Network/CommandClient.html#method-i-gui","(&block)",""],["handle_addrs","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_addrs","(count = 32)","<p>Get known peer addresses (used by bin/bitcoin_dns_seed).\n\n<pre>bitcoin_node addrs [count]</pre>\n"],["handle_assemble_tx","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_assemble_tx","(tx_hex, sig_pubs)","<p>Assemble an unsigned transaction from the <code>tx_hex</code> and\n<code>sig_pubkeys</code>. The <code>tx_hex</code> is the regular\ntransaction …\n"],["handle_config","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_config","()","<p>Get the currently active configuration.\n\n<pre>bitcoin_node config</pre>\n"],["handle_connect","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_connect","(*args)","<p>Connect to given peer(s).\n\n<pre>bitcoin_node connect &lt;ip&gt;:&lt;port&gt;[,&lt;ip&gt;:&lt;port&gt;]</pre>\n"],["handle_connections","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_connections","()","<p>Get currently connected peers.\n\n<pre>bitcoin_node connections</pre>\n"],["handle_create_tx","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_create_tx","(keys, recipients, fee = 0)","<p>Create a transaction, collecting outputs from given <code>keys</code>,\nspending to <code>recipients</code> with an optional <code>fee</code> …\n"],["handle_disconnect","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_disconnect","(*args)","<p>Disconnect given peer(s).\n\n<pre>bitcoin_node disconnect &lt;ip&gt;:&lt;port&gt;[,&lt;ip&gt;,&lt;port&gt;]</pre>\n"],["handle_getaddr","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_getaddr","()","<p>Trigger the node to ask its for new peer addresses.\n\n<pre>bitcoin_node getaddr</pre>\n"],["handle_getblocks","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_getblocks","()","<p>Trigger the node to ask its peers for new blocks.\n\n<pre>bitcoin_node getblocks</pre>\n"],["handle_help","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_help","()","<p>List all available commands.\n\n<pre>bitcoin_node help</pre>\n"],["handle_info","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_info","()","<p>Get various statistics.\n\n<pre>bitcoin_node info</pre>\n"],["handle_mempool_request","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-handle_mempool_request","(payload)","<p>en.bitcoin.it/wiki/BIP_0035\n"],["handle_monitor","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_monitor","(*channels)","<p>handle <code>monitor</code> command; subscribe client to specified channels\n(<code>block</code>, <code>tx</code>, <code>output</code>,\n<code>connection</code>). Some …\n"],["handle_monitor_block","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_monitor_block","()","<p>Handle +monitor block+ command; send the current chain head after client is\nsubscribed to :block channel …\n"],["handle_monitor_connection","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_monitor_connection","()","<p>Handle +monitor connection+ command; send current connections after client\nis subscribed to :connection …\n"],["handle_monitor_output","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_monitor_output","(conf = 0)","<p>Handle +monitor output+ command. Receive tx hash, recipient address and\nvalue for each output. This allows …\n"],["handle_monitor_tx","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_monitor_tx","(conf = nil)","<p>Handle +monitor tx+ command. When <code>conf</code> is given, don&#39;t\nsubscribe to the :tx channel for unconfirmed …\n"],["handle_notfound_reply","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-handle_notfound_reply","(payload)",""],["handle_relay_tx","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_relay_tx","(hex, send = 3, wait = 3)","<p>Relay given transaction (in hex).\n\n<pre>bitcoin_node relay_tx &lt;tx in hex&gt;</pre>\n"],["handle_rescan","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_rescan","()","<p>Trigger a rescan operation when used with a UtxoStore.\n\n<pre>bitcoin_node rescan</pre>\n"],["handle_stop","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_stop","()","<p>Stop the bitcoin node.\n\n<pre>bitcoin_node stop</pre>\n"],["handle_store_block","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_store_block","(hex)","<p>Validate and store given block (in hex) as if it was received by a peer.\n\n<pre>bitcoin_node store_block &lt;block ...</pre>\n"],["handle_store_tx","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_store_tx","(hex)","<p>Store given transaction (in hex) as if it was received by a peer.\n\n<pre>bitcoin_node store_tx &lt;tx in hex&gt;</pre>\n"],["handle_stream_error","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-handle_stream_error","(type, msg)",""],["handle_tslb","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_tslb","()","<p>Get Time Since Last Block.\n\n<pre>bitcoin_node tslb</pre>\n"],["has_block","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-has_block","(blk_hash)",""],["has_block","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-has_block","(blk_hash)","<p>check if block <code>blk_hash</code> exists\n"],["has_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-has_block","(blk_hash)","<p>check if block with given <code>blk_hash</code> is already stored\n"],["has_block","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-has_block","(blk_hash)","<p>check if block <code>blk_hash</code> exists\n"],["has_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-has_tx","(tx_hash)",""],["has_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-has_tx","(tx_hash)","<p>check if transaction <code>tx_hash</code> exists\n"],["has_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-has_tx","(tx_hash)","<p>check if tx with given <code>tx_hash</code> is already stored\n"],["has_tx","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-has_tx","(tx_hash)","<p>check if transaction <code>tx_hash</code> exists\n"],["hash","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-hash","()","<p>check that block hash matches header\n"],["hash","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-hash","()","<p>check that tx hash matches data\n"],["hash160","Bitcoin::Key","Bitcoin/Key.html#method-i-hash160","()","<p>Get the hash160 of the public key.\n"],["hash160","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-hash160","()",""],["hash160","Bitcoin::Util","Bitcoin/Util.html#method-i-hash160","(hex)","<p>hash160 is a 20 bytes (160bits) rmd610-sha256 hexdigest.\n"],["hash160_from_address","Bitcoin::Util","Bitcoin/Util.html#method-i-hash160_from_address","(address)","<p>get hash160 for given <code>address</code>. returns nil if address is\ninvalid.\n"],["hash160_to_address","Bitcoin::Util","Bitcoin/Util.html#method-i-hash160_to_address","(hex)",""],["hash_from_payload","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-hash_from_payload","(payload)","<p>generate the tx hash for given <code>payload</code> in hex format\n"],["hash_mrkl_branch","Bitcoin::Util","Bitcoin/Util.html#method-i-hash_mrkl_branch","(tx, target)","<p>get merkle branch connecting given <code>target</code> to the merkle root\nof <code>tx</code> list\n"],["hash_mrkl_tree","Bitcoin::Util","Bitcoin/Util.html#method-i-hash_mrkl_tree","(tx)","<p>get merkle tree for given <code>tx</code> list.\n"],["header_info","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-header_info","()","<p>get the block header info\n<p>&lt;version&gt;, &lt;prev_block&gt;, &lt;merkle_root&gt;, &lt;time&gt;, &lt;bits&gt;, … &mdash; \n"],["header_to_json","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-header_to_json","(options = {:space => ''})","<p>convert header to json representation.\n"],["hextarget","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-hextarget","()",""],["htb","Bitcoin::BinaryExtensions","Bitcoin/BinaryExtensions.html#method-i-htb","()",""],["htb","SimpleNode::Connection","SimpleNode/Connection.html#method-i-htb","(h)",""],["htb_reverse","Bitcoin::BinaryExtensions","Bitcoin/BinaryExtensions.html#method-i-htb_reverse","()",""],["hth","Bitcoin::BinaryExtensions","Bitcoin/BinaryExtensions.html#method-i-hth","()",""],["hth","SimpleNode::Connection","SimpleNode/Connection.html#method-i-hth","(h)",""],["import","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-import","(filename, max_depth = nil)","<p>import satoshi bitcoind blk0001.dat blockchain file\n"],["import","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-import","(base58, label = nil)","<p>Import key from given <code>base58</code> string. (See\nBitcoin::Key.from_base58)\n"],["import_key","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-import_key","(base58, label = nil)",""],["in_sync?","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-in_sync-3F","()",""],["included","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-c-included","(base)",""],["included","Bitcoin::Namecoin::Storage::Backend","Bitcoin/Namecoin/Storage/Backend.html#method-c-included","(base)",""],["incoming?","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-incoming-3F","()",""],["info","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-info","()","<p>get info hash\n"],["init_epoll","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-init_epoll","()","<p>initiate epoll with given file descriptor and set effective user\n"],["init_ffi_ssl","Bitcoin::OpenSSL_EC","Bitcoin/OpenSSL_EC.html#method-c-init_ffi_ssl","()",""],["init_sequel_store","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-init_sequel_store","()",""],["inner_p2sh!","Bitcoin::Script","Bitcoin/Script.html#method-i-inner_p2sh-21","()",""],["inner_p2sh?","Bitcoin::Script","Bitcoin/Script.html#method-i-inner_p2sh-3F","()",""],["input","Bitcoin::Builder::TxBuilder","Bitcoin/Builder/TxBuilder.html#method-i-input","()","<p>add an input to the transaction (see TxInBuilder).\n"],["input_values","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-input_values","()","<p>check that the total input value doesn&#39;t exceed MAX_MONEY\n"],["inputs","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-inputs","()","<p>check that none of the inputs is coinbase (coinbase tx do not get\nvalidated)\n"],["inspect_key","Bitcoin::Util","Bitcoin/Util.html#method-i-inspect_key","(key)",""],["int_to_base58","Bitcoin::Util","Bitcoin/Util.html#method-i-int_to_base58","(int_val, leading_zero_bytes=0)",""],["inv_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-inv_pkt","(type, hashes)",""],["invalid","Bitcoin::Script","Bitcoin/Script.html#method-i-invalid","()",""],["invalid?","Bitcoin::Script","Bitcoin/Script.html#method-i-invalid-3F","()",""],["is_canonical_pubkey?","Bitcoin::Script","Bitcoin/Script.html#method-c-is_canonical_pubkey-3F","(pubkey)",""],["is_hash160?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_hash160-3F","()","<p>is this a hash160 (address) tx\n"],["is_multisig?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_multisig-3F","()","<p>is this a multisig tx\n"],["is_name_firstupdate?","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-is_name_firstupdate-3F","()","<p>is namecoin name_firstupdate script OP_2 name rand value OP_2DROP OP_2DROP\n&lt;hash160_script&gt;\n"],["is_name_new?","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-is_name_new-3F","()","<p>is namecoin name_new script OP_1 name_hash OP_2DROP &lt;hash160_script&gt;\n"],["is_name_update?","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-is_name_update-3F","()","<p>is namecoin name_update script OP_3 name value OP_2DROP OP_DROP\n&lt;hash160_script&gt;\n"],["is_namecoin?","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-is_namecoin-3F","()","<p>is any kind of namecoin script\n"],["is_p2sh?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_p2sh-3F","()",""],["is_pay_to_script_hash?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_pay_to_script_hash-3F","()",""],["is_pubkey?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_pubkey-3F","()","<p>is this a pubkey tx\n"],["is_send_to_ip?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_send_to_ip-3F","()",""],["is_standard?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_standard-3F","()","<p>check if script is in one of the recognized standard formats\n"],["key","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-i-key","(addr)","<p>Get key for given <code>addr</code>.\n"],["key","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-key","(name)","<p>Get key for given <code>label</code>, <code>addr</code> or\n<code>pubkey</code>.\n"],["keys","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-i-keys","()","<p>List all keys upto configured limit.\n"],["keys","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-keys","(need = nil)","<p>List all stored keys.\n"],["label","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-label","(old, new)","<p>set label for key <code>old</code> to <code>new</code>\n"],["label_key","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-label_key","(name, label)",""],["level=","Bitcoin::Logger::Logger","Bitcoin/Logger/Logger.html#method-i-level-3D","(level)",""],["level=","Log4r::Logger","Log4r/Logger.html#method-i-level-3D","(l = 0)",""],["list","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-list","()","<p>list all keys along with their balances\n"],["lists","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-lists","()","<p>check that tx has at least one input and one output\n"],["little_endian_hex_of_n_bytes","Object","Object.html#method-i-little_endian_hex_of_n_bytes","(i, n)",""],["load","Bitcoin::Config","Bitcoin/Config.html#method-c-load","(options, categories = [], paths = CONFIG_PATHS)","<p>Load <code>categories</code> from all files at <code>paths</code> into\ngiven <code>options</code> hash.\n"],["load","Bitcoin::Namecoin","Bitcoin/Namecoin.html#method-c-load","()",""],["load_addrs","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-load_addrs","()",""],["load_file","Bitcoin::Config","Bitcoin/Config.html#method-c-load_file","(options, file, c = [])","<p>Load categories <code>c</code> of a single config <code>file</code> into\ngiven <code>options</code> hash.\n"],["load_keys","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-load_keys","()","<p>Load keys from file. If file is empty this will generate a new key and\nstore it, creating the file.\n"],["load_watched_addrs","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-load_watched_addrs","()",""],["locator_payload","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-locator_payload","(version, locator_hashes, stop_hash)",""],["lock_time","Bitcoin::Builder::TxBuilder","Bitcoin/Builder/TxBuilder.html#method-i-lock_time","(n)","<p>specify tx lock_time. this is usually not necessary. defaults to 0.\n"],["lock_time","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-lock_time","()","<p>check that lock_time doesn&#39;t exceed INT_MAX\n"],["log","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-log","()",""],["log","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-i-log","()",""],["log","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-log","()","<p>wrap logger and append prefix\n"],["log","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-log","()",""],["log","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-log","()",""],["log","Bitcoin::Storage","Bitcoin/Storage.html#method-c-log","()",""],["log","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-log","()",""],["log","SimpleNode::Connection","SimpleNode/Connection.html#method-i-log","()",""],["main_iteration_with_queue","Gtk","Gtk.html#method-c-main_iteration_with_queue","()",""],["max_size","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-max_size","()","<p>check that tx size doesn&#39;t exceed MAX_BLOCK_SIZE.\n"],["max_timestamp","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-max_timestamp","()","<p>check that block time is not greater than max\n"],["merge","Bitcoin::Config","Bitcoin/Config.html#method-c-merge","(a, b)","<p>Deep-merge hash <code>b</code> into <code>a</code>.\n"],["message","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-message","(type, title, text, buttons)",""],["method_missing","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-method_missing","(name, *args)",""],["method_missing","Bitcoin::Logger::LogWrapper","Bitcoin/Logger/LogWrapper.html#method-i-method_missing","(m, *a, &blk)",""],["method_missing","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-i-method_missing","(name, *args, &block)","<p>register callback methods\n"],["method_missing","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-i-method_missing","(*a)",""],["method_missing","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-method_missing","(name, *args, &block)","<p>register callback methods\n"],["migrate","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-migrate","()","<p>check if schema is up to date and migrate to current version if necessary\n"],["min_size","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-min_size","()","<p>check that min_size is at least 86 bytes (smaller tx can&#39;t be valid /\ndo anything useful)\n"],["min_timestamp","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-min_timestamp","()","<p>check that timestamp is newer than the median of the last 11 blocks\n"],["minimum_block_fee","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-minimum_block_fee","()",""],["minimum_relay_fee","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-minimum_relay_fee","()",""],["mrkl_branch_root","Bitcoin::Util","Bitcoin/Util.html#method-i-mrkl_branch_root","(branch, target, idx)","<p>get merkle root from <code>branch</code> and <code>target</code>.\n"],["mrkl_root","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-mrkl_root","()","<p>check that merkle root matches transaction hashes\n"],["name_history","Bitcoin::Namecoin::Storage::Backend","Bitcoin/Namecoin/Storage/Backend.html#method-i-name_history","(name)",""],["name_show","Bitcoin::Namecoin::Storage::Backend","Bitcoin/Namecoin/Storage/Backend.html#method-i-name_show","(name)",""],["network","Bitcoin","Bitcoin.html#method-c-network","()",""],["network=","Bitcoin","Bitcoin.html#method-c-network-3D","(name)",""],["network_name","Bitcoin","Bitcoin.html#method-c-network_name","()",""],["network_project","Bitcoin","Bitcoin.html#method-c-network_project","()",""],["new","Bitcoin::Builder::BlockBuilder","Bitcoin/Builder/BlockBuilder.html#method-c-new","()",""],["new","Bitcoin::Builder::ScriptBuilder","Bitcoin/Builder/ScriptBuilder.html#method-c-new","()",""],["new","Bitcoin::Builder::TxBuilder","Bitcoin/Builder/TxBuilder.html#method-c-new","()",""],["new","Bitcoin::Builder::TxInBuilder","Bitcoin/Builder/TxInBuilder.html#method-c-new","()",""],["new","Bitcoin::Builder::TxOutBuilder","Bitcoin/Builder/TxOutBuilder.html#method-c-new","()",""],["new","Bitcoin::Connection","Bitcoin/Connection.html#method-c-new","(host, port, connections)",""],["new","Bitcoin::Gui::AddrView","Bitcoin/Gui/AddrView.html#method-c-new","(gui)",""],["new","Bitcoin::Gui::ConnView","Bitcoin/Gui/ConnView.html#method-c-new","(gui)",""],["new","Bitcoin::Gui::Connection","Bitcoin/Gui/Connection.html#method-c-new","(host, port, gui)",""],["new","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-c-new","(storage, wallet_file = nil)",""],["new","Bitcoin::Gui::TreeView","Bitcoin/Gui/TreeView.html#method-c-new","(gui, view_name, columns)",""],["new","Bitcoin::Gui::TxInView","Bitcoin/Gui/TxInView.html#method-c-new","(gui, replace = nil)",""],["new","Bitcoin::Gui::TxView","Bitcoin/Gui/TxView.html#method-c-new","(gui, replace = nil)",""],["new","Bitcoin::Key","Bitcoin/Key.html#method-c-new","(privkey = nil, pubkey = nil, compressed = true)","<p>Create a new key with given <code>privkey</code> and <code>pubkey</code>.\n\n<pre>Bitcoin::Key.new\nBitcoin::Key.new(privkey)\nBitcoin::Key.new(nil, ...</pre>\n"],["new","Bitcoin::Logger::LogWrapper","Bitcoin/Logger/LogWrapper.html#method-c-new","(name, log)",""],["new","Bitcoin::Logger::Logger","Bitcoin/Logger/Logger.html#method-c-new","(name)",""],["new","Bitcoin::Namecoin::Storage::Models::Name","Bitcoin/Namecoin/Storage/Models/Name.html#method-c-new","(store, data)",""],["new","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-c-new","(host, port, block, *args)","<p>create new client connecting to <code>host</code>:<code>port</code> and\nexecuting callbacks from <code>block</code>, passing <code>args</code> in.\n\n<pre>CommandClient.connect(host, ...</pre>\n"],["new","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-c-new","(node)","<p>create new CommandHandler\n"],["new","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-c-new","(node, host, port, direction)","<p>create connection to <code>host</code>:<code>port</code> for given\n<code>node</code>\n"],["new","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-c-new","(config = {})",""],["new","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-c-new","(data = nil)","<p>create addr from raw binary <code>data</code>\n"],["new","Bitcoin::Protocol::Alert","Bitcoin/Protocol/Alert.html#method-c-new","(values, alert_payload=nil, alert_signature=nil)",""],["new","Bitcoin::Protocol::AuxPow","Bitcoin/Protocol/AuxPow.html#method-c-new","(data)",""],["new","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-new","(data)","<p>create block from raw binary <code>data</code>\n"],["new","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-c-new","(handler=nil)",""],["new","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-new","(data=nil)","<p>create tx from raw binary <code>data</code>\n"],["new","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-c-new","(*args)",""],["new","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-c-new","(*args)",""],["new","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-c-new","(opts={})",""],["new","Bitcoin::Script","Bitcoin/Script.html#method-c-new","(bytes, offset=0)","<p>create a new script. <code>bytes</code> is typically input_script +\noutput_script\n"],["new","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-c-new","(*args)",""],["new","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-c-new","(config, *args)","<p>create sequel store with given <code>config</code>\n"],["new","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-c-new","(config = {}, getblocks_callback = nil)",""],["new","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-c-new","(config, *args)","<p>create sequel store with given <code>config</code>\n"],["new","Bitcoin::Storage::Models::Block","Bitcoin/Storage/Models/Block.html#method-c-new","(store, data)",""],["new","Bitcoin::Storage::Models::Tx","Bitcoin/Storage/Models/Tx.html#method-c-new","(store, data)",""],["new","Bitcoin::Storage::Models::TxIn","Bitcoin/Storage/Models/TxIn.html#method-c-new","(store, data)",""],["new","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-c-new","(store, data)",""],["new","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-c-new","(block, store, prev_block = nil)","<p>setup new validator for given <code>block</code>, validating context with\n<code>store</code>, optionally passing the <code>prev_block</code> …\n"],["new","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-c-new","(tx, store, block = nil)","<p>setup new validator for given <code>tx</code>, validating context with\n<code>store</code>. also needs the <code>block</code> to find prev_outs …\n"],["new","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-c-new","(config)","<p>Initialize keystore.\n<p>config &mdash; Hash of settings ({:keys =&gt; 1, :seed =&gt; …, :nonce =&gt; …})\n\n"],["new","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-c-new","(seed = nil, nonce = nil, target = nil)","<p>Initialize key generator with optional <code>seed</code> and\n<code>nonce</code> and <code>target</code>.\n<p>seed &mdash; the seed data for the keygenerator …\n"],["new","Bitcoin::Wallet::SimpleCoinSelector","Bitcoin/Wallet/SimpleCoinSelector.html#method-c-new","(txouts)","<p>create coinselector with given <code>txouts</code>\n"],["new","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-c-new","(config)","<p>Initialize keystore.\n<p>config &mdash; Hash of settings ({:file =&gt; “/foo/bar.json”})\n\n"],["new","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-c-new","(tx = [])",""],["new","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-c-new","(storage, keystore, selector = SimpleCoinSelector)","<p>open wallet with given <code>storage</code> Storage backend,\n<code>keystore</code> SimpleKeyStore and <code>selector</code>\nSimpleCoinSelector …\n"],["new","Connection","Connection.html#method-c-new","(*args)",""],["new","ElectrumClient","ElectrumClient.html#method-c-new","()",""],["new","Server","Server.html#method-c-new","()",""],["new","SimpleNode::Connection","SimpleNode/Connection.html#method-c-new","(host, port, node=nil, opts={})",""],["new_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-new_block","(blk)","<p>handle a new block incoming from the network\n"],["new_key","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-i-new_key","()","<p>Get new key (actually just increase the key limit).\n"],["new_key","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-new_key","(label = nil)","<p>Generate and store a new key.\n"],["new_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-new_tx","(tx)",""],["new_tx","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-new_tx","(outputs, fee = 0, change_policy = :back)","<p>create a transaction with given <code>outputs</code>, <code>fee</code> and\n<code>change_policy</code>.\n<p>outputs are of the form\n\n<pre>[&lt;type&gt;, &lt;recipients&gt;, ...</pre>\n"],["next_bits_required","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-next_bits_required","()",""],["on","ElectrumClient","ElectrumClient.html#method-i-on","(method, *params, &block)",""],["on_about","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_about","()",""],["on_addr","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_addr","(addr)",""],["on_addr","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_addr","(addr)","<p>received <code>addr</code> message for given <code>addr</code>. store addr\nin node and notify listeners\n"],["on_addr","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_addr","(addr)",""],["on_addr","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_addr","(addr)",""],["on_alert","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_alert","(alert)","<p>received <code>alert</code> message for given <code>alert</code>. TODO:\nimplement alert logic, store, display, relay\n"],["on_block","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_block","(block)",""],["on_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_block","(blk)","<p>received <code>block</code> message for given <code>blk</code>. push block\nto storage queue\n"],["on_block","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_block","(block)",""],["on_block","RawJSON_Connection","RawJSON_Connection.html#method-i-on_block","(block)",""],["on_block","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_block","(block)",""],["on_check_unconfirmed_toggled","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_check_unconfirmed_toggled","()",""],["on_copy_addr","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_copy_addr","()",""],["on_exit","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_exit","()",""],["on_get_block","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_get_block","(hash)",""],["on_get_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_get_block","(hash)","<p>received <code>get_block</code> message for given <code>hash</code>. send\nspecified block if we have it\n"],["on_get_block","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_get_block","(hash)",""],["on_get_block","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_get_block","(hash)",""],["on_get_transaction","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_get_transaction","(hash)",""],["on_get_transaction","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_get_transaction","(hash)","<p>received <code>get_tx</code> message for given <code>hash</code>. send\nspecified tx if we have it\n"],["on_get_transaction","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_get_transaction","(hash)",""],["on_get_transaction","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_get_transaction","(hash)",""],["on_getaddr","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_getaddr","()","<p>received <code>getaddr</code> message. send <code>addr</code> message with\npeer addresses back.\n"],["on_getblocks","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_getblocks","(version, hashes, stop_hash)","<p>received <code>getblocks</code> message. TODO: locator fallback\n"],["on_handshake_begin","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_handshake_begin","()",""],["on_handshake_begin","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_handshake_begin","()","<p>begin handshake; send <code>version</code> message\n"],["on_handshake_begin","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_handshake_begin","()",""],["on_handshake_complete","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_handshake_complete","()",""],["on_handshake_complete","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_handshake_complete","()","<p>complete handshake; set state, started time, notify listeners and add\naddress to Node\n"],["on_handshake_complete","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_handshake_complete","()",""],["on_headers","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_headers","(headers)","<p>received <code>headers</code> message for given <code>headers</code>. push\neach header to storage queue\n"],["on_inv_block","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_inv_block","(hash)",""],["on_inv_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_inv_block","(hash)","<p>received <code>inv_block</code> message for given <code>hash</code>. add to\ninv_queue, unless maximum is reached\n"],["on_inv_block","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_inv_block","(hash)",""],["on_inv_block","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_inv_block","(hash)",""],["on_inv_transaction","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_inv_transaction","(hash)",""],["on_inv_transaction","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_inv_transaction","(hash)","<p>received <code>inv_tx</code> message for given <code>hash</code>. add to\ninv_queue, unlesss maximum is reached\n"],["on_inv_transaction","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_inv_transaction","(hash)",""],["on_inv_transaction","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_inv_transaction","(hash)",""],["on_new_addr","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_new_addr","(addr = nil)",""],["on_new_tx","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_new_tx","()",""],["on_new_wallet","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_new_wallet","()",""],["on_open_wallet","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_open_wallet","()",""],["on_paste_addr","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_paste_addr","()",""],["on_ping","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_ping","(nonce)","<p>received <code>ping</code> message with given <code>nonce</code>. send\n<code>pong</code> message back, if <code>nonce</code> is set. network\nversions &lt;=60000 …\n"],["on_pong","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_pong","(nonce)","<p>received <code>pong</code> message with given <code>nonce</code>. TODO: see\n#send_ping\n"],["on_preferences","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-on_preferences","()",""],["on_request","Connection","Connection.html#method-i-on_request","(req)",""],["on_tx","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_tx","(tx)",""],["on_tx","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_tx","(tx)","<p>received <code>tx</code> message for given <code>tx</code>. push tx to\nstorage queue\n"],["on_tx","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_tx","(tx)",""],["on_tx","RawJSON_Connection","RawJSON_Connection.html#method-i-on_tx","(tx)",""],["on_tx","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_tx","(tx)",""],["on_verack","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_verack","()","<p>received <code>verack</code> message. complete handshake if it isn&#39;t\ncompleted already\n"],["on_version","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_version","(version)",""],["on_version","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_version","(version)","<p>received <code>version</code> message for given <code>version</code>. send\n<code>verack</code> message and complete handshake\n"],["on_version","SimpleNode::Connection","SimpleNode/Connection.html#method-i-on_version","(version)",""],["op_0","Bitcoin::Script","Bitcoin/Script.html#method-i-op_0","()","<p>An empty array of bytes is pushed onto the stack.\n"],["op_0notequal","Bitcoin::Script","Bitcoin/Script.html#method-i-op_0notequal","()",""],["op_1","Bitcoin::Script","Bitcoin/Script.html#method-i-op_1","()","<p>The number 1 is pushed onto the stack. Same as OP_TRUE\n"],["op_1add","Bitcoin::Script","Bitcoin/Script.html#method-i-op_1add","()","<p>1 is added to the input.\n"],["op_1negate","Bitcoin::Script","Bitcoin/Script.html#method-i-op_1negate","()","<p>The number -1 is pushed onto the stack.\n"],["op_1sub","Bitcoin::Script","Bitcoin/Script.html#method-i-op_1sub","()",""],["op_2div","Bitcoin::Script","Bitcoin/Script.html#method-i-op_2div","()","<p>The input is divided by 2. Currently disabled.\n"],["op_2drop","Bitcoin::Script","Bitcoin/Script.html#method-i-op_2drop","()","<p>Removes the top two stack items.\n"],["op_2dup","Bitcoin::Script","Bitcoin/Script.html#method-i-op_2dup","()","<p>Duplicates the top two stack items.\n"],["op_2mul","Bitcoin::Script","Bitcoin/Script.html#method-i-op_2mul","()","<p>The input is multiplied by 2. Currently disabled.\n"],["op_2over","Bitcoin::Script","Bitcoin/Script.html#method-i-op_2over","()","<p>Copies the pair of items two spaces back in the stack to the front.\n"],["op_2swap","Bitcoin::Script","Bitcoin/Script.html#method-i-op_2swap","()","<p>Swaps the top two pairs of items.\n"],["op_3dup","Bitcoin::Script","Bitcoin/Script.html#method-i-op_3dup","()","<p>Duplicates the top three stack items.\n"],["op_abs","Bitcoin::Script","Bitcoin/Script.html#method-i-op_abs","()","<p>The input is made positive.\n"],["op_add","Bitcoin::Script","Bitcoin/Script.html#method-i-op_add","()","<p>a is added to b.\n"],["op_booland","Bitcoin::Script","Bitcoin/Script.html#method-i-op_booland","()","<p>If both a and b are not 0, the output is 1. Otherwise 0.\n"],["op_boolor","Bitcoin::Script","Bitcoin/Script.html#method-i-op_boolor","()","<p>If a or b is not 0, the output is 1. Otherwise 0.\n"],["op_checkhashverify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_checkhashverify","()","<p>en.bitcoin.it/wiki/BIP_0017  (old OP_NOP2) TODO: don&#39;t rely on it yet.\nadd guards from wikipage too. …\n"],["op_checkmultisig","Bitcoin::Script","Bitcoin/Script.html#method-i-op_checkmultisig","(check_callback)","<p>do a CHECKMULTISIG operation on the current stack, asking\n<code>check_callback</code> to do the actual signature verification. …\n"],["op_checksig","Bitcoin::Script","Bitcoin/Script.html#method-i-op_checksig","(check_callback)","<p>do a CHECKSIG operation on the current stack, asking\n<code>check_callback</code> to do the actual signature verification. …\n"],["op_checksigverify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_checksigverify","(check_callback)",""],["op_codeseparator","Bitcoin::Script","Bitcoin/Script.html#method-i-op_codeseparator","()","<p>All of the signature checking words will only match signatures to the data\nafter the most recently-executed …\n"],["op_depth","Bitcoin::Script","Bitcoin/Script.html#method-i-op_depth","()","<p>Puts the number of stack items onto the stack.\n"],["op_drop","Bitcoin::Script","Bitcoin/Script.html#method-i-op_drop","()","<p>Removes the top stack item.\n"],["op_dup","Bitcoin::Script","Bitcoin/Script.html#method-i-op_dup","()","<p>Duplicates the top stack item.\n"],["op_else","Bitcoin::Script","Bitcoin/Script.html#method-i-op_else","()","<p>If the preceding OP_IF or OP_NOTIF or OP_ELSE was not executed then these\nstatements are and if the preceding …\n"],["op_endif","Bitcoin::Script","Bitcoin/Script.html#method-i-op_endif","()","<p>Ends an if/else block.\n"],["op_equal","Bitcoin::Script","Bitcoin/Script.html#method-i-op_equal","()","<p>Returns 1 if the inputs are exactly equal, 0 otherwise.\n"],["op_equalverify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_equalverify","()","<p>Same as OP_EQUAL, but runs OP_VERIFY afterward.\n"],["op_fromaltstack","Bitcoin::Script","Bitcoin/Script.html#method-i-op_fromaltstack","()","<p>Puts the input onto the top of the main stack. Removes it from the alt\nstack.\n"],["op_greaterthan","Bitcoin::Script","Bitcoin/Script.html#method-i-op_greaterthan","()","<p>Returns 1 if a is greater than b, 0 otherwise.\n"],["op_greaterthanorequal","Bitcoin::Script","Bitcoin/Script.html#method-i-op_greaterthanorequal","()","<p>Returns 1 if a is greater than or equal to b, 0 otherwise.\n"],["op_hash160","Bitcoin::Script","Bitcoin/Script.html#method-i-op_hash160","()","<p>The input is hashed twice: first with SHA-256 and then with RIPEMD-160.\n"],["op_hash256","Bitcoin::Script","Bitcoin/Script.html#method-i-op_hash256","()","<p>The input is hashed two times with SHA-256.\n"],["op_if","Bitcoin::Script","Bitcoin/Script.html#method-i-op_if","()","<p>If the top stack value is not 0, the statements are executed. The top stack\nvalue is removed.\n"],["op_ifdup","Bitcoin::Script","Bitcoin/Script.html#method-i-op_ifdup","()","<p>If the input is true, duplicate it.\n"],["op_lessthan","Bitcoin::Script","Bitcoin/Script.html#method-i-op_lessthan","()","<p>Returns 1 if a is less than b, 0 otherwise.\n"],["op_lessthanorequal","Bitcoin::Script","Bitcoin/Script.html#method-i-op_lessthanorequal","()","<p>Returns 1 if a is less than or equal to b, 0 otherwise.\n"],["op_max","Bitcoin::Script","Bitcoin/Script.html#method-i-op_max","()","<p>Returns the larger of a and b.\n"],["op_min","Bitcoin::Script","Bitcoin/Script.html#method-i-op_min","()","<p>Returns the smaller of a and b.\n"],["op_negate","Bitcoin::Script","Bitcoin/Script.html#method-i-op_negate","()","<p>The sign of the input is flipped.\n"],["op_nip","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nip","()","<p>Removes the second-to-top stack item.\n"],["op_nop","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop","()","<p>Does nothing\n"],["op_nop1","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop1","()",""],["op_nop10","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop10","()",""],["op_nop2","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop2","()",""],["op_nop3","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop3","()",""],["op_nop4","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop4","()",""],["op_nop5","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop5","()",""],["op_nop6","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop6","()",""],["op_nop7","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop7","()",""],["op_nop8","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop8","()",""],["op_nop9","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop9","()",""],["op_not","Bitcoin::Script","Bitcoin/Script.html#method-i-op_not","()","<p>If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\n"],["op_notif","Bitcoin::Script","Bitcoin/Script.html#method-i-op_notif","()","<p>If the top stack value is 0, the statements are executed. The top stack\nvalue is removed.\n"],["op_numequal","Bitcoin::Script","Bitcoin/Script.html#method-i-op_numequal","()","<p>Returns 1 if the numbers are equal, 0 otherwise.\n"],["op_numequalverify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_numequalverify","()","<p>Same as OP_NUMEQUAL, but runs OP_VERIFY afterward.\n"],["op_numnotequal","Bitcoin::Script","Bitcoin/Script.html#method-i-op_numnotequal","()","<p>Returns 1 if the numbers are not equal, 0 otherwise.\n"],["op_over","Bitcoin::Script","Bitcoin/Script.html#method-i-op_over","()","<p>Copies the second-to-top stack item to the top.\n"],["op_pick","Bitcoin::Script","Bitcoin/Script.html#method-i-op_pick","()","<p>The item n back in the stack is copied to the top.\n"],["op_return","Bitcoin::Script","Bitcoin/Script.html#method-i-op_return","()","<p>Marks transaction as invalid.\n"],["op_ripemd160","Bitcoin::Script","Bitcoin/Script.html#method-i-op_ripemd160","()","<p>The input is hashed using RIPEMD-160.\n"],["op_roll","Bitcoin::Script","Bitcoin/Script.html#method-i-op_roll","()","<p>The item n back in the stack is moved to the top.\n"],["op_rot","Bitcoin::Script","Bitcoin/Script.html#method-i-op_rot","()","<p>The top three items on the stack are rotated to the left.\n"],["op_sha1","Bitcoin::Script","Bitcoin/Script.html#method-i-op_sha1","()","<p>The input is hashed using SHA-1.\n"],["op_sha256","Bitcoin::Script","Bitcoin/Script.html#method-i-op_sha256","()","<p>The input is hashed using SHA-256.\n"],["op_size","Bitcoin::Script","Bitcoin/Script.html#method-i-op_size","()","<p>Returns the length of the input string.\n"],["op_sub","Bitcoin::Script","Bitcoin/Script.html#method-i-op_sub","()","<p>b is subtracted from a.\n"],["op_swap","Bitcoin::Script","Bitcoin/Script.html#method-i-op_swap","()","<p>The top two items on the stack are swapped.\n"],["op_toaltstack","Bitcoin::Script","Bitcoin/Script.html#method-i-op_toaltstack","()","<p>Puts the input onto the top of the alt stack. Removes it from the main\nstack.\n"],["op_tuck","Bitcoin::Script","Bitcoin/Script.html#method-i-op_tuck","()","<p>The item at the top of the stack is copied and inserted before the\nsecond-to-top item.\n"],["op_ver","Bitcoin::Script","Bitcoin/Script.html#method-i-op_ver","()","<p>Transaction is invalid unless occuring in an unexecuted OP_IF branch\n"],["op_verify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_verify","()","<p>Marks transaction as invalid if top stack value is not true. True is\nremoved, but false is not.\n"],["op_within","Bitcoin::Script","Bitcoin/Script.html#method-i-op_within","()","<p>Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\n"],["open_key","Bitcoin::Util","Bitcoin/Util.html#method-i-open_key","(private_key, public_key=nil)",""],["open_wallet","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-open_wallet","(file)",""],["outgoing?","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-outgoing-3F","()",""],["output","Bitcoin::Builder::TxBuilder","Bitcoin/Builder/TxBuilder.html#method-i-output","()","<p>add an output to the transaction (see TxOutBuilder).\n"],["output_sum","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-output_sum","()","<p>check that the total output value doesn&#39;t exceed the total input value\n"],["output_values","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-output_values","()","<p>check that total output value doesn&#39;t exceed MAX_MONEY.\n"],["p2sh_version","Bitcoin::Util","Bitcoin/Util.html#method-i-p2sh_version","()",""],["pack_address_field","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-i-pack_address_field","(addr_str)",""],["pack_pushdata","Bitcoin::Script","Bitcoin/Script.html#method-c-pack_pushdata","(data)",""],["pack_pushdata_align","Bitcoin::Script","Bitcoin/Script.html#method-c-pack_pushdata_align","(pushdata, len, data)",""],["pack_var_int","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-pack_var_int","(i)",""],["pack_var_string","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-pack_var_string","(payload)",""],["parse","Bitcoin::Protocol::Alert","Bitcoin/Protocol/Alert.html#method-c-parse","(payload)",""],["parse","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse","(buf)",""],["parse","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-i-parse","(payload)",""],["parse","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-c-parse","(payload)",""],["parse","Bitcoin::Script","Bitcoin/Script.html#method-i-parse","(bytes, offset=0)","<p>parse raw script\n"],["parse","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-c-parse","(str)",""],["parse","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-i-parse","(str)",""],["parse_addr","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_addr","(payload)",""],["parse_alert","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_alert","(payload)",""],["parse_buffer","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_buffer","()",""],["parse_data","Bitcoin::Protocol::AuxPow","Bitcoin/Protocol/AuxPow.html#method-i-parse_data","(data)",""],["parse_data","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-parse_data","(data)","<p>parse raw binary data\n"],["parse_data","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-parse_data","(data)","<p>parse raw binary data\n"],["parse_data","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-parse_data","(data)","<p>parse raw binary data for transaction input\n"],["parse_data","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-parse_data","(data)","<p>parse raw binary data for transaction output\n"],["parse_data_from_io","Bitcoin::Protocol::AuxPow","Bitcoin/Protocol/AuxPow.html#method-i-parse_data_from_io","(data)",""],["parse_data_from_io","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-parse_data_from_io","(buf)","<p>parse raw binary data\n"],["parse_data_from_io","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-parse_data_from_io","(data)","<p>parse raw binary data\n"],["parse_data_from_io","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-parse_data_from_io","(buf)",""],["parse_data_from_io","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-parse_data_from_io","(buf)","<p>parse raw binary data for transaction output\n"],["parse_getblocks","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_getblocks","(payload)",""],["parse_headers","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_headers","(payload)",""],["parse_input","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-i-parse_input","(input)",""],["parse_inv","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_inv","(payload, type=:put)","<p>handles inv/getdata packets\n"],["parse_payload","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-parse_payload","(data)",""],["parse_payload","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-parse_payload","(data)",""],["parse_script","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-parse_script","(txout, i)","<p>parse script and collect address/txout mappings to index\n"],["parse_script","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-parse_script","(txout, i)","<p>parse script and collect address/txout mappings to index\n"],["parse_script","Object","Object.html#method-i-parse_script","(script)",""],["parse_sig","Bitcoin::Script","Bitcoin/Script.html#method-i-parse_sig","(sig)",""],["parse_sigs","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-i-parse_sigs","(sigs)",""],["parse_txdist","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-i-parse_txdist","(txdist)",""],["parse_version","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_version","(payload)",""],["pay_to_script_hash","Bitcoin::Script","Bitcoin/Script.html#method-i-pay_to_script_hash","(check_callback)","<p>pay_to_script_hash: en.bitcoin.it/wiki/BIP_0016\n<p>&lt;sig&gt; {&lt;pub&gt; OP_CHECKSIG} | OP_HASH160 &lt;script_hash&gt; …\n"],["persist_addrs","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-persist_addrs","(addrs)","<p>bulk-store addresses and txout mappings\n"],["persist_block","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-persist_block","(blk, chain, depth, prev_work = 0)",""],["persist_block","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-persist_block","(blk, chain, depth, prev_work = 0)","<p>persist given block <code>blk</code> to storage.\n"],["persist_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-persist_block","(blk)","<p>persist given block <code>blk</code> to storage.\n"],["persist_block","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-persist_block","(blk, chain, depth, prev_work = 0)","<p>persist given block <code>blk</code> to storage.\n"],["persist_transactions","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-persist_transactions","(txs, block_id, depth)",""],["ping_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-ping_pkt","(nonce = rand(0xffffffff))",""],["pk_script=","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-pk_script-3D","(script)","<p>set pk_script and pk_script_length\n"],["pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-pkt","(command, payload)",""],["pkt","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-c-pkt","(*addrs)",""],["pong_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-pong_pkt","(nonce)",""],["pop_int","Bitcoin::Script","Bitcoin/Script.html#method-i-pop_int","(count=1)",""],["post_init","Bitcoin::Connection","Bitcoin/Connection.html#method-i-post_init","()",""],["post_init","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-i-post_init","()","<p>call <code>connected</code> callback\n"],["post_init","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-post_init","()","<p>check if connection is wanted, begin handshake if it is, disconnect if not\n"],["post_init","Connection","Connection.html#method-i-post_init","()",""],["post_init","SimpleNode::Connection","SimpleNode/Connection.html#method-i-post_init","()",""],["prev_block","Bitcoin::Builder::BlockBuilder","Bitcoin/Builder/BlockBuilder.html#method-i-prev_block","(hash)","<p>set the hash of the previous block.\n"],["prev_block_hex","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-prev_block_hex","()",""],["prev_hash","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-prev_hash","()",""],["prev_out","Bitcoin::Builder::TxInBuilder","Bitcoin/Builder/TxInBuilder.html#method-i-prev_out","(tx)","<p>previous transaction that contains the output we want to use.\n"],["prev_out","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-prev_out","()","<p>check that all prev_outs exist (and are in a block in the main chain, or\nthe current block; see #prev_txs …\n"],["prev_out_index","Bitcoin::Builder::TxInBuilder","Bitcoin/Builder/TxInBuilder.html#method-i-prev_out_index","(i)","<p>index of the output in the #prev_out transaction.\n"],["prev_txs","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-prev_txs","()","<p>collect prev_txs needed to verify the inputs of this tx. only returns tx\nthat are in a block in the main …\n"],["previous_output","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-previous_output","()","<p>previous output in hex\n"],["priv","Bitcoin::Key","Bitcoin/Key.html#method-i-priv","()","<p>Get the private key (in hex).\n"],["priv=","Bitcoin::Key","Bitcoin/Key.html#method-i-priv-3D","(priv)","<p>Set the private key to <code>priv</code> (in hex).\n"],["private_key_hex","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private_key_hex","()",""],["process_pkt","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-process_pkt","(command, payload)",""],["pub","Bitcoin::Key","Bitcoin/Key.html#method-i-pub","()","<p>Get the public key (in hex). In case the key was initialized with only a\nprivate key, the public key …\n"],["pub=","Bitcoin::Key","Bitcoin/Key.html#method-i-pub-3D","(pub)","<p>Set the public key (in hex).\n"],["pub_compressed","Bitcoin::Key","Bitcoin/Key.html#method-i-pub_compressed","()",""],["pub_uncompressed","Bitcoin::Key","Bitcoin/Key.html#method-i-pub_uncompressed","()",""],["pubkey_to_address","Bitcoin::Util","Bitcoin/Util.html#method-i-pubkey_to_address","(pubkey)",""],["public_key_hex","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public_key_hex","()",""],["push_notification","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-push_notification","(channel, message)",""],["query_blocks","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-query_blocks","()",""],["queue","Gtk","Gtk.html#method-c-queue","(&block)",""],["queue_inv","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-queue_inv","(inv)","<p>queue inv, caching the most current ones\n"],["random","Array","Array.html#method-i-random","(weights=nil)",""],["read_binary_file","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-read_binary_file","(path)",""],["recalc_block_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-recalc_block_hash","()","<p>recalculate the block hash\n"],["receive_data","Bitcoin::Connection","Bitcoin/Connection.html#method-i-receive_data","(data)",""],["receive_data","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-i-receive_data","(data)","<p>receive response from server\n"],["receive_data","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-receive_data","(data)","<p>receive request from the client\n"],["receive_data","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-receive_data","(data)","<p>receive data from peer and invoke Protocol::Parser\n"],["receive_data","Connection","Connection.html#method-i-receive_data","(data)",""],["receive_data","ElectrumClient","ElectrumClient.html#method-i-receive_data","(data)",""],["receive_data","SimpleNode::Connection","SimpleNode/Connection.html#method-i-receive_data","(data)",""],["recipient","Bitcoin::Builder::ScriptBuilder","Bitcoin/Builder/ScriptBuilder.html#method-i-recipient","(*data)","<p>recipient(s) of the script. depending on the #type, either an address,\nhash160 pubkey, etc.\n"],["recover_compact_signature_to_key","Bitcoin::Key","Bitcoin/Key.html#method-c-recover_compact_signature_to_key","(data, signature_base64)","<p>Thanks to whoever wrote pastebin.com/bQtdDzHx for help with compact\nsignatures\n<p>Given <code>data</code> and a compact …\n"],["recover_public_key_from_signature","Bitcoin::OpenSSL_EC","Bitcoin/OpenSSL_EC.html#method-c-recover_public_key_from_signature","(message_hash, signature, rec_id, is_compressed)","<p>Given the components of a signature and a selector value, recover and\nreturn the public key that generated …\n"],["regenerate_key","Bitcoin::OpenSSL_EC","Bitcoin/OpenSSL_EC.html#method-c-regenerate_key","(private_key)","<p>resolve public from private key, using ffi and libssl.so example:\n\n<pre>keypair = Bitcoin.generate_key; Bitcoin::OpenSSL_EC.regenerate_key(keypair.first) ...</pre>\n"],["regenerate_pubkey","Bitcoin::Key","Bitcoin/Key.html#method-i-regenerate_pubkey","()","<p>Regenerate public key from the private key.\n"],["regenerate_public_key","Bitcoin::Util","Bitcoin/Util.html#method-i-regenerate_public_key","(private_key)",""],["register_monitor_callbacks","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-i-register_monitor_callbacks","()","<p>register callbacks for monitor\n"],["reorg","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-reorg","(new_side, new_main)",""],["reorg","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-reorg","(new_side, new_main)",""],["request","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-i-request","(cmd, *args)","<p>request command <code>cmd</code> with <code>args</code> from the server\n"],["request","ElectrumClient","ElectrumClient.html#method-i-request","(method, *params, &block)",""],["require_dependency","Bitcoin","Bitcoin.html#method-c-require_dependency","(name, opts = {})",""],["rescan","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-rescan","()",""],["rescan","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-rescan","()",""],["rescan","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-rescan","()",""],["reset","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-reset","()",""],["reset","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-reset","()","<p>reset database; delete all data\n"],["reset","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-reset","()","<p>reset the store; delete all data\n"],["reset","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-reset","()","<p>reset database; delete all data\n"],["respond","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-respond","(cmd, data)","<p>respond to a command; send serialized response to the client\n"],["respond","Connection","Connection.html#method-i-respond","(data)",""],["reverse_hth","Bitcoin::BinaryExtensions","Bitcoin/BinaryExtensions.html#method-i-reverse_hth","()",""],["run","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-run","()",""],["run","Bitcoin::Script","Bitcoin/Script.html#method-i-run","(block_timestamp=Time.now.to_i, &check_callback)","<p>run the script. <code>check_callback</code> is called for OP_CHECKSIG\noperations\n"],["run","Object","Object.html#method-i-run","()",""],["save_keys","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-save_keys","()","<p>Save keys to file.\n"],["script","Bitcoin::Builder","Bitcoin/Builder.html#method-i-script","()","<p>build a Bitcoin::Script. see ScriptBuilder for details.\n"],["script","Bitcoin::Builder::TxOutBuilder","Bitcoin/Builder/TxOutBuilder.html#method-i-script","(&block)","<p>add a script to the output (see ScriptBuilder).\n"],["script","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-script","()",""],["script=","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-script-3D","(script_sig)",""],["script=","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-script-3D","(script)",""],["script_sig=","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-script_sig-3D","(script_sig)","<p>set script_sig and script_sig_length\n"],["select","Bitcoin::Wallet::SimpleCoinSelector","Bitcoin/Wallet/SimpleCoinSelector.html#method-i-select","(value)","<p>select txouts needed to spend <code>value</code> btc (base units)\n"],["send_getaddr","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getaddr","()","<p>send <code>getaddr</code> message\n"],["send_getblocks","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getblocks","(locator = @node.store.get_locator)","<p>send <code>getblocks</code> message\n"],["send_getdata_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getdata_block","(hash)","<p>send +getdata block+ message for given block <code>hash</code>\n"],["send_getdata_tx","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getdata_tx","(hash)","<p>send +getdata tx+ message for given tx <code>hash</code>\n"],["send_getheaders","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getheaders","(locator = @node.store.get_locator)","<p>send <code>getheaders</code> message\n"],["send_inv","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_inv","(type, *hashes)","<p>send <code>inv</code> message with given <code>type</code> for given\n<code>obj</code>\n"],["send_ping","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_ping","()","<p>send <code>ping</code> message TODO: wait for pong and disconnect if it\ndoesn&#39;t arrive (and version is new enough) …\n"],["sequence","Bitcoin::Builder::TxInBuilder","Bitcoin/Builder/TxInBuilder.html#method-i-sequence","(s)","<p>specify sequence. this is usually not needed.\n"],["serialize","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-i-serialize","()",""],["serialize_transaction","Object","Object.html#method-i-serialize_transaction","(transaction)",""],["set_host","SimpleNode::Connection","SimpleNode/Connection.html#method-i-set_host","(host, port=8333)",""],["set_priv","Bitcoin::Key","Bitcoin/Key.html#method-i-set_priv","(priv)","<p>Set <code>priv</code> as the new private key (converting from hex).\n"],["set_pub","Bitcoin::Key","Bitcoin/Key.html#method-i-set_pub","(pub, compressed = nil)","<p>Set <code>pub</code> as the new public key (converting from hex).\n"],["set_store","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-set_store","()",""],["sha256","Bitcoin::Util","Bitcoin/Util.html#method-i-sha256","(hex)",""],["sha256","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-sha256","(d)","<p>compute a single SHA256 hash for <code>d</code>.\n"],["sign","Bitcoin::Key","Bitcoin/Key.html#method-i-sign","(data)","<p>Sign <code>data</code> with the key.\n\n<pre>key1 = Bitcoin::Key.generate\nsig = key.sign(&quot;some data&quot;)</pre>\n"],["sign_data","Bitcoin::Util","Bitcoin/Util.html#method-i-sign_data","(key, data)",""],["sign_inputs","Bitcoin::Wallet::TxDP","Bitcoin/Wallet/TxDP.html#method-i-sign_inputs","()",""],["signature_hash_for_input","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-signature_hash_for_input","(input_idx, outpoint_tx, script_pubkey=nil, hash_type=nil, drop_sigs=nil, script=nil)","<p>generate a signature hash for input <code>input_idx</code>. either pass the\n<code>outpoint_tx</code> or the <code>script_pubkey</code> directly. …\n"],["signature_key","Bitcoin::Builder::TxInBuilder","Bitcoin/Builder/TxInBuilder.html#method-i-signature_key","(key)","<p>Bitcoin::Key used to sign the signature_hash for the input. see\nBitcoin::Script.signature_hash_for_input …\n"],["signatures","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-signatures","()","<p>check that all input signatures are valid\n"],["spent","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-spent","()","<p>check that none of the prev_outs are already spent in the main chain\n"],["sqlite_pragmas","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-sqlite_pragmas","()","<p>set pragma options for sqlite (if it is sqlite)\n"],["standard","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-standard","()","<p>check that tx matches “standard” rules. this is currently disabled since\nnot all miners enforce …\n"],["start_timers","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-start_timers","()",""],["stop","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-stop","()",""],["stop_timers","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-stop_timers","()",""],["store_addr","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-store_addr","(txout_id, hash160)","<p>store address <code>hash160</code>\n"],["store_addrs","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-store_addrs","()",""],["store_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-store_block","(blk)","<p>store given block <code>blk</code>. determine branch/chain and dept of\nblock. trigger reorg if side branch becomes …\n"],["store_block","Connection","Connection.html#method-i-store_block","(*blks)",""],["store_name","Bitcoin::Namecoin::Storage::Backend","Bitcoin/Namecoin/Storage/Backend.html#method-i-store_name","(script, txout_id)","<p>if this is a namecoin script, update the names index\n"],["store_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-store_tx","(tx, validate = true)",""],["store_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-store_tx","(tx, validate = true)","<p>store transaction <code>tx</code>\n"],["store_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-store_tx","(tx, validate = true)","<p>store given <code>tx</code>\n"],["store_txin","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-store_txin","(tx_id, txin, idx)","<p>store input <code>txin</code>\n"],["store_txout","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-store_txout","(tx_id, txout, idx)","<p>store output <code>txout</code>\n"],["str_val","Object","Object.html#method-i-str_val","(val, pre = \"\")","<p>format value to be displayed\n"],["string","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-i-string","()",""],["subscribe","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-subscribe","(channel)",""],["symbolize","Bitcoin::Config","Bitcoin/Config.html#method-c-symbolize","(hash)","<p>Turn all keys in <code>hash</code> into symbols.\n"],["time","Bitcoin::Builder::BlockBuilder","Bitcoin/Builder/BlockBuilder.html#method-i-time","(time)","<p>set the block timestamp (defaults to current time).\n"],["time","Bitcoin::Logger::TimeLogger","Bitcoin/Logger/TimeLogger.html#method-i-time","(message)",""],["to_address_script","Bitcoin::Script","Bitcoin/Script.html#method-c-to_address_script","(address)",""],["to_base58","Bitcoin::Key","Bitcoin/Key.html#method-i-to_base58","()","<p>Export private key to base58 format. See also Key.from_base58\n"],["to_binary","Bitcoin::Script","Bitcoin/Script.html#method-i-to_binary","(chunks=nil)",""],["to_hash","Bitcoin::Protocol::AuxPow","Bitcoin/Protocol/AuxPow.html#method-i-to_hash","()",""],["to_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-to_hash","()","<p>convert to ruby hash (see also #from_hash)\n"],["to_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-to_hash","(options = {})","<p>convert to ruby hash (see also #from_hash)\n"],["to_hash","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-to_hash","(options = {})",""],["to_hash","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-to_hash","(options = {})",""],["to_hash160_script","Bitcoin::Script","Bitcoin/Script.html#method-c-to_hash160_script","(hash160)","<p>generate hash160 tx for given <code>address</code>\n"],["to_hex","OpenSSL::BN","OpenSSL/BN.html#method-i-to_hex","()",""],["to_hex","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-to_hex","()",""],["to_json","Bitcoin::Namecoin::Storage::Models::Name","Bitcoin/Namecoin/Storage/Models/Name.html#method-i-to_json","(opts = {})",""],["to_json","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-to_json","(options = {:space => ''}, *a)","<p>convert to json representation as seen in the block explorer. (see also\n#from_json)\n"],["to_json","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-to_json","(options = {:space => ''}, *a)","<p>generates rawblock json as seen in the block explorer.\n"],["to_json_file","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-to_json_file","(path)","<p>write json representation to a file (see also #to_json)\n"],["to_json_file","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-to_json_file","(path)","<p>write json representation to a file (see also #to_json)\n"],["to_mpi","OpenSSL::BN","OpenSSL/BN.html#method-i-to_mpi","()",""],["to_multisig_script","Bitcoin::Script","Bitcoin/Script.html#method-c-to_multisig_script","(m, *pubkeys)","<p>generate multisig tx for given <code>pubkeys</code>, expecting\n<code>m</code> signatures\n"],["to_multisig_script_sig","Bitcoin::Script","Bitcoin/Script.html#method-c-to_multisig_script_sig","(*sigs)",""],["to_name_firstupdate_script","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-c-to_name_firstupdate_script","(name, rand, value, address)","<p>generate name_firstupdate tx for given <code>name</code>,\n<code>rand</code>, <code>value</code> and <code>address</code>. OP_2 name\nrand value OP_2DROP  …\n"],["to_name_new_script","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-c-to_name_new_script","(caller, name, address)","<p>generate name_new tx for given <code>name</code> and <code>address</code>.\nthe <code>caller</code> should be the object that creates the script. …\n"],["to_name_update_script","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-c-to_name_update_script","(name, value, address)","<p>generate name_update script for given <code>name</code>, <code>value</code>\nand <code>address</code>. OP_3 name value OP_2DROP OP_DROP\n&lt;hash160_script&gt; …\n"],["to_null_payload","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-to_null_payload","()",""],["to_p2sh_script","Bitcoin::Script","Bitcoin/Script.html#method-c-to_p2sh_script","(p2sh)",""],["to_payload","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-i-to_payload","()",""],["to_payload","Bitcoin::Protocol::AuxPow","Bitcoin/Protocol/AuxPow.html#method-i-to_payload","()",""],["to_payload","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-to_payload","()","<p>convert to raw binary format\n"],["to_payload","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-to_payload","()","<p>output transaction in raw binary format\n"],["to_payload","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-to_payload","(script=@script_sig, sequence=@sequence)",""],["to_payload","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-to_payload","()",""],["to_payload","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-i-to_payload","()",""],["to_payload","Bitcoin::Script","Bitcoin/Script.html#method-i-to_payload","(chunks=nil)",""],["to_pkt","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-i-to_pkt","()",""],["to_pubkey_script","Bitcoin::Script","Bitcoin/Script.html#method-c-to_pubkey_script","(pubkey)","<p>generate pubkey tx script for given <code>pubkey</code>\n"],["to_pubkey_script_sig","Bitcoin::Script","Bitcoin/Script.html#method-c-to_pubkey_script_sig","(signature, pubkey)","<p>generate pubkey script sig for given <code>signature</code> and\n<code>pubkey</code>\n"],["to_s","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-to_s","()",""],["to_signature_pubkey_script","Bitcoin::Script","Bitcoin/Script.html#method-c-to_signature_pubkey_script","(*a)","<p>alias for #to_pubkey_script_sig\n"],["to_string","Bitcoin::Script","Bitcoin/Script.html#method-i-to_string","(chunks=nil)","<p>string representation of the script\n"],["total_in","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-total_in","()",""],["total_out","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-total_out","()",""],["transactions_context","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-transactions_context","()",""],["transactions_syntax","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-transactions_syntax","()","<p>check transactions\n"],["tree_view_col","Bitcoin::Gui::TreeView","Bitcoin/Gui/TreeView.html#method-i-tree_view_col","(renderer, title, key, val, &block)",""],["tx","Bitcoin::Builder","Bitcoin/Builder.html#method-i-tx","()",""],["tx","Bitcoin::Builder::BlockBuilder","Bitcoin/Builder/BlockBuilder.html#method-i-tx","()","<p>add transactions to the block (see TxBuilder).\n"],["tx","Bitcoin::Builder::TxBuilder","Bitcoin/Builder/TxBuilder.html#method-i-tx","()","<p>create the transaction according to values specified via DSL. sign each\ninput that has a signature key …\n"],["tx_data","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-tx_data","(tx)","<p>prepare transaction data for storage\n"],["tx_list","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-tx_list","()","<p>check that block has at least one tx (the coinbase)\n"],["tx_validators","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-tx_validators","()",""],["txin","Bitcoin::Builder::TxInBuilder","Bitcoin/Builder/TxInBuilder.html#method-i-txin","()","<p>create the txin according to values specified via DSL\n"],["txin_data","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-txin_data","(tx_id, txin, idx)","<p>prepare txin data for storage\n"],["txout_data","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-txout_data","(tx_id, txout, idx, script_type)","<p>prepare txout data for storage\n"],["type","Bitcoin::Builder::ScriptBuilder","Bitcoin/Builder/ScriptBuilder.html#method-i-type","(type)","<p>script type (:pubkey, :address/hash160, :multisig).\n"],["type","Bitcoin::Namecoin::Script","Bitcoin/Namecoin/Script.html#method-i-type","()","<p>get type of this tx\n"],["type","Bitcoin::Script","Bitcoin/Script.html#method-i-type","()","<p>get type of this tx\n"],["unbind","Bitcoin::Connection","Bitcoin/Connection.html#method-i-unbind","()",""],["unbind","Bitcoin::Network::CommandClient","Bitcoin/Network/CommandClient.html#method-i-unbind","()","<p>call <code>disconnected</code> callback and try to reconnect\n"],["unbind","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-unbind","()","<p>disconnect notification clients when connection is closed\n"],["unbind","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-unbind","()","<p>connection closed; notify listeners and cleanup connection from node\n"],["unbind","Connection","Connection.html#method-i-unbind","()",""],["unbind","ElectrumClient","ElectrumClient.html#method-i-unbind","()",""],["unbind","SimpleNode::Connection","SimpleNode/Connection.html#method-i-unbind","()",""],["unpack_address_field","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-i-unpack_address_field","(payload)",""],["unpack_var_int","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-unpack_var_int","(payload)",""],["unpack_var_int_array","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-unpack_var_int_array","(payload)",""],["unpack_var_int_from_io","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-unpack_var_int_from_io","(io)",""],["unpack_var_string","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-unpack_var_string","(payload)",""],["unpack_var_string_array","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-unpack_var_string_array","(payload)",""],["unpack_var_string_from_io","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-unpack_var_string_from_io","(buf)",""],["update","Bitcoin::Gui::AddrView","Bitcoin/Gui/AddrView.html#method-i-update","(addrs)",""],["update","Bitcoin::Gui::TxInView","Bitcoin/Gui/TxInView.html#method-i-update","(txins)",""],["update","Bitcoin::Gui::TxView","Bitcoin/Gui/TxView.html#method-i-update","(txouts)",""],["update_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-update_block","(hash, attrs)","<p>update <code>attrs</code> for block with given <code>hash</code>. typically\nused to update the chain value during reorg.\n"],["update_wallet_views","Bitcoin::Gui::Gui","Bitcoin/Gui/Gui.html#method-i-update_wallet_views","()",""],["uptime","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-uptime","()","<p>how long has this connection been open?\n"],["uptime","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-uptime","()",""],["uptime","Bitcoin::Protocol::Version","Bitcoin/Protocol/Version.html#method-i-uptime","()",""],["valid_address?","Bitcoin::Util","Bitcoin/Util.html#method-i-valid_address-3F","(address)","<p>check if given <code>address</code> is valid. this means having a correct\nversion byte, length and checksum.\n"],["valid_signature?","Bitcoin::Protocol::Alert","Bitcoin/Protocol/Alert.html#method-i-valid_signature-3F","()",""],["validate","Bitcoin::Validation::Block","Bitcoin/Validation/Block.html#method-i-validate","(opts = {})","<p>validate block rules. <code>opts</code> are:\n<p>rules &mdash; which rulesets to validate (default: [:syntax, :context])\n<p>raise_errors … &mdash; "],["validate","Bitcoin::Validation::Tx","Bitcoin/Validation/Tx.html#method-i-validate","(opts = {})","<p>validate tx rules. <code>opts</code> are:\n<p>rules &mdash; which rulesets to validate (default: [:syntax, :context])\n<p>raise_errors … &mdash; "],["validator","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-validator","(store, prev_block = nil)",""],["validator","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-validator","(store, block = nil)",""],["value","Bitcoin::Builder::TxOutBuilder","Bitcoin/Builder/TxOutBuilder.html#method-i-value","(value)","<p>set output value (in base units / “satoshis”)\n"],["value_to_address","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-c-value_to_address","(value, address)","<p>create output spending <code>value</code> btc (base units) to\n<code>address</code>\n"],["verack_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-verack_pkt","()",""],["verify","Bitcoin::Key","Bitcoin/Key.html#method-i-verify","(data, sig)","<p>Verify signature <code>sig</code> for <code>data</code>.\n\n<pre>key2 = Bitcoin::Key.new(nil, key1.pub)\nkey2.verify(&quot;some data&quot;, sig)</pre>\n"],["verify_input_signature","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-verify_input_signature","(in_idx, outpoint_tx, block_timestamp=Time.now.to_i)","<p>verify input signature <code>in_idx</code> against the corresponding output\nin <code>outpoint_tx</code>\n"],["verify_mrkl_root","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-verify_mrkl_root","()","<p>verify mrkl tree\n"],["verify_signature","Bitcoin::Util","Bitcoin/Util.html#method-i-verify_signature","(hash, signature, public_key)",""],["version","Bitcoin::Builder::BlockBuilder","Bitcoin/Builder/BlockBuilder.html#method-i-version","(v)","<p>specify block version. this is usually not necessary. defaults to 1.\n"],["version","Bitcoin::Builder::TxBuilder","Bitcoin/Builder/TxBuilder.html#method-i-version","(n)","<p>specify tx version. this is usually not necessary. defaults to 1.\n"],["version_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-version_pkt","(from_id, from=nil, to=nil, last_block=nil, time=nil, user_agent=nil, version=nil)",""],["wallet_preview","Bitcoin::Gui::Helpers","Bitcoin/Gui/Helpers.html#method-i-wallet_preview","(dialog, *args)",""],["weighted_sample","Array","Array.html#method-i-weighted_sample","(n, weights = nil)",""],["work_addrs","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_addrs","()","<p>check if the addr store is full and request new addrs from a random peer if\nit isn&#39;t\n"],["work_connect","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_connect","()","<p>check if there are enough connections and try to establish new ones if\nneeded\n"],["work_inv_queue","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_inv_queue","()","<p>check for new items in the inv queue and process them, unless the queue is\nalready full\n"],["work_queue","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_queue","()","<p>check for new items in the queue and process them\n"],["work_relay","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_relay","()",""],["wrap_block","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-wrap_block","(block)",""],["wrap_block","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-wrap_block","(block)","<p>wrap given <code>block</code> into Models::Block\n"],["wrap_block","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-wrap_block","(block)","<p>wrap given <code>block</code> into Models::Block\n"],["wrap_message_in_magic","Bitcoin::Key","Bitcoin/Key.html#method-c-wrap_message_in_magic","(message)",""],["wrap_name","Bitcoin::Namecoin::Storage::Backend","Bitcoin/Namecoin/Storage/Backend.html#method-i-wrap_name","(data)",""],["wrap_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-wrap_tx","(transaction)",""],["wrap_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-wrap_tx","(transaction, block_id = nil)","<p>wrap given <code>transaction</code> into Models::Transaction\n"],["wrap_tx","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-wrap_tx","(tx_hash)","<p>wrap given <code>transaction</code> into Models::Transaction\n"],["wrap_txin","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-wrap_txin","(input)",""],["wrap_txin","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-wrap_txin","(input)","<p>wrap given <code>input</code> into Models::TxIn\n"],["wrap_txout","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-wrap_txout","(output)",""],["wrap_txout","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-wrap_txout","(output)","<p>wrap given <code>output</code> into Models::TxOut\n"],["wrap_txout","Bitcoin::Storage::Backends::UtxoStore","Bitcoin/Storage/Backends/UtxoStore.html#method-i-wrap_txout","(utxo)","<p>wrap given <code>output</code> into Models::TxOut\n"],["COPYING","","COPYING.html","","<p>Copyright © 2011 Julian Langschaedel &lt;meta.rb@gmail.com&gt;\n<p>Permission is hereby granted, free of …\n"],["README","","README_rdoc.html","","<p>Bitcoin-ruby\n<p>This is a ruby library for interacting with the bitcoin protocol/network.\n<p>Some of the main …\n"],["CONFIG","","doc/CONFIG_rdoc.html","","<p>Config\n<p>All commands accept configuration, either via config file, or at the\ncommand line.\n<p>Locations\n"],["EXAMPLES","","doc/EXAMPLES_rdoc.html","","<p>Examples\n<p>There are a few demo scripts in `examples/` that might give you an idea\nwhere to start.\n<p>connect.rb … &mdash; "],["NAMECOIN","","doc/NAMECOIN_rdoc.html","","<p>Namecoin\n<p>Namecoin is almost fully supported.\n<p>connect to the network,\n"],["NODE","","doc/NODE_rdoc.html","","<p>NODE\n<p>Bitcoin Node. Connects to the network and downloads the blockchain into\nlocal storage.\n<p>Usage\n"],["STORAGE","","doc/STORAGE_rdoc.html","","<p>Storage\n<p>There is support for different storage backends, currently the `sequel`\nbackend is the most stable …\n"],["WALLET","","doc/WALLET_rdoc.html","","<p>WALLET\n<p>The wallet stores your keys/addresses, knows which transactions belong to\nthem, can create transactions, …\n"],["client.rb~","","lib/bitcoin/electrum/client_rb~.html","","<p>require &#39;eventmachine&#39; require &#39;json&#39;\n<p>class ElectrumClient &lt; EM::Connection\n\n<pre>DEFAULT_SERVERS ...</pre>\n"],["bitcoin-ruby.svg","","lib/bitcoin/gui/bitcoin-ruby_svg.html","","<p>&lt;!– Created with Inkscape (www.inkscape.org/) –&gt;\n<p>&lt;svg\n\n<pre> xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; ...</pre>\n"],["gui.builder","","lib/bitcoin/gui/gui_builder.html","","<p>&lt;interface&gt;\n\n<pre>&lt;!-- interface-requires gtk+ 3.0 --&gt;\n&lt;object class=&quot;GtkAboutDialog&quot; id=&quot;about_dialog&quot;&gt; ...</pre>\n"]]}}