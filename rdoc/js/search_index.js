var search_data = {"index":{"searchIndex":["array","bitcoin","config","connection","connectionhandler","key","logger","logwrapper","logger","network","commandhandler","connectionhandler","node","openssl_ec","p","protocol","addr","block","handler","parser","tx","txin","txout","versionpkt","script","storage","backends","activerecordstore","base","block","input","output","transaction","transactionsparent","dummystore","sequelmigrations","sequelstore","storagemodel","storebase","models","block","tx","txin","txout","util","wallet","deterministickeystore","keygenerator","simplecoinselector","simplekeystore","wallet","chain","hash","inventoryrequest","log4r","logger","openssl","bn","pkey","ec","point","==()","==()","==()","==()","==()","[]()","[]()","[]=()","[]=()","add_in()","add_out()","addr()","address_checksum?()","address_version()","addrs()","alive?()","base58_to_hex()","base58_to_int()","binary_from_hash()","binary_from_hash()","binary_from_json()","binary_from_json()","binary_from_string()","binary_hash()","bitcoin_elliptic_curve()","bitcoin_hash()","bitcoin_mrkl()","block_hash()","bn2mpi()","bts()","build_address()","build_payload()","check_nonce()","check_target()","checksum()","codehash_script()","coinbase?()","coinbase?()","connect()","connect()","connect()","connect_dns()","connect_dns_nslookup()","connect_dns_resolver()","connect_peer()","connect_random_from_dns()","create()","decode_compact_bits()","decode_target()","deep_merge()","delete()","drop_signatures()","encode_base58()","encode_compact_bits()","export()","export()","find_nonce()","format_uptime()","from_base58()","from_hash()","from_hash()","from_hex()","from_hex()","from_json()","from_json()","from_protocol()","from_protocol()","from_protocol()","from_protocol()","from_string()","generate()","generate()","generate_address()","generate_hash()","generate_key()","get()","get()","get_address()","get_address()","get_balance()","get_balance()","get_balance()","get_block()","get_block()","get_block()","get_block()","get_block()","get_block_by_depth()","get_block_by_depth()","get_block_by_depth()","get_block_by_depth()","get_block_by_id()","get_block_by_id()","get_block_by_id()","get_block_by_prev_hash()","get_block_by_prev_hash()","get_block_by_prev_hash()","get_block_by_tx()","get_block_by_tx()","get_block_by_tx()","get_block_depth()","get_change_addr()","get_depth()","get_depth()","get_depth()","get_depth()","get_genesis_block()","get_hash()","get_hash160()","get_hash160_address()","get_head()","get_head()","get_head()","get_head()","get_key()","get_locator()","get_new_addr()","get_next_block()","get_next_in()","get_prev_block()","get_prev_out()","get_pubkey()","get_pubkey_address()","get_selector()","get_tx()","get_tx()","get_tx()","get_tx()","get_tx()","get_tx()","get_tx_by_id()","get_tx_by_id()","get_tx_by_id()","get_txin_for_txout()","get_txin_for_txout()","get_txin_for_txout()","get_txout_for_txin()","get_txouts()","get_txouts_for_address()","get_txouts_for_hash160()","get_txouts_for_hash160()","get_txouts_for_pk_script()","get_txouts_for_pk_script()","get_txouts_for_pk_script()","get_unconfirmed_tx()","getblocks()","getdata_pkt()","getdata_pkt()","handle_addrs()","handle_config()","handle_connect()","handle_connections()","handle_error()","handle_getaddr()","handle_getblocks()","handle_help()","handle_info()","handle_monitor()","handle_relay_tx()","handle_stop()","has_block()","has_block()","has_block()","has_tx()","has_tx()","has_tx()","hash160()","hash160()","hash160_from_address()","hash160_to_address()","hash_from_payload()","hash_mrkl_tree()","header_info()","htb()","htb()","htb()","htb()","htb()","htb()","htb()","hth()","hth()","hth()","hth()","hth()","hth()","hth()","hth()","hth()","import()","included()","init_epoll()","init_ffi_ssl()","inspect_key()","int_to_base58()","inv_pkt()","inv_pkt()","invalid()","invalid?()","is_coinbase?()","is_hash160?()","is_pubkey?()","is_send_to_ip?()","is_standard?()","key()","key()","keys()","keys()","level=()","level=()","list()","load()","load_file()","load_keys()","log()","log()","log()","log()","log()","log()","merge()","method_missing()","migrate()","network()","network=()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_key()","new_key()","next()","next_input()","on_addr()","on_addr()","on_addr()","on_block()","on_block()","on_block()","on_get_block()","on_get_block()","on_get_block()","on_get_transaction()","on_get_transaction()","on_get_transaction()","on_handshake_begin()","on_handshake_begin()","on_handshake_complete()","on_handshake_complete()","on_headers()","on_inv_block()","on_inv_block()","on_inv_block()","on_inv_transaction()","on_inv_transaction()","on_inv_transaction()","on_tx()","on_tx()","on_tx()","on_verack()","on_version()","on_version()","op_0()","op_1()","op_add()","op_booland()","op_checkhashverify()","op_checkmultisig()","op_checksig()","op_checksigverify()","op_codeseparator()","op_drop()","op_dup()","op_equal()","op_equalverify()","op_fromaltstack()","op_greaterthanorequal()","op_hash160()","op_hash256()","op_nop()","op_ripemd160()","op_sha1()","op_sha256()","op_sub()","op_swap()","op_toaltstack()","op_tuck()","op_verify()","open_key()","output_value()","pack_var_int()","pack_var_int()","parse()","parse()","parse()","parse_addr()","parse_buffer()","parse_data()","parse_data()","parse_data()","parse_data()","parse_headers()","parse_inv()","parse_ip()","parse_version()","pkt()","pkt()","pkt()","post_init()","post_init()","prev()","previous_output()","previous_output()","priv()","priv=()","private_key_hex()","process_pkt()","pub()","pub=()","pubkey_to_address()","public_key_hex()","query_blocks()","queue_inv()","random()","recalc_block_hash()","receive_data()","receive_data()","receive_data()","regenerate_key()","regenerate_pubkey()","regenerate_public_key()","relay_tx()","reset()","reset()","reset()","reset()","respond()","run()","run()","save()","save()","save()","save()","save()","save_keys()","script_sig=()","select()","send_getaddr()","send_getblocks()","send_getdata_block()","send_getdata_tx()","send_getheaders()","send_inv()","set_priv()","set_pub()","set_store()","sha256()","sha256()","sign()","sign_data()","signature_hash_for_input()","stop()","store_block()","store_block()","store_block()","store_block()","store_tx()","store_tx()","store_tx()","store_tx()","store_txin()","store_txout()","symbolize()","to_address_script()","to_base58()","to_hash()","to_hash()","to_hash()","to_hash()","to_hex()","to_hex()","to_json()","to_json()","to_mpi()","to_payload()","to_payload()","to_payload()","to_protocol()","to_protocol()","to_s()","to_signature_pubkey_script()","to_string()","total_value()","transactions()","tx()","unbind()","unbind()","unbind()","unpack_var_int()","unpack_var_int()","uptime()","uptime()","valid_address?()","value()","value_to_address()","verack_pkt()","verack_pkt()","verify()","verify_input_signature()","verify_signature()","version_pkt()","version_pkt()","weighted_sample()","work_addrs()","work_connect()","work_inv_queue()","work_queue()","wrap_block()","wrap_block()","wrap_tx()","wrap_tx()","wrap_txin()","wrap_txin()","wrap_txout()","wrap_txout()","copying","readme"],"longSearchIndex":["array","bitcoin","bitcoin::config","bitcoin::connection","bitcoin::connectionhandler","bitcoin::key","bitcoin::logger","bitcoin::logger::logwrapper","bitcoin::logger::logger","bitcoin::network","bitcoin::network::commandhandler","bitcoin::network::connectionhandler","bitcoin::network::node","bitcoin::openssl_ec","bitcoin::p","bitcoin::protocol","bitcoin::protocol::addr","bitcoin::protocol::block","bitcoin::protocol::handler","bitcoin::protocol::parser","bitcoin::protocol::tx","bitcoin::protocol::txin","bitcoin::protocol::txout","bitcoin::protocol::versionpkt","bitcoin::script","bitcoin::storage","bitcoin::storage::backends","bitcoin::storage::backends::activerecordstore","bitcoin::storage::backends::activerecordstore::base","bitcoin::storage::backends::activerecordstore::block","bitcoin::storage::backends::activerecordstore::input","bitcoin::storage::backends::activerecordstore::output","bitcoin::storage::backends::activerecordstore::transaction","bitcoin::storage::backends::activerecordstore::transactionsparent","bitcoin::storage::backends::dummystore","bitcoin::storage::backends::sequelmigrations","bitcoin::storage::backends::sequelstore","bitcoin::storage::backends::storagemodel","bitcoin::storage::backends::storebase","bitcoin::storage::models","bitcoin::storage::models::block","bitcoin::storage::models::tx","bitcoin::storage::models::txin","bitcoin::storage::models::txout","bitcoin::util","bitcoin::wallet","bitcoin::wallet::deterministickeystore","bitcoin::wallet::keygenerator","bitcoin::wallet::simplecoinselector","bitcoin::wallet::simplekeystore","bitcoin::wallet::wallet","chain","hash","inventoryrequest","log4r","log4r::logger","openssl","openssl::bn","openssl::pkey","openssl::pkey::ec","openssl::pkey::ec::point","bitcoin::key#==()","bitcoin::protocol::block#==()","bitcoin::protocol::tx#==()","bitcoin::protocol::txin#==()","bitcoin::protocol::txout#==()","bitcoin::protocol::txin#[]()","bitcoin::protocol::txout#[]()","bitcoin::protocol::txin#[]=()","bitcoin::protocol::txout#[]=()","bitcoin::protocol::tx#add_in()","bitcoin::protocol::tx#add_out()","bitcoin::key#addr()","bitcoin::util#address_checksum?()","bitcoin::util#address_version()","bitcoin::wallet::wallet#addrs()","bitcoin::protocol::addr#alive?()","bitcoin::util#base58_to_hex()","bitcoin::util#base58_to_int()","bitcoin::protocol::block::binary_from_hash()","bitcoin::protocol::tx::binary_from_hash()","bitcoin::protocol::block::binary_from_json()","bitcoin::protocol::tx::binary_from_json()","bitcoin::script::binary_from_string()","bitcoin::protocol::tx#binary_hash()","bitcoin::util#bitcoin_elliptic_curve()","bitcoin::util#bitcoin_hash()","bitcoin::util#bitcoin_mrkl()","bitcoin::util#block_hash()","openssl::pkey::ec::point::bn2mpi()","bitcoin::storage::backends::storagemodel#bts()","bitcoin::protocol::versionpkt::build_address()","bitcoin::protocol::versionpkt::build_payload()","bitcoin::wallet::keygenerator#check_nonce()","bitcoin::wallet::keygenerator#check_target()","bitcoin::util#checksum()","bitcoin::script#codehash_script()","bitcoin::protocol::txin#coinbase?()","bitcoin::storage::backends::activerecordstore::input#coinbase?()","bitcoin::connection::connect()","bitcoin::storage::backends::activerecordstore#connect()","bitcoin::storage::backends::sequelstore#connect()","bitcoin::network::node#connect_dns()","bitcoin::network::node#connect_dns_nslookup()","bitcoin::network::node#connect_dns_resolver()","bitcoin::network::node#connect_peer()","bitcoin::connection::connect_random_from_dns()","bitcoin::logger::create()","bitcoin::util#decode_compact_bits()","bitcoin::util#decode_target()","hash#deep_merge()","bitcoin::wallet::simplekeystore#delete()","bitcoin::script::drop_signatures()","bitcoin::util#encode_base58()","bitcoin::util#encode_compact_bits()","bitcoin::wallet::deterministickeystore#export()","bitcoin::wallet::simplekeystore#export()","bitcoin::wallet::keygenerator#find_nonce()","bitcoin::network::commandhandler#format_uptime()","bitcoin::key::from_base58()","bitcoin::protocol::block::from_hash()","bitcoin::protocol::tx::from_hash()","openssl::bn::from_hex()","openssl::pkey::ec::point::from_hex()","bitcoin::protocol::block::from_json()","bitcoin::protocol::tx::from_json()","bitcoin::storage::backends::activerecordstore::block::from_protocol()","bitcoin::storage::backends::activerecordstore::input::from_protocol()","bitcoin::storage::backends::activerecordstore::output::from_protocol()","bitcoin::storage::backends::activerecordstore::transaction::from_protocol()","bitcoin::script::from_string()","bitcoin::key#generate()","bitcoin::key::generate()","bitcoin::util#generate_address()","bitcoin::protocol::tx#generate_hash()","bitcoin::util#generate_key()","bitcoin::storage::backends::activerecordstore::block::get()","bitcoin::storage::backends::activerecordstore::transaction::get()","bitcoin::script#get_address()","bitcoin::storage::models::txout#get_address()","bitcoin::storage::backends::activerecordstore#get_balance()","bitcoin::storage::backends::storebase#get_balance()","bitcoin::wallet::wallet#get_balance()","bitcoin::storage::backends::activerecordstore#get_block()","bitcoin::storage::backends::dummystore#get_block()","bitcoin::storage::backends::sequelstore#get_block()","bitcoin::storage::backends::storebase#get_block()","bitcoin::storage::models::tx#get_block()","bitcoin::storage::backends::activerecordstore#get_block_by_depth()","bitcoin::storage::backends::dummystore#get_block_by_depth()","bitcoin::storage::backends::sequelstore#get_block_by_depth()","bitcoin::storage::backends::storebase#get_block_by_depth()","bitcoin::storage::backends::dummystore#get_block_by_id()","bitcoin::storage::backends::sequelstore#get_block_by_id()","bitcoin::storage::backends::storebase#get_block_by_id()","bitcoin::storage::backends::dummystore#get_block_by_prev_hash()","bitcoin::storage::backends::sequelstore#get_block_by_prev_hash()","bitcoin::storage::backends::storebase#get_block_by_prev_hash()","bitcoin::storage::backends::dummystore#get_block_by_tx()","bitcoin::storage::backends::sequelstore#get_block_by_tx()","bitcoin::storage::backends::storebase#get_block_by_tx()","bitcoin::storage::backends::activerecordstore#get_block_depth()","bitcoin::wallet::wallet#get_change_addr()","bitcoin::storage::backends::activerecordstore#get_depth()","bitcoin::storage::backends::dummystore#get_depth()","bitcoin::storage::backends::sequelstore#get_depth()","bitcoin::storage::backends::storebase#get_depth()","bitcoin::network::connectionhandler#get_genesis_block()","bitcoin::wallet::keygenerator#get_hash()","bitcoin::script#get_hash160()","bitcoin::script#get_hash160_address()","bitcoin::storage::backends::activerecordstore#get_head()","bitcoin::storage::backends::dummystore#get_head()","bitcoin::storage::backends::sequelstore#get_head()","bitcoin::storage::backends::storebase#get_head()","bitcoin::wallet::keygenerator#get_key()","bitcoin::storage::backends::storebase#get_locator()","bitcoin::wallet::wallet#get_new_addr()","bitcoin::storage::models::block#get_next_block()","bitcoin::storage::models::txout#get_next_in()","bitcoin::storage::models::block#get_prev_block()","bitcoin::storage::models::txin#get_prev_out()","bitcoin::script#get_pubkey()","bitcoin::script#get_pubkey_address()","bitcoin::wallet::wallet#get_selector()","bitcoin::storage::backends::activerecordstore#get_tx()","bitcoin::storage::backends::dummystore#get_tx()","bitcoin::storage::backends::sequelstore#get_tx()","bitcoin::storage::backends::storebase#get_tx()","bitcoin::storage::models::txin#get_tx()","bitcoin::storage::models::txout#get_tx()","bitcoin::storage::backends::dummystore#get_tx_by_id()","bitcoin::storage::backends::sequelstore#get_tx_by_id()","bitcoin::storage::backends::storebase#get_tx_by_id()","bitcoin::storage::backends::dummystore#get_txin_for_txout()","bitcoin::storage::backends::sequelstore#get_txin_for_txout()","bitcoin::storage::backends::storebase#get_txin_for_txout()","bitcoin::storage::backends::sequelstore#get_txout_for_txin()","bitcoin::wallet::wallet#get_txouts()","bitcoin::storage::backends::storebase#get_txouts_for_address()","bitcoin::storage::backends::dummystore#get_txouts_for_hash160()","bitcoin::storage::backends::sequelstore#get_txouts_for_hash160()","bitcoin::storage::backends::dummystore#get_txouts_for_pk_script()","bitcoin::storage::backends::sequelstore#get_txouts_for_pk_script()","bitcoin::storage::backends::storebase#get_txouts_for_pk_script()","bitcoin::storage::backends::sequelstore#get_unconfirmed_tx()","bitcoin::network::node#getblocks()","bitcoin::protocol::getdata_pkt()","bitcoin::protocol::getdata_pkt()","bitcoin::network::commandhandler#handle_addrs()","bitcoin::network::commandhandler#handle_config()","bitcoin::network::commandhandler#handle_connect()","bitcoin::network::commandhandler#handle_connections()","bitcoin::protocol::parser#handle_error()","bitcoin::network::commandhandler#handle_getaddr()","bitcoin::network::commandhandler#handle_getblocks()","bitcoin::network::commandhandler#handle_help()","bitcoin::network::commandhandler#handle_info()","bitcoin::network::commandhandler#handle_monitor()","bitcoin::network::commandhandler#handle_relay_tx()","bitcoin::network::commandhandler#handle_stop()","bitcoin::storage::backends::dummystore#has_block()","bitcoin::storage::backends::sequelstore#has_block()","bitcoin::storage::backends::storebase#has_block()","bitcoin::storage::backends::dummystore#has_tx()","bitcoin::storage::backends::sequelstore#has_tx()","bitcoin::storage::backends::storebase#has_tx()","bitcoin::key#hash160()","bitcoin::util#hash160()","bitcoin::util#hash160_from_address()","bitcoin::util#hash160_to_address()","bitcoin::protocol::tx#hash_from_payload()","bitcoin::util#hash_mrkl_tree()","bitcoin::protocol::block#header_info()","bitcoin::connectionhandler#htb()","bitcoin::network::connectionhandler#htb()","bitcoin::protocol::block#htb()","bitcoin::protocol::tx::htb()","bitcoin::storage::backends::sequelstore#htb()","bitcoin::storage::backends::storagemodel#htb()","bitcoin::util#htb()","bitcoin::connectionhandler#hth()","bitcoin::network::connectionhandler#hth()","bitcoin::protocol::block#hth()","bitcoin::protocol::handler#hth()","bitcoin::protocol::parser#hth()","bitcoin::protocol::tx#hth()","bitcoin::storage::backends::sequelstore#hth()","bitcoin::storage::backends::storagemodel#hth()","bitcoin::util#hth()","bitcoin::wallet::simplekeystore#import()","bitcoin::storage::backends::activerecordstore::base::included()","bitcoin::network::node#init_epoll()","bitcoin::openssl_ec::init_ffi_ssl()","bitcoin::util#inspect_key()","bitcoin::util#int_to_base58()","bitcoin::protocol::inv_pkt()","bitcoin::protocol::inv_pkt()","bitcoin::script#invalid()","bitcoin::script#invalid?()","bitcoin::storage::backends::activerecordstore::transaction#is_coinbase?()","bitcoin::script#is_hash160?()","bitcoin::script#is_pubkey?()","bitcoin::script#is_send_to_ip?()","bitcoin::script#is_standard?()","bitcoin::wallet::deterministickeystore#key()","bitcoin::wallet::simplekeystore#key()","bitcoin::wallet::deterministickeystore#keys()","bitcoin::wallet::simplekeystore#keys()","bitcoin::logger::logger#level=()","log4r::logger#level=()","bitcoin::wallet::wallet#list()","bitcoin::config::load()","bitcoin::config::load_file()","bitcoin::wallet::simplekeystore#load_keys()","bitcoin::network::commandhandler#log()","bitcoin::network::connectionhandler#log()","bitcoin::storage::log()","bitcoin::storage::backends::activerecordstore::base#log()","bitcoin::storage::backends::storagemodel#log()","bitcoin::storage::backends::storebase#log()","bitcoin::config::merge()","bitcoin::logger::logwrapper#method_missing()","bitcoin::storage::backends::sequelmigrations#migrate()","bitcoin::network()","bitcoin::network=()","bitcoin::connection::new()","bitcoin::key::new()","bitcoin::logger::logwrapper::new()","bitcoin::logger::logger::new()","bitcoin::network::commandhandler::new()","bitcoin::network::connectionhandler::new()","bitcoin::network::node::new()","bitcoin::protocol::addr::new()","bitcoin::protocol::block::new()","bitcoin::protocol::parser::new()","bitcoin::protocol::tx::new()","bitcoin::protocol::txin::new()","bitcoin::protocol::txout::new()","bitcoin::script::new()","bitcoin::storage::backends::activerecordstore::new()","bitcoin::storage::backends::dummystore::new()","bitcoin::storage::backends::sequelstore::new()","bitcoin::storage::backends::storebase::new()","bitcoin::storage::models::block::new()","bitcoin::storage::models::tx::new()","bitcoin::storage::models::txin::new()","bitcoin::storage::models::txout::new()","bitcoin::wallet::deterministickeystore::new()","bitcoin::wallet::keygenerator::new()","bitcoin::wallet::simplecoinselector::new()","bitcoin::wallet::simplekeystore::new()","bitcoin::wallet::wallet::new()","bitcoin::wallet::deterministickeystore#new_key()","bitcoin::wallet::simplekeystore#new_key()","bitcoin::storage::backends::activerecordstore::block#next()","bitcoin::storage::backends::activerecordstore::output#next_input()","bitcoin::connectionhandler#on_addr()","bitcoin::network::connectionhandler#on_addr()","bitcoin::protocol::handler#on_addr()","bitcoin::connectionhandler#on_block()","bitcoin::network::connectionhandler#on_block()","bitcoin::protocol::handler#on_block()","bitcoin::connectionhandler#on_get_block()","bitcoin::network::connectionhandler#on_get_block()","bitcoin::protocol::handler#on_get_block()","bitcoin::connectionhandler#on_get_transaction()","bitcoin::network::connectionhandler#on_get_transaction()","bitcoin::protocol::handler#on_get_transaction()","bitcoin::connectionhandler#on_handshake_begin()","bitcoin::network::connectionhandler#on_handshake_begin()","bitcoin::connectionhandler#on_handshake_complete()","bitcoin::network::connectionhandler#on_handshake_complete()","bitcoin::network::connectionhandler#on_headers()","bitcoin::connectionhandler#on_inv_block()","bitcoin::network::connectionhandler#on_inv_block()","bitcoin::protocol::handler#on_inv_block()","bitcoin::connectionhandler#on_inv_transaction()","bitcoin::network::connectionhandler#on_inv_transaction()","bitcoin::protocol::handler#on_inv_transaction()","bitcoin::connectionhandler#on_tx()","bitcoin::network::connectionhandler#on_tx()","bitcoin::protocol::handler#on_tx()","bitcoin::network::connectionhandler#on_verack()","bitcoin::connectionhandler#on_version()","bitcoin::network::connectionhandler#on_version()","bitcoin::script#op_0()","bitcoin::script#op_1()","bitcoin::script#op_add()","bitcoin::script#op_booland()","bitcoin::script#op_checkhashverify()","bitcoin::script#op_checkmultisig()","bitcoin::script#op_checksig()","bitcoin::script#op_checksigverify()","bitcoin::script#op_codeseparator()","bitcoin::script#op_drop()","bitcoin::script#op_dup()","bitcoin::script#op_equal()","bitcoin::script#op_equalverify()","bitcoin::script#op_fromaltstack()","bitcoin::script#op_greaterthanorequal()","bitcoin::script#op_hash160()","bitcoin::script#op_hash256()","bitcoin::script#op_nop()","bitcoin::script#op_ripemd160()","bitcoin::script#op_sha1()","bitcoin::script#op_sha256()","bitcoin::script#op_sub()","bitcoin::script#op_swap()","bitcoin::script#op_toaltstack()","bitcoin::script#op_tuck()","bitcoin::script#op_verify()","bitcoin::util#open_key()","bitcoin::storage::backends::activerecordstore::transaction#output_value()","bitcoin::protocol::pack_var_int()","bitcoin::protocol::pack_var_int()","bitcoin::protocol::parser#parse()","bitcoin::protocol::versionpkt::parse()","bitcoin::script#parse()","bitcoin::protocol::parser#parse_addr()","bitcoin::protocol::parser#parse_buffer()","bitcoin::protocol::block#parse_data()","bitcoin::protocol::tx#parse_data()","bitcoin::protocol::txin#parse_data()","bitcoin::protocol::txout#parse_data()","bitcoin::protocol::parser#parse_headers()","bitcoin::protocol::parser#parse_inv()","bitcoin::protocol::versionpkt::parse_ip()","bitcoin::protocol::parser#parse_version()","bitcoin::protocol::pkt()","bitcoin::protocol::pkt()","bitcoin::protocol::addr::pkt()","bitcoin::connection#post_init()","bitcoin::network::connectionhandler#post_init()","bitcoin::storage::backends::activerecordstore::block#prev()","bitcoin::protocol::txin#previous_output()","bitcoin::storage::backends::activerecordstore::input#previous_output()","bitcoin::key#priv()","bitcoin::key#priv=()","openssl::pkey::ec#private_key_hex()","bitcoin::protocol::parser#process_pkt()","bitcoin::key#pub()","bitcoin::key#pub=()","bitcoin::util#pubkey_to_address()","openssl::pkey::ec#public_key_hex()","bitcoin::connectionhandler#query_blocks()","bitcoin::network::node#queue_inv()","array#random()","bitcoin::protocol::block#recalc_block_hash()","bitcoin::connection#receive_data()","bitcoin::network::commandhandler#receive_data()","bitcoin::network::connectionhandler#receive_data()","bitcoin::openssl_ec::regenerate_key()","bitcoin::key#regenerate_pubkey()","bitcoin::util#regenerate_public_key()","bitcoin::network::node#relay_tx()","bitcoin::storage::backends::activerecordstore#reset()","bitcoin::storage::backends::dummystore#reset()","bitcoin::storage::backends::sequelstore#reset()","bitcoin::storage::backends::storebase#reset()","bitcoin::network::commandhandler#respond()","bitcoin::network::node#run()","bitcoin::script#run()","bitcoin::storage::backends::activerecordstore::block#save()","bitcoin::storage::backends::activerecordstore::input#save()","bitcoin::storage::backends::activerecordstore::output#save()","bitcoin::storage::backends::activerecordstore::transaction#save()","bitcoin::storage::backends::activerecordstore::transactionsparent#save()","bitcoin::wallet::simplekeystore#save_keys()","bitcoin::protocol::txin#script_sig=()","bitcoin::wallet::simplecoinselector#select()","bitcoin::network::connectionhandler#send_getaddr()","bitcoin::network::connectionhandler#send_getblocks()","bitcoin::network::connectionhandler#send_getdata_block()","bitcoin::network::connectionhandler#send_getdata_tx()","bitcoin::network::connectionhandler#send_getheaders()","bitcoin::network::connectionhandler#send_inv()","bitcoin::key#set_priv()","bitcoin::key#set_pub()","bitcoin::network::node#set_store()","bitcoin::util#sha256()","bitcoin::wallet::keygenerator#sha256()","bitcoin::key#sign()","bitcoin::util#sign_data()","bitcoin::protocol::tx#signature_hash_for_input()","bitcoin::network::node#stop()","bitcoin::storage::backends::activerecordstore#store_block()","bitcoin::storage::backends::dummystore#store_block()","bitcoin::storage::backends::sequelstore#store_block()","bitcoin::storage::backends::storebase#store_block()","bitcoin::storage::backends::activerecordstore#store_tx()","bitcoin::storage::backends::dummystore#store_tx()","bitcoin::storage::backends::sequelstore#store_tx()","bitcoin::storage::backends::storebase#store_tx()","bitcoin::storage::backends::sequelstore#store_txin()","bitcoin::storage::backends::sequelstore#store_txout()","bitcoin::config::symbolize()","bitcoin::script::to_address_script()","bitcoin::key#to_base58()","bitcoin::protocol::block#to_hash()","bitcoin::protocol::tx#to_hash()","bitcoin::storage::backends::activerecordstore::block#to_hash()","bitcoin::storage::backends::activerecordstore::transaction#to_hash()","openssl::bn#to_hex()","openssl::pkey::ec::point#to_hex()","bitcoin::protocol::block#to_json()","bitcoin::protocol::tx#to_json()","openssl::bn#to_mpi()","bitcoin::protocol::addr#to_payload()","bitcoin::protocol::block#to_payload()","bitcoin::protocol::tx#to_payload()","bitcoin::storage::backends::activerecordstore::block#to_protocol()","bitcoin::storage::backends::activerecordstore::transaction#to_protocol()","bitcoin::storage::backends::dummystore#to_s()","bitcoin::script::to_signature_pubkey_script()","bitcoin::script#to_string()","bitcoin::storage::backends::activerecordstore::block#total_value()","bitcoin::storage::backends::activerecordstore::block#transactions()","bitcoin::wallet::wallet#tx()","bitcoin::connection#unbind()","bitcoin::network::commandhandler#unbind()","bitcoin::network::connectionhandler#unbind()","bitcoin::protocol::unpack_var_int()","bitcoin::protocol::unpack_var_int()","bitcoin::network::connectionhandler#uptime()","bitcoin::network::node#uptime()","bitcoin::util#valid_address?()","bitcoin::storage::backends::activerecordstore::output#value()","bitcoin::protocol::txout::value_to_address()","bitcoin::protocol::verack_pkt()","bitcoin::protocol::verack_pkt()","bitcoin::key#verify()","bitcoin::protocol::tx#verify_input_signature()","bitcoin::util#verify_signature()","bitcoin::protocol::version_pkt()","bitcoin::protocol::version_pkt()","array#weighted_sample()","bitcoin::network::node#work_addrs()","bitcoin::network::node#work_connect()","bitcoin::network::node#work_inv_queue()","bitcoin::network::node#work_queue()","bitcoin::storage::backends::dummystore#wrap_block()","bitcoin::storage::backends::sequelstore#wrap_block()","bitcoin::storage::backends::dummystore#wrap_tx()","bitcoin::storage::backends::sequelstore#wrap_tx()","bitcoin::storage::backends::dummystore#wrap_txin()","bitcoin::storage::backends::sequelstore#wrap_txin()","bitcoin::storage::backends::dummystore#wrap_txout()","bitcoin::storage::backends::sequelstore#wrap_txout()","",""],"info":[["Array","","Array.html","",""],["Bitcoin","","Bitcoin.html","",""],["Bitcoin::Config","","Bitcoin/Config.html","","<p>Load config files, merge options, etc.\n<p>Multiple config files are loaded in order, and their settings merged …\n"],["Bitcoin::Connection","","Bitcoin/Connection.html","",""],["Bitcoin::ConnectionHandler","","Bitcoin/ConnectionHandler.html","",""],["Bitcoin::Key","","Bitcoin/Key.html","","<p>Elliptic Curve key as used in bitcoin.\n"],["Bitcoin::Logger","","Bitcoin/Logger.html","","<p>this is a very simple logger that is used if log4r is not available\n"],["Bitcoin::Logger::LogWrapper","","Bitcoin/Logger/LogWrapper.html","","<p>wrap a logger and prepend a special name in front of the messages\n"],["Bitcoin::Logger::Logger","","Bitcoin/Logger/Logger.html","",""],["Bitcoin::Network","","Bitcoin/Network.html","",""],["Bitcoin::Network::CommandHandler","","Bitcoin/Network/CommandHandler.html","",""],["Bitcoin::Network::ConnectionHandler","","Bitcoin/Network/ConnectionHandler.html","",""],["Bitcoin::Network::Node","","Bitcoin/Network/Node.html","",""],["Bitcoin::OpenSSL_EC","","Bitcoin/OpenSSL_EC.html","",""],["Bitcoin::P","","Bitcoin/Protocol.html","",""],["Bitcoin::Protocol","","Bitcoin/Protocol.html","",""],["Bitcoin::Protocol::Addr","","Bitcoin/Protocol/Addr.html","",""],["Bitcoin::Protocol::Block","","Bitcoin/Protocol/Block.html","",""],["Bitcoin::Protocol::Handler","","Bitcoin/Protocol/Handler.html","",""],["Bitcoin::Protocol::Parser","","Bitcoin/Protocol/Parser.html","",""],["Bitcoin::Protocol::Tx","","Bitcoin/Protocol/Tx.html","",""],["Bitcoin::Protocol::TxIn","","Bitcoin/Protocol/TxIn.html","",""],["Bitcoin::Protocol::TxOut","","Bitcoin/Protocol/TxOut.html","",""],["Bitcoin::Protocol::VersionPkt","","Bitcoin/Protocol/VersionPkt.html","",""],["Bitcoin::Script","","Bitcoin/Script.html","",""],["Bitcoin::Storage","","Bitcoin/Storage.html","",""],["Bitcoin::Storage::Backends","","Bitcoin/Storage/Backends.html","",""],["Bitcoin::Storage::Backends::ActiverecordStore","","Bitcoin/Storage/Backends/ActiverecordStore.html","",""],["Bitcoin::Storage::Backends::ActiverecordStore::Base","","Bitcoin/Storage/Backends/ActiverecordStore/Base.html","",""],["Bitcoin::Storage::Backends::ActiverecordStore::Block","","Bitcoin/Storage/Backends/ActiverecordStore/Block.html","",""],["Bitcoin::Storage::Backends::ActiverecordStore::Input","","Bitcoin/Storage/Backends/ActiverecordStore/Input.html","",""],["Bitcoin::Storage::Backends::ActiverecordStore::Output","","Bitcoin/Storage/Backends/ActiverecordStore/Output.html","",""],["Bitcoin::Storage::Backends::ActiverecordStore::Transaction","","Bitcoin/Storage/Backends/ActiverecordStore/Transaction.html","",""],["Bitcoin::Storage::Backends::ActiverecordStore::TransactionsParent","","Bitcoin/Storage/Backends/ActiverecordStore/TransactionsParent.html","",""],["Bitcoin::Storage::Backends::DummyStore","","Bitcoin/Storage/Backends/DummyStore.html","",""],["Bitcoin::Storage::Backends::SequelMigrations","","Bitcoin/Storage/Backends/SequelMigrations.html","",""],["Bitcoin::Storage::Backends::SequelStore","","Bitcoin/Storage/Backends/SequelStore.html","",""],["Bitcoin::Storage::Backends::StorageModel","","Bitcoin/Storage/Backends/StorageModel.html","",""],["Bitcoin::Storage::Backends::StoreBase","","Bitcoin/Storage/Backends/StoreBase.html","","<p>Base class for storage backends. Every backend must overwrite the “Not\nimplemented” methods …\n"],["Bitcoin::Storage::Models","","Bitcoin/Storage/Models.html","","<p>StorageModels defines objects that are returned from storage. These objects\ninherit from their Bitcoin::Protocol …\n"],["Bitcoin::Storage::Models::Block","","Bitcoin/Storage/Models/Block.html","","<p>Block retrieved from storage.\n"],["Bitcoin::Storage::Models::Tx","","Bitcoin/Storage/Models/Tx.html","","<p>Transaction retrieved from storage.\n"],["Bitcoin::Storage::Models::TxIn","","Bitcoin/Storage/Models/TxIn.html","","<p>Transaction input retrieved from storage.\n"],["Bitcoin::Storage::Models::TxOut","","Bitcoin/Storage/Models/TxOut.html","","<p>Transaction output retrieved from storage.\n"],["Bitcoin::Util","","Bitcoin/Util.html","",""],["Bitcoin::Wallet","","Bitcoin/Wallet.html","",""],["Bitcoin::Wallet::DeterministicKeyStore","","Bitcoin/Wallet/DeterministicKeyStore.html","","<p>Deterministic keystore.\n"],["Bitcoin::Wallet::KeyGenerator","","Bitcoin/Wallet/KeyGenerator.html","","<p>Deterministic key generator as described in\nbitcointalk.org/index.php?topic=11665.0.\n<p>Takes a seed and …\n"],["Bitcoin::Wallet::SimpleCoinSelector","","Bitcoin/Wallet/SimpleCoinSelector.html","",""],["Bitcoin::Wallet::SimpleKeyStore","","Bitcoin/Wallet/SimpleKeyStore.html","","<p>JSON-file-based keystore.\n"],["Bitcoin::Wallet::Wallet","","Bitcoin/Wallet/Wallet.html","",""],["Chain","","Chain.html","",""],["Hash","","Hash.html","",""],["InventoryRequest","","InventoryRequest.html","",""],["Log4r","","Log4r.html","",""],["Log4r::Logger","","Log4r/Logger.html","","<p>monkey-patch Log4r to accept level names as symbols\n"],["OpenSSL","","OpenSSL.html","",""],["OpenSSL::BN","","OpenSSL/BN.html","",""],["OpenSSL::PKey","","OpenSSL/PKey.html","",""],["OpenSSL::PKey::EC","","OpenSSL/PKey/EC.html","",""],["OpenSSL::PKey::EC::Point","","OpenSSL/PKey/EC/Point.html","",""],["==","Bitcoin::Key","Bitcoin/Key.html#method-i-3D-3D","(other)",""],["==","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-3D-3D","(other)","<p>compare to another block\n"],["==","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-3D-3D","(other)","<p>compare to another tx\n"],["==","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-3D-3D","(other)","<p>compare to another txout\n"],["==","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-3D-3D","(other)","<p>compare to another txout\n"],["[]","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-5B-5D","(idx)",""],["[]","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-5B-5D","(idx)",""],["[]=","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-5B-5D-3D","(idx, val)",""],["[]=","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-5B-5D-3D","(idx, val)",""],["add_in","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-add_in","(input)","<p>add an input\n"],["add_out","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-add_out","(output)","<p>add an output\n"],["addr","Bitcoin::Key","Bitcoin/Key.html#method-i-addr","()","<p>Get the address corresponding to the public key.\n"],["address_checksum?","Bitcoin::Util","Bitcoin/Util.html#method-i-address_checksum-3F","(address)",""],["address_version","Bitcoin::Util","Bitcoin/Util.html#method-i-address_version","()",""],["addrs","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-addrs","()",""],["alive?","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-i-alive-3F","()","<p>is this address alive?\n"],["base58_to_hex","Bitcoin::Util","Bitcoin/Util.html#method-i-base58_to_hex","(base58_val)",""],["base58_to_int","Bitcoin::Util","Bitcoin/Util.html#method-i-base58_to_int","(base58_val)",""],["binary_from_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-binary_from_hash","(h)","<p>convert ruby hash to raw binary\n"],["binary_from_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-binary_from_hash","(h)","<p>convert ruby hash to raw binary\n"],["binary_from_json","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-binary_from_json","(json_string)","<p>convert json representation to raw binary\n"],["binary_from_json","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-binary_from_json","(json_string)","<p>convert json representation to raw binary\n"],["binary_from_string","Bitcoin::Script","Bitcoin/Script.html#method-c-binary_from_string","(script_string)","<p>raw script binary of a string representation\n"],["binary_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-binary_hash","()","<p>return the tx hash in binary format\n"],["bitcoin_elliptic_curve","Bitcoin::Util","Bitcoin/Util.html#method-i-bitcoin_elliptic_curve","()",""],["bitcoin_hash","Bitcoin::Util","Bitcoin/Util.html#method-i-bitcoin_hash","(hex)",""],["bitcoin_mrkl","Bitcoin::Util","Bitcoin/Util.html#method-i-bitcoin_mrkl","(a, b)",""],["block_hash","Bitcoin::Util","Bitcoin/Util.html#method-i-block_hash","(prev_block, mrkl_root, time, bits, nonce, ver)",""],["bn2mpi","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-c-bn2mpi","(hex)",""],["bts","Bitcoin::Storage::Backends::StorageModel","Bitcoin/Storage/Backends/StorageModel.html#method-i-bts","(data)",""],["build_address","Bitcoin::Protocol::VersionPkt","Bitcoin/Protocol/VersionPkt.html#method-c-build_address","(addr_str)","<p>build packet\n"],["build_payload","Bitcoin::Protocol::VersionPkt","Bitcoin/Protocol/VersionPkt.html#method-c-build_payload","(from_id, from, to, last_block=nil, time=nil)",""],["check_nonce","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-check_nonce","(nonce)","<p>check the nonce; compute if missing, raise if invalid.\n"],["check_target","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-check_target","(hash)","<p>check if given <code>hash</code> satisfies the difficulty target\n"],["checksum","Bitcoin::Util","Bitcoin/Util.html#method-i-checksum","(hex)","<p>checksum is a 4 bytes sha256-sha256 hexdigest.\n"],["codehash_script","Bitcoin::Script","Bitcoin/Script.html#method-i-codehash_script","(opcode)",""],["coinbase?","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-coinbase-3F","()",""],["coinbase?","Bitcoin::Storage::Backends::ActiverecordStore::Input","Bitcoin/Storage/Backends/ActiverecordStore/Input.html#method-i-coinbase-3F","()",""],["connect","Bitcoin::Connection","Bitcoin/Connection.html#method-c-connect","(host, port, connections)",""],["connect","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-connect","()",""],["connect","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-connect","()",""],["connect_dns","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_dns","()","<p>query addrs from dns seed and connect\n"],["connect_dns_nslookup","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_dns_nslookup","(seed)","<p>get peers from dns via nslookup\n"],["connect_dns_resolver","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_dns_resolver","(seed)","<p>get peer addrs from given dns <code>seed</code> using em/dns_resolver.\nfallback to using `nslookup` if it is not installed …\n"],["connect_peer","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-connect_peer","(host, port)","<p>connect to peer at given <code>host</code> / <code>port</code>\n"],["connect_random_from_dns","Bitcoin::Connection","Bitcoin/Connection.html#method-c-connect_random_from_dns","(connections)",""],["create","Bitcoin::Logger","Bitcoin/Logger.html#method-c-create","(name)","<p>create a logger with given <code>name</code>. if log4r is installed, the\nlogger will have a stdout and a fileout outputter …\n"],["decode_compact_bits","Bitcoin::Util","Bitcoin/Util.html#method-i-decode_compact_bits","(bits)","<p>target compact bits (int) to bignum hex\n"],["decode_target","Bitcoin::Util","Bitcoin/Util.html#method-i-decode_target","(target_bits)",""],["deep_merge","Hash","Hash.html#method-i-deep_merge","(hash)",""],["delete","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-delete","(addr)",""],["drop_signatures","Bitcoin::Script","Bitcoin/Script.html#method-c-drop_signatures","(script_pubkey, drop_signatures)",""],["encode_base58","Bitcoin::Util","Bitcoin/Util.html#method-i-encode_base58","(hex)",""],["encode_compact_bits","Bitcoin::Util","Bitcoin/Util.html#method-i-encode_compact_bits","(target)","<p>target bignum hex to compact bits (int)\n"],["export","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-i-export","(addr)","<p>Export key for given <code>addr</code> to base58. (See\nBitcoin::Key.to_base58)\n"],["export","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-export","(addr)","<p>Export key for given <code>addr</code> to base58 format. (See\nBitcoin::Key#to_base58)\n"],["find_nonce","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-find_nonce","()","<p>find a nonce that leads to the privkey satisfying the target\n"],["format_uptime","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-format_uptime","(t)",""],["from_base58","Bitcoin::Key","Bitcoin/Key.html#method-c-from_base58","(str)","<p>Import private key from base58 fromat as described in\nen.bitcoin.it/wiki/Private_key#Base_58_Wallet_Import_format …\n"],["from_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-from_hash","(h)","<p>parse ruby hash (see also #to_hash)\n"],["from_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-from_hash","(h)","<p>parse ruby hash (see also #to_hash)\n"],["from_hex","OpenSSL::BN","OpenSSL/BN.html#method-c-from_hex","(hex)",""],["from_hex","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-c-from_hex","(group, hex)",""],["from_json","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-from_json","(json_string)","<p>parse json representation (see also #to_json)\n"],["from_json","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-from_json","(json_string)","<p>parse json representation\n"],["from_protocol","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-c-from_protocol","(blk)",""],["from_protocol","Bitcoin::Storage::Backends::ActiverecordStore::Input","Bitcoin/Storage/Backends/ActiverecordStore/Input.html#method-c-from_protocol","(txin)","<p>def verify\n\n<pre>return nil  if transaction.coinbase\nunless previous_output.transaction.coinbase\n  previous_output.transaction.verify ...</pre>\n"],["from_protocol","Bitcoin::Storage::Backends::ActiverecordStore::Output","Bitcoin/Storage/Backends/ActiverecordStore/Output.html#method-c-from_protocol","(txout)",""],["from_protocol","Bitcoin::Storage::Backends::ActiverecordStore::Transaction","Bitcoin/Storage/Backends/ActiverecordStore/Transaction.html#method-c-from_protocol","(tx)",""],["from_string","Bitcoin::Script","Bitcoin/Script.html#method-c-from_string","(script_string)","<p>script object of a string representation\n"],["generate","Bitcoin::Key","Bitcoin/Key.html#method-i-generate","()","<p>Generate new priv/pub key.\n"],["generate","Bitcoin::Key","Bitcoin/Key.html#method-c-generate","()","<p>Generate a new keypair.\n\n<pre>Bitcoin::Key.generate</pre>\n"],["generate_address","Bitcoin::Util","Bitcoin/Util.html#method-i-generate_address","()",""],["generate_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-generate_hash","(payload)",""],["generate_key","Bitcoin::Util","Bitcoin/Util.html#method-i-generate_key","()",""],["get","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-c-get","(hash)","<p>get block with given hash (in hex)\n"],["get","Bitcoin::Storage::Backends::ActiverecordStore::Transaction","Bitcoin/Storage/Backends/ActiverecordStore/Transaction.html#method-c-get","(hash)",""],["get_address","Bitcoin::Script","Bitcoin/Script.html#method-i-get_address","()","<p>get address this script corresponds to (if possible)\n"],["get_address","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-get_address","()","<p>get the address this txout corresponds to (if possible)\n"],["get_balance","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-get_balance","()","<p>TODO\n"],["get_balance","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_balance","(hash160)","<p>get balance for given <code>hash160</code>\n"],["get_balance","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_balance","()",""],["get_block","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-get_block","(blk_hash)",""],["get_block","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block","(blk_hash)",""],["get_block","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block","(blk_hash)",""],["get_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block","(blk_hash)","<p>get block with given <code>blk_hash</code>\n"],["get_block","Bitcoin::Storage::Models::Tx","Bitcoin/Storage/Models/Tx.html#method-i-get_block","()","<p>get the block this transaction is in\n"],["get_block_by_depth","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-get_block_by_depth","(depth)",""],["get_block_by_depth","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block_by_depth","(depth)",""],["get_block_by_depth","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block_by_depth","(depth)",""],["get_block_by_depth","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block_by_depth","(depth)","<p>get block with given <code>depth</code> from main chain\n"],["get_block_by_id","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block_by_id","(blk_id)",""],["get_block_by_id","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block_by_id","(block_id)",""],["get_block_by_id","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block_by_id","(block_id)","<p>get block by given <code>block_id</code>\n"],["get_block_by_prev_hash","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block_by_prev_hash","(hash)",""],["get_block_by_prev_hash","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block_by_prev_hash","(prev_hash)",""],["get_block_by_prev_hash","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block_by_prev_hash","(prev_hash)","<p>get block with given <code>prev_hash</code>\n"],["get_block_by_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_block_by_tx","(tx_hash)",""],["get_block_by_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_block_by_tx","(tx_hash)",""],["get_block_by_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_block_by_tx","(tx_hash)","<p>get block that includes tx with given <code>tx_hash</code>\n"],["get_block_depth","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-get_block_depth","(blk_hash)",""],["get_change_addr","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_change_addr","(policy, in_addr)",""],["get_depth","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-get_depth","()",""],["get_depth","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_depth","()",""],["get_depth","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_depth","()",""],["get_depth","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_depth","()","<p>return depth of the head block\n"],["get_genesis_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-get_genesis_block","()",""],["get_hash","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-get_hash","(seed, n)","<p>get the hash corresponding to <code>seed</code> and <code>n</code>.\n"],["get_hash160","Bitcoin::Script","Bitcoin/Script.html#method-i-get_hash160","()","<p>get the hash160 for this script (in standard address scripts)\n"],["get_hash160_address","Bitcoin::Script","Bitcoin/Script.html#method-i-get_hash160_address","()","<p>get the address for the script hash160 (in standard address scripts)\n"],["get_head","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-get_head","()",""],["get_head","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_head","()",""],["get_head","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_head","()",""],["get_head","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_head","()","<p>get the hash of the leading block\n"],["get_key","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-get_key","(n = 0)","<p>get key number <code>n</code> from chain\n"],["get_locator","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_locator","()","<p>compute blockchain locator\n"],["get_new_addr","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_new_addr","()",""],["get_next_block","Bitcoin::Storage::Models::Block","Bitcoin/Storage/Models/Block.html#method-i-get_next_block","()","<p>get the block that builds upon this one\n"],["get_next_in","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-get_next_in","()","<p>get the next input that references this output\n"],["get_prev_block","Bitcoin::Storage::Models::Block","Bitcoin/Storage/Models/Block.html#method-i-get_prev_block","()","<p>get the block this one builds upon\n"],["get_prev_out","Bitcoin::Storage::Models::TxIn","Bitcoin/Storage/Models/TxIn.html#method-i-get_prev_out","()","<p>get the previous output referenced by this input\n"],["get_pubkey","Bitcoin::Script","Bitcoin/Script.html#method-i-get_pubkey","()","<p>get the public key for this script (in generation scripts)\n"],["get_pubkey_address","Bitcoin::Script","Bitcoin/Script.html#method-i-get_pubkey_address","()","<p>get the address for the public key (in generation scripts)\n"],["get_selector","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_selector","()",""],["get_tx","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-get_tx","(tx_hash)",""],["get_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_tx","(tx_hash)",""],["get_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_tx","(tx_hash)",""],["get_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_tx","(tx_hash)","<p>get tx with given <code>tx_hash</code>\n"],["get_tx","Bitcoin::Storage::Models::TxIn","Bitcoin/Storage/Models/TxIn.html#method-i-get_tx","()","<p>get the transaction this input is in\n"],["get_tx","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-i-get_tx","()","<p>get the transaction this output is in\n"],["get_tx_by_id","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_tx_by_id","(tx_id)",""],["get_tx_by_id","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_tx_by_id","(tx_id)",""],["get_tx_by_id","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_tx_by_id","(tx_id)","<p>get tx with given <code>tx_id</code>\n"],["get_txin_for_txout","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_txin_for_txout","(tx_hash, txout_idx)",""],["get_txin_for_txout","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txin_for_txout","(tx_hash, txout_idx)",""],["get_txin_for_txout","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_txin_for_txout","(tx_hash, txout_idx)","<p>get corresponding txin for the txout in transaction <code>tx_hash</code>\nwith index <code>txout_idx</code>\n"],["get_txout_for_txin","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txout_for_txin","(txin)",""],["get_txouts","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-get_txouts","()",""],["get_txouts_for_address","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_txouts_for_address","(address)","<p>collect all txouts containing a standard tx to given <code>address</code>\n"],["get_txouts_for_hash160","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_txouts_for_hash160","(hash160)",""],["get_txouts_for_hash160","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txouts_for_hash160","(hash160)",""],["get_txouts_for_pk_script","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-get_txouts_for_pk_script","(script)",""],["get_txouts_for_pk_script","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_txouts_for_pk_script","(script)",""],["get_txouts_for_pk_script","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-get_txouts_for_pk_script","(script)","<p>collect all txouts containing the given <code>script</code>\n"],["get_unconfirmed_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-get_unconfirmed_tx","()",""],["getblocks","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-getblocks","()","<p>query blocks from random peer\n"],["getdata_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-getdata_pkt","(type, hashes)",""],["getdata_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-getdata_pkt","(type, hashes)",""],["handle_addrs","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_addrs","(count = 32)",""],["handle_config","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_config","()",""],["handle_connect","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_connect","(*args)",""],["handle_connections","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_connections","()",""],["handle_error","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-handle_error","(type, msg)",""],["handle_getaddr","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_getaddr","()",""],["handle_getblocks","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_getblocks","()",""],["handle_help","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_help","()",""],["handle_info","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_info","()",""],["handle_monitor","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_monitor","()",""],["handle_relay_tx","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_relay_tx","(data)",""],["handle_stop","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-handle_stop","()",""],["has_block","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-has_block","(blk_hash)",""],["has_block","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-has_block","(blk_hash)",""],["has_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-has_block","(blk_hash)","<p>check if block with given <code>blk_hash</code> is already stored\n"],["has_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-has_tx","(tx_hash)",""],["has_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-has_tx","(tx_hash)",""],["has_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-has_tx","(tx_hash)","<p>check if tx with given <code>tx_hash</code> is already stored\n"],["hash160","Bitcoin::Key","Bitcoin/Key.html#method-i-hash160","()","<p>Get the hash160 of the public key.\n"],["hash160","Bitcoin::Util","Bitcoin/Util.html#method-i-hash160","(hex)","<p>hash160 is a 20 bytes (160bits) rmd610-sha256 hexdigest.\n"],["hash160_from_address","Bitcoin::Util","Bitcoin/Util.html#method-i-hash160_from_address","(address)",""],["hash160_to_address","Bitcoin::Util","Bitcoin/Util.html#method-i-hash160_to_address","(hex)",""],["hash_from_payload","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-hash_from_payload","(payload)","<p>generate the tx hash for given <code>payload</code> in hex format\n"],["hash_mrkl_tree","Bitcoin::Util","Bitcoin/Util.html#method-i-hash_mrkl_tree","(tx)",""],["header_info","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-header_info","()","<p>get the block header info\n<p>&lt;version&gt;, &lt;prev_block&gt;, &lt;merkle_root&gt;, &lt;time&gt;, &lt;bits&gt;, … &mdash; \n"],["htb","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-htb","(h)",""],["htb","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-htb","(h)",""],["htb","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-htb","(s)",""],["htb","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-htb","(s)",""],["htb","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-htb","(hex)",""],["htb","Bitcoin::Storage::Backends::StorageModel","Bitcoin/Storage/Backends/StorageModel.html#method-i-htb","(h)",""],["htb","Bitcoin::Util","Bitcoin/Util.html#method-i-htb","(h)",""],["hth","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-hth","(h)",""],["hth","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-hth","(h)",""],["hth","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-hth","(h)",""],["hth","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-hth","(h)",""],["hth","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-hth","(h)",""],["hth","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-hth","(s)",""],["hth","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-hth","(bin)",""],["hth","Bitcoin::Storage::Backends::StorageModel","Bitcoin/Storage/Backends/StorageModel.html#method-i-hth","(h)",""],["hth","Bitcoin::Util","Bitcoin/Util.html#method-i-hth","(h)",""],["import","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-import","(base58)","<p>Import key from given <code>base58</code> string. (See\nBitcoin::Key.from_base58)\n"],["included","Bitcoin::Storage::Backends::ActiverecordStore::Base","Bitcoin/Storage/Backends/ActiverecordStore/Base.html#method-c-included","(base)",""],["init_epoll","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-init_epoll","()","<p>initiate epoll with given file descriptor and set effective user\n"],["init_ffi_ssl","Bitcoin::OpenSSL_EC","Bitcoin/OpenSSL_EC.html#method-c-init_ffi_ssl","()",""],["inspect_key","Bitcoin::Util","Bitcoin/Util.html#method-i-inspect_key","(key)",""],["int_to_base58","Bitcoin::Util","Bitcoin/Util.html#method-i-int_to_base58","(int_val)",""],["inv_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-inv_pkt","(type, hashes)",""],["inv_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-inv_pkt","(type, hashes)",""],["invalid","Bitcoin::Script","Bitcoin/Script.html#method-i-invalid","()",""],["invalid?","Bitcoin::Script","Bitcoin/Script.html#method-i-invalid-3F","()",""],["is_coinbase?","Bitcoin::Storage::Backends::ActiverecordStore::Transaction","Bitcoin/Storage/Backends/ActiverecordStore/Transaction.html#method-i-is_coinbase-3F","()",""],["is_hash160?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_hash160-3F","()","<p>is this a hash160 (address) tx\n"],["is_pubkey?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_pubkey-3F","()",""],["is_send_to_ip?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_send_to_ip-3F","()","<p>is this a send-to-ip (pubkey) tx\n"],["is_standard?","Bitcoin::Script","Bitcoin/Script.html#method-i-is_standard-3F","()","<p>check if script is in one of the recognized standard formats\n"],["key","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-i-key","(addr)","<p>Get key for given <code>addr</code>.\n"],["key","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-key","(addr)","<p>Get key for given <code>addr</code>.\n"],["keys","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-i-keys","()","<p>List all keys upto configured limit.\n"],["keys","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-keys","()","<p>List all stored keys.\n"],["level=","Bitcoin::Logger::Logger","Bitcoin/Logger/Logger.html#method-i-level-3D","(level)",""],["level=","Log4r::Logger","Log4r/Logger.html#method-i-level-3D","(l)",""],["list","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-list","()",""],["load","Bitcoin::Config","Bitcoin/Config.html#method-c-load","(options, categories = [], paths = CONFIG_PATHS)","<p>Load <code>categories</code> from all files at <code>paths</code> into\ngiven <code>options</code> hash.\n"],["load_file","Bitcoin::Config","Bitcoin/Config.html#method-c-load_file","(options, file, c = [])","<p>Load categories <code>c</code> of a single config <code>file</code> into\ngiven <code>options</code> hash.\n"],["load_keys","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-load_keys","()","<p>Load keys from file. If file is emty this will generate a new key and store\nit, creating the file.\n"],["log","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-log","()",""],["log","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-log","()",""],["log","Bitcoin::Storage","Bitcoin/Storage.html#method-c-log","()",""],["log","Bitcoin::Storage::Backends::ActiverecordStore::Base","Bitcoin/Storage/Backends/ActiverecordStore/Base.html#method-i-log","()",""],["log","Bitcoin::Storage::Backends::StorageModel","Bitcoin/Storage/Backends/StorageModel.html#method-i-log","()",""],["log","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-log","()","<p>get the storage logger\n"],["merge","Bitcoin::Config","Bitcoin/Config.html#method-c-merge","(a, b)","<p>Deep-merge hash <code>b</code> into <code>a</code>.\n"],["method_missing","Bitcoin::Logger::LogWrapper","Bitcoin/Logger/LogWrapper.html#method-i-method_missing","(m, *a, &blk)",""],["migrate","Bitcoin::Storage::Backends::SequelMigrations","Bitcoin/Storage/Backends/SequelMigrations.html#method-i-migrate","()",""],["network","Bitcoin","Bitcoin.html#method-c-network","()",""],["network=","Bitcoin","Bitcoin.html#method-c-network-3D","(name)",""],["new","Bitcoin::Connection","Bitcoin/Connection.html#method-c-new","(host, port, connections)",""],["new","Bitcoin::Key","Bitcoin/Key.html#method-c-new","(privkey = nil, pubkey = nil)","<p>Create a new key with given <code>privkey</code> and <code>pubkey</code>.\n\n<pre>Bitcoin::Key.new\nBitcoin::Key.new(privkey)\nBitcoin::Key.new(nil, ...</pre>\n"],["new","Bitcoin::Logger::LogWrapper","Bitcoin/Logger/LogWrapper.html#method-c-new","(name, log)",""],["new","Bitcoin::Logger::Logger","Bitcoin/Logger/Logger.html#method-c-new","(name)",""],["new","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-c-new","(node)",""],["new","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-c-new","(node, host, port)",""],["new","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-c-new","(config = {})",""],["new","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-c-new","(data = nil)","<p>create addr from raw binary <code>data</code>\n"],["new","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-c-new","(data)","<p>create block from raw binary <code>data</code>\n"],["new","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-c-new","(handler=nil)",""],["new","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-c-new","(data=nil)","<p>create tx from raw binary <code>data</code>\n"],["new","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-c-new","(*args)",""],["new","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-c-new","(*args)",""],["new","Bitcoin::Script","Bitcoin/Script.html#method-c-new","(bytes, offset=0)","<p>create a new script. <code>bytes</code> is typically input_script +\noutput_script\n"],["new","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-c-new","(config)",""],["new","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-c-new","(*args)",""],["new","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-c-new","(config)",""],["new","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-c-new","(config = {})",""],["new","Bitcoin::Storage::Models::Block","Bitcoin/Storage/Models/Block.html#method-c-new","(store, data)",""],["new","Bitcoin::Storage::Models::Tx","Bitcoin/Storage/Models/Tx.html#method-c-new","(store, data)",""],["new","Bitcoin::Storage::Models::TxIn","Bitcoin/Storage/Models/TxIn.html#method-c-new","(store, data)",""],["new","Bitcoin::Storage::Models::TxOut","Bitcoin/Storage/Models/TxOut.html#method-c-new","(store, data)",""],["new","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-c-new","(config)","<p>Initialize keystore.\n<p>config &mdash; Hash of settings ({:keys =&gt; 1, :seed =&gt; …, :nonce =&gt; …})\n\n"],["new","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-c-new","(seed = nil, nonce = nil, target = nil)","<p>Initialize key generator with optional <code>seed</code> and\n<code>nonce</code> and <code>target</code>.\n<p>seed &mdash; the seed data for the keygenerator …\n"],["new","Bitcoin::Wallet::SimpleCoinSelector","Bitcoin/Wallet/SimpleCoinSelector.html#method-c-new","(txouts)",""],["new","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-c-new","(config)","<p>Initialize keystore.\n<p>config &mdash; Hash of settings ({:file =&gt; “/foo/bar.json”})\n\n"],["new","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-c-new","(storage, keystore, selector)",""],["new_key","Bitcoin::Wallet::DeterministicKeyStore","Bitcoin/Wallet/DeterministicKeyStore.html#method-i-new_key","()","<p>Get new key (actually just increase the key limit).\n"],["new_key","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-new_key","()","<p>Generate and store a new key.\n"],["next","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-i-next","()","<p>get next block\n"],["next_input","Bitcoin::Storage::Backends::ActiverecordStore::Output","Bitcoin/Storage/Backends/ActiverecordStore/Output.html#method-i-next_input","()",""],["on_addr","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_addr","(addr)",""],["on_addr","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_addr","(addr)",""],["on_addr","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_addr","(addr)",""],["on_block","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_block","(block)",""],["on_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_block","(blk)",""],["on_block","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_block","(block)",""],["on_get_block","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_get_block","(hash)",""],["on_get_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_get_block","(hash)",""],["on_get_block","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_get_block","(hash)",""],["on_get_transaction","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_get_transaction","(hash)",""],["on_get_transaction","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_get_transaction","(hash)",""],["on_get_transaction","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_get_transaction","(hash)",""],["on_handshake_begin","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_handshake_begin","()",""],["on_handshake_begin","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_handshake_begin","()",""],["on_handshake_complete","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_handshake_complete","()",""],["on_handshake_complete","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_handshake_complete","()",""],["on_headers","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_headers","(headers)",""],["on_inv_block","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_inv_block","(hash)",""],["on_inv_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_inv_block","(hash)",""],["on_inv_block","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_inv_block","(hash)",""],["on_inv_transaction","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_inv_transaction","(hash)",""],["on_inv_transaction","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_inv_transaction","(hash)",""],["on_inv_transaction","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_inv_transaction","(hash)",""],["on_tx","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_tx","(tx)",""],["on_tx","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_tx","(tx)",""],["on_tx","Bitcoin::Protocol::Handler","Bitcoin/Protocol/Handler.html#method-i-on_tx","(tx)",""],["on_verack","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_verack","()",""],["on_version","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-on_version","(version)",""],["on_version","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-on_version","(version)",""],["op_0","Bitcoin::Script","Bitcoin/Script.html#method-i-op_0","()","<p>An empty array of bytes is pushed onto the stack.\n"],["op_1","Bitcoin::Script","Bitcoin/Script.html#method-i-op_1","()","<p>The number 1 is pushed onto the stack. Same as OP_TRUE\n"],["op_add","Bitcoin::Script","Bitcoin/Script.html#method-i-op_add","()","<p>a is added to b.\n"],["op_booland","Bitcoin::Script","Bitcoin/Script.html#method-i-op_booland","()","<p>If both a and b are not 0, the output is 1. Otherwise 0.\n"],["op_checkhashverify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_checkhashverify","()","<p>en.bitcoin.it/wiki/BIP_0017  (old OP_NOP2) TODO: don’t rely on it yet. add\nguards from wikipage too. …\n"],["op_checkmultisig","Bitcoin::Script","Bitcoin/Script.html#method-i-op_checkmultisig","(check_callback)","<p>do a CHECKMULTISIG operation on the current stack, asking\n<code>check_callback</code> to do the actual signature verification. …\n"],["op_checksig","Bitcoin::Script","Bitcoin/Script.html#method-i-op_checksig","(check_callback)","<p>do a CHECKSIG operation on the current stack, asking\n<code>check_callback</code> to do the actual signature verification. …\n"],["op_checksigverify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_checksigverify","(check_callback)",""],["op_codeseparator","Bitcoin::Script","Bitcoin/Script.html#method-i-op_codeseparator","()","<p>All of the signature checking words will only match signatures to the data\nafter the most recently-executed …\n"],["op_drop","Bitcoin::Script","Bitcoin/Script.html#method-i-op_drop","()","<p>Removes the top stack item.\n"],["op_dup","Bitcoin::Script","Bitcoin/Script.html#method-i-op_dup","()","<p>Duplicates the top stack item.\n"],["op_equal","Bitcoin::Script","Bitcoin/Script.html#method-i-op_equal","()","<p>Returns 1 if the inputs are exactly equal, 0 otherwise.\n"],["op_equalverify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_equalverify","()","<p>Same as OP_EQUAL, but runs OP_VERIFY afterward.\n"],["op_fromaltstack","Bitcoin::Script","Bitcoin/Script.html#method-i-op_fromaltstack","()","<p>Puts the input onto the top of the main stack. Removes it from the alt\nstack.\n"],["op_greaterthanorequal","Bitcoin::Script","Bitcoin/Script.html#method-i-op_greaterthanorequal","()","<p>Returns 1 if a is greater than or equal to b, 0 otherwise.\n"],["op_hash160","Bitcoin::Script","Bitcoin/Script.html#method-i-op_hash160","()","<p>The input is hashed twice: first with SHA-256 and then with RIPEMD-160.\n"],["op_hash256","Bitcoin::Script","Bitcoin/Script.html#method-i-op_hash256","()","<p>The input is hashed two times with SHA-256.\n"],["op_nop","Bitcoin::Script","Bitcoin/Script.html#method-i-op_nop","()","<p>Does nothing\n"],["op_ripemd160","Bitcoin::Script","Bitcoin/Script.html#method-i-op_ripemd160","()","<p>The input is hashed using RIPEMD-160.\n"],["op_sha1","Bitcoin::Script","Bitcoin/Script.html#method-i-op_sha1","()","<p>The input is hashed using SHA-1.\n"],["op_sha256","Bitcoin::Script","Bitcoin/Script.html#method-i-op_sha256","()","<p>The input is hashed using SHA-256.\n"],["op_sub","Bitcoin::Script","Bitcoin/Script.html#method-i-op_sub","()","<p>b is subtracted from a.\n"],["op_swap","Bitcoin::Script","Bitcoin/Script.html#method-i-op_swap","()","<p>The top two items on the stack are swapped.\n"],["op_toaltstack","Bitcoin::Script","Bitcoin/Script.html#method-i-op_toaltstack","()","<p>Puts the input onto the top of the alt stack. Removes it from the main\nstack.\n"],["op_tuck","Bitcoin::Script","Bitcoin/Script.html#method-i-op_tuck","()","<p>The item at the top of the stack is copied and inserted before the\nsecond-to-top item.\n"],["op_verify","Bitcoin::Script","Bitcoin/Script.html#method-i-op_verify","()","<p>Marks transaction as invalid if top stack value is not true. True is\nremoved, but false is not.\n"],["open_key","Bitcoin::Util","Bitcoin/Util.html#method-i-open_key","(private_key, public_key=nil)",""],["output_value","Bitcoin::Storage::Backends::ActiverecordStore::Transaction","Bitcoin/Storage/Backends/ActiverecordStore/Transaction.html#method-i-output_value","()",""],["pack_var_int","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-pack_var_int","(i)",""],["pack_var_int","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-pack_var_int","(i)",""],["parse","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse","(buf)",""],["parse","Bitcoin::Protocol::VersionPkt","Bitcoin/Protocol/VersionPkt.html#method-c-parse","(payload)","<p>parse packet\n"],["parse","Bitcoin::Script","Bitcoin/Script.html#method-i-parse","(bytes, offset=0)","<p>parse raw script\n"],["parse_addr","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_addr","(payload)",""],["parse_buffer","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_buffer","()",""],["parse_data","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-parse_data","(data)","<p>parse raw binary data\n"],["parse_data","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-parse_data","(data)","<p>parse raw binary data\n"],["parse_data","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-parse_data","(data)","<p>parse raw binary data for transaction input\n"],["parse_data","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-i-parse_data","(data)","<p>parse raw binary data for transaction output\n"],["parse_headers","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_headers","(payload)",""],["parse_inv","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_inv","(payload, type=:put)","<p>handles inv/getdata packets\n"],["parse_ip","Bitcoin::Protocol::VersionPkt","Bitcoin/Protocol/VersionPkt.html#method-c-parse_ip","(payload)",""],["parse_version","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-parse_version","(payload)",""],["pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-pkt","(command, payload)",""],["pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-pkt","(command, payload)",""],["pkt","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-c-pkt","(*addrs)",""],["post_init","Bitcoin::Connection","Bitcoin/Connection.html#method-i-post_init","()",""],["post_init","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-post_init","()",""],["prev","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-i-prev","()","<p>get previous block\n"],["previous_output","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-previous_output","()","<p>previous output in hex\n"],["previous_output","Bitcoin::Storage::Backends::ActiverecordStore::Input","Bitcoin/Storage/Backends/ActiverecordStore/Input.html#method-i-previous_output","()",""],["priv","Bitcoin::Key","Bitcoin/Key.html#method-i-priv","()","<p>Get the private key (in hex).\n"],["priv=","Bitcoin::Key","Bitcoin/Key.html#method-i-priv-3D","(priv)","<p>Set the private key to <code>priv</code> (in hex).\n"],["private_key_hex","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-private_key_hex","()",""],["process_pkt","Bitcoin::Protocol::Parser","Bitcoin/Protocol/Parser.html#method-i-process_pkt","(command, payload)",""],["pub","Bitcoin::Key","Bitcoin/Key.html#method-i-pub","()","<p>Get the public key (in hex). In case the key was initialized with only a\nprivate key, the public key …\n"],["pub=","Bitcoin::Key","Bitcoin/Key.html#method-i-pub-3D","(pub)","<p>Set the public key (in hex).\n"],["pubkey_to_address","Bitcoin::Util","Bitcoin/Util.html#method-i-pubkey_to_address","(pubkey)",""],["public_key_hex","OpenSSL::PKey::EC","OpenSSL/PKey/EC.html#method-i-public_key_hex","()",""],["query_blocks","Bitcoin::ConnectionHandler","Bitcoin/ConnectionHandler.html#method-i-query_blocks","()",""],["queue_inv","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-queue_inv","(inv)","<p>queue inv, caching the most current ones\n"],["random","Array","Array.html#method-i-random","(weights=nil)",""],["recalc_block_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-recalc_block_hash","()","<p>recalculate the block hash\n"],["receive_data","Bitcoin::Connection","Bitcoin/Connection.html#method-i-receive_data","(data)",""],["receive_data","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-receive_data","(line)",""],["receive_data","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-receive_data","(data)",""],["regenerate_key","Bitcoin::OpenSSL_EC","Bitcoin/OpenSSL_EC.html#method-c-regenerate_key","(private_key)","<p>resolve public from private key, using ffi and libssl.so example:\n\n<pre>keypair = Bitcoin.generate_key; Bitcoin::OpenSSL_EC.regenerate_key(keypair.first) ...</pre>\n"],["regenerate_pubkey","Bitcoin::Key","Bitcoin/Key.html#method-i-regenerate_pubkey","()","<p>Regenerate public key from the private key.\n"],["regenerate_public_key","Bitcoin::Util","Bitcoin/Util.html#method-i-regenerate_public_key","(private_key)",""],["relay_tx","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-relay_tx","(tx)",""],["reset","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-reset","()",""],["reset","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-reset","()",""],["reset","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-reset","()",""],["reset","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-reset","()","<p>reset the store; delete all data\n"],["respond","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-respond","(cmd, data)",""],["run","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-run","()",""],["run","Bitcoin::Script","Bitcoin/Script.html#method-i-run","(&check_callback)","<p>run the script. <code>check_callback</code> is called for OP_CHECKSIG\noperations\n"],["save","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-i-save","(*args)",""],["save","Bitcoin::Storage::Backends::ActiverecordStore::Input","Bitcoin/Storage/Backends/ActiverecordStore/Input.html#method-i-save","(*args)",""],["save","Bitcoin::Storage::Backends::ActiverecordStore::Output","Bitcoin/Storage/Backends/ActiverecordStore/Output.html#method-i-save","(*args)",""],["save","Bitcoin::Storage::Backends::ActiverecordStore::Transaction","Bitcoin/Storage/Backends/ActiverecordStore/Transaction.html#method-i-save","(*args)",""],["save","Bitcoin::Storage::Backends::ActiverecordStore::TransactionsParent","Bitcoin/Storage/Backends/ActiverecordStore/TransactionsParent.html#method-i-save","(*args)",""],["save_keys","Bitcoin::Wallet::SimpleKeyStore","Bitcoin/Wallet/SimpleKeyStore.html#method-i-save_keys","()","<p>Save keys to file.\n"],["script_sig=","Bitcoin::Protocol::TxIn","Bitcoin/Protocol/TxIn.html#method-i-script_sig-3D","(script_sig)",""],["select","Bitcoin::Wallet::SimpleCoinSelector","Bitcoin/Wallet/SimpleCoinSelector.html#method-i-select","(value)",""],["send_getaddr","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getaddr","()",""],["send_getblocks","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getblocks","()",""],["send_getdata_block","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getdata_block","(hash)",""],["send_getdata_tx","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getdata_tx","(hash)",""],["send_getheaders","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_getheaders","()",""],["send_inv","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-send_inv","(type, obj)",""],["set_priv","Bitcoin::Key","Bitcoin/Key.html#method-i-set_priv","(priv)","<p>Set <code>priv</code> as the new private key (converting from hex).\n"],["set_pub","Bitcoin::Key","Bitcoin/Key.html#method-i-set_pub","(pub)","<p>Set <code>pub</code> as the new public key (converting from hex).\n"],["set_store","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-set_store","()",""],["sha256","Bitcoin::Util","Bitcoin/Util.html#method-i-sha256","(hex)",""],["sha256","Bitcoin::Wallet::KeyGenerator","Bitcoin/Wallet/KeyGenerator.html#method-i-sha256","(d)","<p>compute a single SHA256 hash for <code>d</code>.\n"],["sign","Bitcoin::Key","Bitcoin/Key.html#method-i-sign","(data)","<p>Sign <code>data</code> with the key.\n\n<pre>key1 = Bitcoin::Key.generate\nsig = key.sign(&quot;some data&quot;)</pre>\n"],["sign_data","Bitcoin::Util","Bitcoin/Util.html#method-i-sign_data","(key, data)",""],["signature_hash_for_input","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-signature_hash_for_input","(input_idx, outpoint_tx, script_pubkey=nil, hash_type=nil, drop_sigs=nil, script=nil)","<p>generate a signature hash for input <code>input_idx</code>. either pass the\n<code>outpoint_tx</code> or the <code>script_pubkey</code> directly. …\n"],["stop","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-stop","()",""],["store_block","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-store_block","(blk)",""],["store_block","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-store_block","(blk)",""],["store_block","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-store_block","(blk)",""],["store_block","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-store_block","(blk)","<p>store given <code>block</code>\n"],["store_tx","Bitcoin::Storage::Backends::ActiverecordStore","Bitcoin/Storage/Backends/ActiverecordStore.html#method-i-store_tx","(tx)",""],["store_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-store_tx","(tx)",""],["store_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-store_tx","(tx)",""],["store_tx","Bitcoin::Storage::Backends::StoreBase","Bitcoin/Storage/Backends/StoreBase.html#method-i-store_tx","(tx)","<p>store given <code>tx</code>\n"],["store_txin","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-store_txin","(tx_id, txin, idx)",""],["store_txout","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-store_txout","(tx_id, txout, idx)",""],["symbolize","Bitcoin::Config","Bitcoin/Config.html#method-c-symbolize","(hash)","<p>Turn all keys in <code>hash</code> into symbols.\n"],["to_address_script","Bitcoin::Script","Bitcoin/Script.html#method-c-to_address_script","(address)","<p>generate standard transaction script for given <code>address</code>\n"],["to_base58","Bitcoin::Key","Bitcoin/Key.html#method-i-to_base58","()","<p>Export private key to base58 format. See also Key.from_base58\n"],["to_hash","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-to_hash","()","<p>convert to ruby hash (see also #from_hash)\n"],["to_hash","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-to_hash","()","<p>convert to ruby hash (see also #from_hash)\n"],["to_hash","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-i-to_hash","()",""],["to_hash","Bitcoin::Storage::Backends::ActiverecordStore::Transaction","Bitcoin/Storage/Backends/ActiverecordStore/Transaction.html#method-i-to_hash","()","<p>def verify\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">inputs</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">input</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-keyword\">return</span> <span class=\"ruby-keyword\">false</span>  <span class=\"ruby-keyword\">unless</span> <span class=\"ruby-identifier\">input</span>.<span class=\"ruby-identifier\">verify</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">true</span>\n</pre>\n<p>end\n"],["to_hex","OpenSSL::BN","OpenSSL/BN.html#method-i-to_hex","()",""],["to_hex","OpenSSL::PKey::EC::Point","OpenSSL/PKey/EC/Point.html#method-i-to_hex","()",""],["to_json","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-to_json","(options = {:space => ''}, *a)","<p>convert to json representation as seen in the block explorer. (see also\n#from_json)\n"],["to_json","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-to_json","(options = {:space => ''}, *a)","<p>generates rawblock json as seen in the block explorer.\n"],["to_mpi","OpenSSL::BN","OpenSSL/BN.html#method-i-to_mpi","()",""],["to_payload","Bitcoin::Protocol::Addr","Bitcoin/Protocol/Addr.html#method-i-to_payload","()",""],["to_payload","Bitcoin::Protocol::Block","Bitcoin/Protocol/Block.html#method-i-to_payload","()","<p>convert to raw binary format\n"],["to_payload","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-to_payload","()","<p>output transaction in raw binary format\n"],["to_protocol","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-i-to_protocol","()",""],["to_protocol","Bitcoin::Storage::Backends::ActiverecordStore::Transaction","Bitcoin/Storage/Backends/ActiverecordStore/Transaction.html#method-i-to_protocol","()",""],["to_s","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-to_s","()",""],["to_signature_pubkey_script","Bitcoin::Script","Bitcoin/Script.html#method-c-to_signature_pubkey_script","(signature, pubkey)",""],["to_string","Bitcoin::Script","Bitcoin/Script.html#method-i-to_string","(chunks=nil)","<p>string representation of the script\n"],["total_value","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-i-total_value","()","<p>get total value of all this block’s outputs values\n"],["transactions","Bitcoin::Storage::Backends::ActiverecordStore::Block","Bitcoin/Storage/Backends/ActiverecordStore/Block.html#method-i-transactions","()",""],["tx","Bitcoin::Wallet::Wallet","Bitcoin/Wallet/Wallet.html#method-i-tx","(outputs, fee = 0, change_policy = :back)","<p>outputs = [&lt;addr&gt;, &lt;value&gt;]\n"],["unbind","Bitcoin::Connection","Bitcoin/Connection.html#method-i-unbind","()",""],["unbind","Bitcoin::Network::CommandHandler","Bitcoin/Network/CommandHandler.html#method-i-unbind","()",""],["unbind","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-unbind","()",""],["unpack_var_int","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-unpack_var_int","(payload)",""],["unpack_var_int","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-unpack_var_int","(payload)",""],["uptime","Bitcoin::Network::ConnectionHandler","Bitcoin/Network/ConnectionHandler.html#method-i-uptime","()",""],["uptime","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-uptime","()",""],["valid_address?","Bitcoin::Util","Bitcoin/Util.html#method-i-valid_address-3F","(address)",""],["value","Bitcoin::Storage::Backends::ActiverecordStore::Output","Bitcoin/Storage/Backends/ActiverecordStore/Output.html#method-i-value","()",""],["value_to_address","Bitcoin::Protocol::TxOut","Bitcoin/Protocol/TxOut.html#method-c-value_to_address","(value, address)",""],["verack_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-verack_pkt","()",""],["verack_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-verack_pkt","()",""],["verify","Bitcoin::Key","Bitcoin/Key.html#method-i-verify","(data, sig)","<p>Verify signature <code>sig</code> for <code>data</code>.\n\n<pre>key2 = Bitcoin::Key.new(nil, key1.pub)\nkey2.verify(&quot;some data&quot;, sig)</pre>\n"],["verify_input_signature","Bitcoin::Protocol::Tx","Bitcoin/Protocol/Tx.html#method-i-verify_input_signature","(in_idx, outpoint_tx)","<p>verify input signature <code>in_idx</code> against the corresponding output\nin <code>outpoint_tx</code>\n"],["verify_signature","Bitcoin::Util","Bitcoin/Util.html#method-i-verify_signature","(hash, signature, public_key)",""],["version_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-version_pkt","(from_id, from, to, last_block=nil, time=nil)",""],["version_pkt","Bitcoin::Protocol","Bitcoin/Protocol.html#method-c-version_pkt","(from_id, from, to, last_block=nil, time=nil)",""],["weighted_sample","Array","Array.html#method-i-weighted_sample","(n, weights = nil)",""],["work_addrs","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_addrs","()","<p>check if the addr store is full and request new addrs from a random peer if\nit isn’t\n"],["work_connect","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_connect","()","<p>check if there are enough connections and try to establish new ones if\nneeded\n"],["work_inv_queue","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_inv_queue","()","<p>check for new items in the inv queue and process them, unless the queue is\nalready full\n"],["work_queue","Bitcoin::Network::Node","Bitcoin/Network/Node.html#method-i-work_queue","()","<p>check for new items in the queue and process them\n"],["wrap_block","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-wrap_block","(block)",""],["wrap_block","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-wrap_block","(block)",""],["wrap_tx","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-wrap_tx","(transaction)",""],["wrap_tx","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-wrap_tx","(transaction)",""],["wrap_txin","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-wrap_txin","(input)",""],["wrap_txin","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-wrap_txin","(input)",""],["wrap_txout","Bitcoin::Storage::Backends::DummyStore","Bitcoin/Storage/Backends/DummyStore.html#method-i-wrap_txout","(output)",""],["wrap_txout","Bitcoin::Storage::Backends::SequelStore","Bitcoin/Storage/Backends/SequelStore.html#method-i-wrap_txout","(output)",""],["COPYING","","COPYING.html","","<p>Copyright © 2011 Julian Langschaedel &lt;meta.rb@gmail.com&gt;\n<p>Permission is hereby granted, free of …\n"],["README","","README.html","","<p>Bitcoin-ruby\n<p>This is a ruby library for interacting with the bitcoin protocol/network.\nIt can parse and …\n"]]}}